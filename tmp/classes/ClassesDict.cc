#define private public
#define protected public
/*
 *  Delphes: a framework for fast simulation of a generic collider experiment
 *  Copyright (C) 2012-2014  Universite catholique de Louvain (UCL), Belgium
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** ExRootAnalysisLinkDef
 *
 *  Lists classes to be included in cint dicitonary
 *
 *  \author P. Demin - UCL, Louvain-la-Neuve
 *
 */

#include "classes/DelphesModule.h"
#include "classes/DelphesFactory.h"

#include "classes/SortableObject.h"
#include "classes/DelphesClasses.h"

#ifdef __CINT__

#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class DelphesModule+;
#pragma link C++ class DelphesFactory+;

#pragma link C++ class SortableObject+;

#pragma link C++ class Event+;
#pragma link C++ class LHCOEvent+;
#pragma link C++ class LHEFEvent+;
#pragma link C++ class HepMCEvent+;
#pragma link C++ class GenParticle+;
#pragma link C++ class Vertex+;
#pragma link C++ class MissingET+;
#pragma link C++ class ScalarHT+;
#pragma link C++ class Rho+;
#pragma link C++ class Weight+;
#pragma link C++ class Photon+;
#pragma link C++ class Electron+;
#pragma link C++ class Muon+;
#pragma link C++ class Jet+;
#pragma link C++ class Track+;
#pragma link C++ class Tower+;
#pragma link C++ class HectorHit+;

#pragma link C++ class Candidate+;

#endif

//
// File generated by rootcint at Wed Jul  1 00:15:50 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME tmpdIclassesdIClassesDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ClassesDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void DelphesFactory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DelphesFactory(void *p = 0);
   static void *newArray_DelphesFactory(Long_t size, void *p);
   static void delete_DelphesFactory(void *p);
   static void deleteArray_DelphesFactory(void *p);
   static void destruct_DelphesFactory(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DelphesFactory*)
   {
      ::DelphesFactory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DelphesFactory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DelphesFactory", ::DelphesFactory::Class_Version(), "./classes/DelphesFactory.h", 42,
                  typeid(::DelphesFactory), DefineBehavior(ptr, ptr),
                  &::DelphesFactory::Dictionary, isa_proxy, 4,
                  sizeof(::DelphesFactory) );
      instance.SetNew(&new_DelphesFactory);
      instance.SetNewArray(&newArray_DelphesFactory);
      instance.SetDelete(&delete_DelphesFactory);
      instance.SetDeleteArray(&deleteArray_DelphesFactory);
      instance.SetDestructor(&destruct_DelphesFactory);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DelphesFactory*)
   {
      return GenerateInitInstanceLocal((::DelphesFactory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DelphesFactory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void DelphesModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_DelphesModule(void *p = 0);
   static void *newArray_DelphesModule(Long_t size, void *p);
   static void delete_DelphesModule(void *p);
   static void deleteArray_DelphesModule(void *p);
   static void destruct_DelphesModule(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::DelphesModule*)
   {
      ::DelphesModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::DelphesModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("DelphesModule", ::DelphesModule::Class_Version(), "./classes/DelphesModule.h", 44,
                  typeid(::DelphesModule), DefineBehavior(ptr, ptr),
                  &::DelphesModule::Dictionary, isa_proxy, 4,
                  sizeof(::DelphesModule) );
      instance.SetNew(&new_DelphesModule);
      instance.SetNewArray(&newArray_DelphesModule);
      instance.SetDelete(&delete_DelphesModule);
      instance.SetDeleteArray(&deleteArray_DelphesModule);
      instance.SetDestructor(&destruct_DelphesModule);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::DelphesModule*)
   {
      return GenerateInitInstanceLocal((::DelphesModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::DelphesModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Candidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Candidate(void *p = 0);
   static void *newArray_Candidate(Long_t size, void *p);
   static void delete_Candidate(void *p);
   static void deleteArray_Candidate(void *p);
   static void destruct_Candidate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Candidate*)
   {
      ::Candidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Candidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Candidate", ::Candidate::Class_Version(), "./classes/DelphesClasses.h", 438,
                  typeid(::Candidate), DefineBehavior(ptr, ptr),
                  &::Candidate::Dictionary, isa_proxy, 4,
                  sizeof(::Candidate) );
      instance.SetNew(&new_Candidate);
      instance.SetNewArray(&newArray_Candidate);
      instance.SetDelete(&delete_Candidate);
      instance.SetDeleteArray(&deleteArray_Candidate);
      instance.SetDestructor(&destruct_Candidate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Candidate*)
   {
      return GenerateInitInstanceLocal((::Candidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Candidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SortableObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_SortableObject(void *p);
   static void deleteArray_SortableObject(void *p);
   static void destruct_SortableObject(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SortableObject*)
   {
      ::SortableObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SortableObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SortableObject", ::SortableObject::Class_Version(), "./classes/SortableObject.h", 47,
                  typeid(::SortableObject), DefineBehavior(ptr, ptr),
                  &::SortableObject::Dictionary, isa_proxy, 4,
                  sizeof(::SortableObject) );
      instance.SetDelete(&delete_SortableObject);
      instance.SetDeleteArray(&deleteArray_SortableObject);
      instance.SetDestructor(&destruct_SortableObject);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SortableObject*)
   {
      return GenerateInitInstanceLocal((::SortableObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SortableObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Event_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Event(void *p = 0);
   static void *newArray_Event(Long_t size, void *p);
   static void delete_Event(void *p);
   static void deleteArray_Event(void *p);
   static void destruct_Event(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Event*)
   {
      ::Event *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Event >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Event", ::Event::Class_Version(), "./classes/DelphesClasses.h", 46,
                  typeid(::Event), DefineBehavior(ptr, ptr),
                  &::Event::Dictionary, isa_proxy, 4,
                  sizeof(::Event) );
      instance.SetNew(&new_Event);
      instance.SetNewArray(&newArray_Event);
      instance.SetDelete(&delete_Event);
      instance.SetDeleteArray(&deleteArray_Event);
      instance.SetDestructor(&destruct_Event);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Event*)
   {
      return GenerateInitInstanceLocal((::Event*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Event*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LHCOEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LHCOEvent(void *p = 0);
   static void *newArray_LHCOEvent(Long_t size, void *p);
   static void delete_LHCOEvent(void *p);
   static void deleteArray_LHCOEvent(void *p);
   static void destruct_LHCOEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LHCOEvent*)
   {
      ::LHCOEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LHCOEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LHCOEvent", ::LHCOEvent::Class_Version(), "./classes/DelphesClasses.h", 60,
                  typeid(::LHCOEvent), DefineBehavior(ptr, ptr),
                  &::LHCOEvent::Dictionary, isa_proxy, 4,
                  sizeof(::LHCOEvent) );
      instance.SetNew(&new_LHCOEvent);
      instance.SetNewArray(&newArray_LHCOEvent);
      instance.SetDelete(&delete_LHCOEvent);
      instance.SetDeleteArray(&deleteArray_LHCOEvent);
      instance.SetDestructor(&destruct_LHCOEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LHCOEvent*)
   {
      return GenerateInitInstanceLocal((::LHCOEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHCOEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LHEFEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LHEFEvent(void *p = 0);
   static void *newArray_LHEFEvent(Long_t size, void *p);
   static void delete_LHEFEvent(void *p);
   static void deleteArray_LHEFEvent(void *p);
   static void destruct_LHEFEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LHEFEvent*)
   {
      ::LHEFEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LHEFEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LHEFEvent", ::LHEFEvent::Class_Version(), "./classes/DelphesClasses.h", 71,
                  typeid(::LHEFEvent), DefineBehavior(ptr, ptr),
                  &::LHEFEvent::Dictionary, isa_proxy, 4,
                  sizeof(::LHEFEvent) );
      instance.SetNew(&new_LHEFEvent);
      instance.SetNewArray(&newArray_LHEFEvent);
      instance.SetDelete(&delete_LHEFEvent);
      instance.SetDeleteArray(&deleteArray_LHEFEvent);
      instance.SetDestructor(&destruct_LHEFEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LHEFEvent*)
   {
      return GenerateInitInstanceLocal((::LHEFEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LHEFEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HepMCEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HepMCEvent(void *p = 0);
   static void *newArray_HepMCEvent(Long_t size, void *p);
   static void delete_HepMCEvent(void *p);
   static void deleteArray_HepMCEvent(void *p);
   static void destruct_HepMCEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HepMCEvent*)
   {
      ::HepMCEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HepMCEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HepMCEvent", ::HepMCEvent::Class_Version(), "./classes/DelphesClasses.h", 87,
                  typeid(::HepMCEvent), DefineBehavior(ptr, ptr),
                  &::HepMCEvent::Dictionary, isa_proxy, 4,
                  sizeof(::HepMCEvent) );
      instance.SetNew(&new_HepMCEvent);
      instance.SetNewArray(&newArray_HepMCEvent);
      instance.SetDelete(&delete_HepMCEvent);
      instance.SetDeleteArray(&deleteArray_HepMCEvent);
      instance.SetDestructor(&destruct_HepMCEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HepMCEvent*)
   {
      return GenerateInitInstanceLocal((::HepMCEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HepMCEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GenParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GenParticle(void *p = 0);
   static void *newArray_GenParticle(Long_t size, void *p);
   static void delete_GenParticle(void *p);
   static void deleteArray_GenParticle(void *p);
   static void destruct_GenParticle(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GenParticle*)
   {
      ::GenParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GenParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GenParticle", ::GenParticle::Class_Version(), "./classes/DelphesClasses.h", 116,
                  typeid(::GenParticle), DefineBehavior(ptr, ptr),
                  &::GenParticle::Dictionary, isa_proxy, 4,
                  sizeof(::GenParticle) );
      instance.SetNew(&new_GenParticle);
      instance.SetNewArray(&newArray_GenParticle);
      instance.SetDelete(&delete_GenParticle);
      instance.SetDeleteArray(&deleteArray_GenParticle);
      instance.SetDestructor(&destruct_GenParticle);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GenParticle*)
   {
      return GenerateInitInstanceLocal((::GenParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GenParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Vertex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Vertex(void *p = 0);
   static void *newArray_Vertex(Long_t size, void *p);
   static void delete_Vertex(void *p);
   static void deleteArray_Vertex(void *p);
   static void destruct_Vertex(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Vertex*)
   {
      ::Vertex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Vertex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Vertex", ::Vertex::Class_Version(), "./classes/DelphesClasses.h", 160,
                  typeid(::Vertex), DefineBehavior(ptr, ptr),
                  &::Vertex::Dictionary, isa_proxy, 4,
                  sizeof(::Vertex) );
      instance.SetNew(&new_Vertex);
      instance.SetNewArray(&newArray_Vertex);
      instance.SetDelete(&delete_Vertex);
      instance.SetDeleteArray(&deleteArray_Vertex);
      instance.SetDestructor(&destruct_Vertex);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Vertex*)
   {
      return GenerateInitInstanceLocal((::Vertex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Vertex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MissingET_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MissingET(void *p = 0);
   static void *newArray_MissingET(Long_t size, void *p);
   static void delete_MissingET(void *p);
   static void deleteArray_MissingET(void *p);
   static void destruct_MissingET(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MissingET*)
   {
      ::MissingET *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MissingET >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MissingET", ::MissingET::Class_Version(), "./classes/DelphesClasses.h", 173,
                  typeid(::MissingET), DefineBehavior(ptr, ptr),
                  &::MissingET::Dictionary, isa_proxy, 4,
                  sizeof(::MissingET) );
      instance.SetNew(&new_MissingET);
      instance.SetNewArray(&newArray_MissingET);
      instance.SetDelete(&delete_MissingET);
      instance.SetDeleteArray(&deleteArray_MissingET);
      instance.SetDestructor(&destruct_MissingET);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MissingET*)
   {
      return GenerateInitInstanceLocal((::MissingET*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MissingET*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ScalarHT_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ScalarHT(void *p = 0);
   static void *newArray_ScalarHT(Long_t size, void *p);
   static void delete_ScalarHT(void *p);
   static void deleteArray_ScalarHT(void *p);
   static void destruct_ScalarHT(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ScalarHT*)
   {
      ::ScalarHT *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ScalarHT >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ScalarHT", ::ScalarHT::Class_Version(), "./classes/DelphesClasses.h", 187,
                  typeid(::ScalarHT), DefineBehavior(ptr, ptr),
                  &::ScalarHT::Dictionary, isa_proxy, 4,
                  sizeof(::ScalarHT) );
      instance.SetNew(&new_ScalarHT);
      instance.SetNewArray(&newArray_ScalarHT);
      instance.SetDelete(&delete_ScalarHT);
      instance.SetDeleteArray(&deleteArray_ScalarHT);
      instance.SetDestructor(&destruct_ScalarHT);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ScalarHT*)
   {
      return GenerateInitInstanceLocal((::ScalarHT*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ScalarHT*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Rho_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Rho(void *p = 0);
   static void *newArray_Rho(Long_t size, void *p);
   static void delete_Rho(void *p);
   static void deleteArray_Rho(void *p);
   static void destruct_Rho(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Rho*)
   {
      ::Rho *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Rho >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Rho", ::Rho::Class_Version(), "./classes/DelphesClasses.h", 197,
                  typeid(::Rho), DefineBehavior(ptr, ptr),
                  &::Rho::Dictionary, isa_proxy, 4,
                  sizeof(::Rho) );
      instance.SetNew(&new_Rho);
      instance.SetNewArray(&newArray_Rho);
      instance.SetDelete(&delete_Rho);
      instance.SetDeleteArray(&deleteArray_Rho);
      instance.SetDestructor(&destruct_Rho);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Rho*)
   {
      return GenerateInitInstanceLocal((::Rho*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Rho*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Weight_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Weight(void *p = 0);
   static void *newArray_Weight(Long_t size, void *p);
   static void delete_Weight(void *p);
   static void deleteArray_Weight(void *p);
   static void destruct_Weight(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Weight*)
   {
      ::Weight *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Weight >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Weight", ::Weight::Class_Version(), "./classes/DelphesClasses.h", 208,
                  typeid(::Weight), DefineBehavior(ptr, ptr),
                  &::Weight::Dictionary, isa_proxy, 4,
                  sizeof(::Weight) );
      instance.SetNew(&new_Weight);
      instance.SetNewArray(&newArray_Weight);
      instance.SetDelete(&delete_Weight);
      instance.SetDeleteArray(&deleteArray_Weight);
      instance.SetDestructor(&destruct_Weight);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Weight*)
   {
      return GenerateInitInstanceLocal((::Weight*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Weight*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Photon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Photon(void *p = 0);
   static void *newArray_Photon(Long_t size, void *p);
   static void delete_Photon(void *p);
   static void deleteArray_Photon(void *p);
   static void destruct_Photon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Photon*)
   {
      ::Photon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Photon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Photon", ::Photon::Class_Version(), "./classes/DelphesClasses.h", 218,
                  typeid(::Photon), DefineBehavior(ptr, ptr),
                  &::Photon::Dictionary, isa_proxy, 4,
                  sizeof(::Photon) );
      instance.SetNew(&new_Photon);
      instance.SetNewArray(&newArray_Photon);
      instance.SetDelete(&delete_Photon);
      instance.SetDeleteArray(&deleteArray_Photon);
      instance.SetDestructor(&destruct_Photon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Photon*)
   {
      return GenerateInitInstanceLocal((::Photon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Photon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Electron_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Electron(void *p = 0);
   static void *newArray_Electron(Long_t size, void *p);
   static void delete_Electron(void *p);
   static void deleteArray_Electron(void *p);
   static void destruct_Electron(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Electron*)
   {
      ::Electron *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Electron >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Electron", ::Electron::Class_Version(), "./classes/DelphesClasses.h", 244,
                  typeid(::Electron), DefineBehavior(ptr, ptr),
                  &::Electron::Dictionary, isa_proxy, 4,
                  sizeof(::Electron) );
      instance.SetNew(&new_Electron);
      instance.SetNewArray(&newArray_Electron);
      instance.SetDelete(&delete_Electron);
      instance.SetDeleteArray(&deleteArray_Electron);
      instance.SetDestructor(&destruct_Electron);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Electron*)
   {
      return GenerateInitInstanceLocal((::Electron*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Electron*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Muon_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Muon(void *p = 0);
   static void *newArray_Muon(Long_t size, void *p);
   static void delete_Muon(void *p);
   static void deleteArray_Muon(void *p);
   static void destruct_Muon(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Muon*)
   {
      ::Muon *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Muon >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Muon", ::Muon::Class_Version(), "./classes/DelphesClasses.h", 270,
                  typeid(::Muon), DefineBehavior(ptr, ptr),
                  &::Muon::Dictionary, isa_proxy, 4,
                  sizeof(::Muon) );
      instance.SetNew(&new_Muon);
      instance.SetNewArray(&newArray_Muon);
      instance.SetDelete(&delete_Muon);
      instance.SetDeleteArray(&deleteArray_Muon);
      instance.SetDestructor(&destruct_Muon);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Muon*)
   {
      return GenerateInitInstanceLocal((::Muon*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Muon*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Jet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Jet(void *p = 0);
   static void *newArray_Jet(Long_t size, void *p);
   static void delete_Jet(void *p);
   static void deleteArray_Jet(void *p);
   static void destruct_Jet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Jet*)
   {
      ::Jet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Jet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Jet", ::Jet::Class_Version(), "./classes/DelphesClasses.h", 294,
                  typeid(::Jet), DefineBehavior(ptr, ptr),
                  &::Jet::Dictionary, isa_proxy, 4,
                  sizeof(::Jet) );
      instance.SetNew(&new_Jet);
      instance.SetNewArray(&newArray_Jet);
      instance.SetDelete(&delete_Jet);
      instance.SetDeleteArray(&deleteArray_Jet);
      instance.SetDestructor(&destruct_Jet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Jet*)
   {
      return GenerateInitInstanceLocal((::Jet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Jet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Track_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Track(void *p = 0);
   static void *newArray_Track(Long_t size, void *p);
   static void delete_Track(void *p);
   static void deleteArray_Track(void *p);
   static void destruct_Track(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Track*)
   {
      ::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Track >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Track", ::Track::Class_Version(), "./classes/DelphesClasses.h", 343,
                  typeid(::Track), DefineBehavior(ptr, ptr),
                  &::Track::Dictionary, isa_proxy, 4,
                  sizeof(::Track) );
      instance.SetNew(&new_Track);
      instance.SetNewArray(&newArray_Track);
      instance.SetDelete(&delete_Track);
      instance.SetDeleteArray(&deleteArray_Track);
      instance.SetDestructor(&destruct_Track);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Track*)
   {
      return GenerateInitInstanceLocal((::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Tower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Tower(void *p = 0);
   static void *newArray_Tower(Long_t size, void *p);
   static void delete_Tower(void *p);
   static void deleteArray_Tower(void *p);
   static void destruct_Tower(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Tower*)
   {
      ::Tower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Tower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Tower", ::Tower::Class_Version(), "./classes/DelphesClasses.h", 386,
                  typeid(::Tower), DefineBehavior(ptr, ptr),
                  &::Tower::Dictionary, isa_proxy, 4,
                  sizeof(::Tower) );
      instance.SetNew(&new_Tower);
      instance.SetNewArray(&newArray_Tower);
      instance.SetDelete(&delete_Tower);
      instance.SetDeleteArray(&deleteArray_Tower);
      instance.SetDestructor(&destruct_Tower);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Tower*)
   {
      return GenerateInitInstanceLocal((::Tower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Tower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void HectorHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HectorHit(void *p = 0);
   static void *newArray_HectorHit(Long_t size, void *p);
   static void delete_HectorHit(void *p);
   static void deleteArray_HectorHit(void *p);
   static void destruct_HectorHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HectorHit*)
   {
      ::HectorHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HectorHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HectorHit", ::HectorHit::Class_Version(), "./classes/DelphesClasses.h", 414,
                  typeid(::HectorHit), DefineBehavior(ptr, ptr),
                  &::HectorHit::Dictionary, isa_proxy, 4,
                  sizeof(::HectorHit) );
      instance.SetNew(&new_HectorHit);
      instance.SetNewArray(&newArray_HectorHit);
      instance.SetDelete(&delete_HectorHit);
      instance.SetDeleteArray(&deleteArray_HectorHit);
      instance.SetDestructor(&destruct_HectorHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HectorHit*)
   {
      return GenerateInitInstanceLocal((::HectorHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HectorHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *DelphesFactory::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DelphesFactory::Class_Name()
{
   return "DelphesFactory";
}

//______________________________________________________________________________
const char *DelphesFactory::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DelphesFactory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DelphesFactory::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DelphesFactory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DelphesFactory::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DelphesFactory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DelphesFactory::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DelphesFactory*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *DelphesModule::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *DelphesModule::Class_Name()
{
   return "DelphesModule";
}

//______________________________________________________________________________
const char *DelphesModule::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DelphesModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int DelphesModule::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::DelphesModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void DelphesModule::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DelphesModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *DelphesModule::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::DelphesModule*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Candidate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Candidate::Class_Name()
{
   return "Candidate";
}

//______________________________________________________________________________
const char *Candidate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Candidate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Candidate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Candidate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Candidate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SortableObject::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SortableObject::Class_Name()
{
   return "SortableObject";
}

//______________________________________________________________________________
const char *SortableObject::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SortableObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SortableObject::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SortableObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SortableObject::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SortableObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SortableObject::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SortableObject*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Event::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Event::Class_Name()
{
   return "Event";
}

//______________________________________________________________________________
const char *Event::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Event::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Event::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Event::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Event*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LHCOEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LHCOEvent::Class_Name()
{
   return "LHCOEvent";
}

//______________________________________________________________________________
const char *LHCOEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCOEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LHCOEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHCOEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LHCOEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCOEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LHCOEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHCOEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LHEFEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LHEFEvent::Class_Name()
{
   return "LHEFEvent";
}

//______________________________________________________________________________
const char *LHEFEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHEFEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LHEFEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LHEFEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LHEFEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHEFEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LHEFEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LHEFEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HepMCEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HepMCEvent::Class_Name()
{
   return "HepMCEvent";
}

//______________________________________________________________________________
const char *HepMCEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HepMCEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HepMCEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HepMCEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HepMCEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HepMCEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HepMCEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HepMCEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GenParticle::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GenParticle::Class_Name()
{
   return "GenParticle";
}

//______________________________________________________________________________
const char *GenParticle::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GenParticle::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GenParticle::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GenParticle::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GenParticle*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Vertex::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Vertex::Class_Name()
{
   return "Vertex";
}

//______________________________________________________________________________
const char *Vertex::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Vertex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Vertex::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Vertex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Vertex::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Vertex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Vertex::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Vertex*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MissingET::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MissingET::Class_Name()
{
   return "MissingET";
}

//______________________________________________________________________________
const char *MissingET::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MissingET*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MissingET::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MissingET*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MissingET::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MissingET*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MissingET::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MissingET*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ScalarHT::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ScalarHT::Class_Name()
{
   return "ScalarHT";
}

//______________________________________________________________________________
const char *ScalarHT::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ScalarHT*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ScalarHT::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ScalarHT*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ScalarHT::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ScalarHT*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ScalarHT::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ScalarHT*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Rho::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Rho::Class_Name()
{
   return "Rho";
}

//______________________________________________________________________________
const char *Rho::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Rho*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Rho::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Rho*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Rho::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Rho*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Rho::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Rho*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Weight::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Weight::Class_Name()
{
   return "Weight";
}

//______________________________________________________________________________
const char *Weight::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Weight*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Weight::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Weight*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Weight::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Weight*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Weight::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Weight*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Photon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Photon::Class_Name()
{
   return "Photon";
}

//______________________________________________________________________________
const char *Photon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Photon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Photon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Photon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Photon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Photon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Photon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Photon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Electron::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Electron::Class_Name()
{
   return "Electron";
}

//______________________________________________________________________________
const char *Electron::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Electron*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Electron::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Electron*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Electron::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Electron*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Electron::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Electron*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Muon::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Muon::Class_Name()
{
   return "Muon";
}

//______________________________________________________________________________
const char *Muon::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Muon*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Muon::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Muon*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Muon::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Muon*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Muon::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Muon*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Jet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Jet::Class_Name()
{
   return "Jet";
}

//______________________________________________________________________________
const char *Jet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Jet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Jet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Jet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Jet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Jet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Jet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Jet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Track::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Track::Class_Name()
{
   return "Track";
}

//______________________________________________________________________________
const char *Track::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Track::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Track::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Track::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Track*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Tower::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Tower::Class_Name()
{
   return "Tower";
}

//______________________________________________________________________________
const char *Tower::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Tower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Tower::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Tower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Tower::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Tower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Tower::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Tower*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *HectorHit::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *HectorHit::Class_Name()
{
   return "HectorHit";
}

//______________________________________________________________________________
const char *HectorHit::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HectorHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HectorHit::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::HectorHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HectorHit::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HectorHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HectorHit::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::HectorHit*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void DelphesModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class DelphesModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DelphesModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(DelphesModule::Class(),this);
   }
}

//______________________________________________________________________________
void DelphesModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DelphesModule.
      TClass *R__cl = ::DelphesModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTreeWriter", &fTreeWriter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFactory", &fFactory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlots", &fPlots);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPlotFolder", &fPlotFolder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fExportFolder", &fExportFolder);
      ExRootTask::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DelphesModule(void *p) {
      return  p ? new(p) ::DelphesModule : new ::DelphesModule;
   }
   static void *newArray_DelphesModule(Long_t nElements, void *p) {
      return p ? new(p) ::DelphesModule[nElements] : new ::DelphesModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_DelphesModule(void *p) {
      delete ((::DelphesModule*)p);
   }
   static void deleteArray_DelphesModule(void *p) {
      delete [] ((::DelphesModule*)p);
   }
   static void destruct_DelphesModule(void *p) {
      typedef ::DelphesModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DelphesModule

//______________________________________________________________________________
void DelphesFactory::Streamer(TBuffer &R__b)
{
   // Stream an object of class DelphesFactory.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(DelphesFactory::Class(),this);
   } else {
      R__b.WriteClassBuffer(DelphesFactory::Class(),this);
   }
}

//______________________________________________________________________________
void DelphesFactory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class DelphesFactory.
      TClass *R__cl = ::DelphesFactory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fObjArrays", &fObjArrays);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPool", (void*)&fPool);
      R__insp.InspectMember("set<TObject*>", (void*)&fPool, "fPool.", true);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_DelphesFactory(void *p) {
      return  p ? new(p) ::DelphesFactory : new ::DelphesFactory;
   }
   static void *newArray_DelphesFactory(Long_t nElements, void *p) {
      return p ? new(p) ::DelphesFactory[nElements] : new ::DelphesFactory[nElements];
   }
   // Wrapper around operator delete
   static void delete_DelphesFactory(void *p) {
      delete ((::DelphesFactory*)p);
   }
   static void deleteArray_DelphesFactory(void *p) {
      delete [] ((::DelphesFactory*)p);
   }
   static void destruct_DelphesFactory(void *p) {
      typedef ::DelphesFactory current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::DelphesFactory

//______________________________________________________________________________
void SortableObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class SortableObject.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SortableObject::Class(),this);
   } else {
      R__b.WriteClassBuffer(SortableObject::Class(),this);
   }
}

//______________________________________________________________________________
void SortableObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SortableObject.
      TClass *R__cl = ::SortableObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_SortableObject(void *p) {
      delete ((::SortableObject*)p);
   }
   static void deleteArray_SortableObject(void *p) {
      delete [] ((::SortableObject*)p);
   }
   static void destruct_SortableObject(void *p) {
      typedef ::SortableObject current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SortableObject

//______________________________________________________________________________
void Event::Streamer(TBuffer &R__b)
{
   // Stream an object of class Event.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Event::Class(),this);
   } else {
      R__b.WriteClassBuffer(Event::Class(),this);
   }
}

//______________________________________________________________________________
void Event::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Event.
      TClass *R__cl = ::Event::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Number", &Number);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ReadTime", &ReadTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ProcTime", &ProcTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Event(void *p) {
      return  p ? new(p) ::Event : new ::Event;
   }
   static void *newArray_Event(Long_t nElements, void *p) {
      return p ? new(p) ::Event[nElements] : new ::Event[nElements];
   }
   // Wrapper around operator delete
   static void delete_Event(void *p) {
      delete ((::Event*)p);
   }
   static void deleteArray_Event(void *p) {
      delete [] ((::Event*)p);
   }
   static void destruct_Event(void *p) {
      typedef ::Event current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Event

//______________________________________________________________________________
void LHCOEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class LHCOEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LHCOEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(LHCOEvent::Class(),this);
   }
}

//______________________________________________________________________________
void LHCOEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LHCOEvent.
      TClass *R__cl = ::LHCOEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Trigger", &Trigger);
      Event::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LHCOEvent(void *p) {
      return  p ? new(p) ::LHCOEvent : new ::LHCOEvent;
   }
   static void *newArray_LHCOEvent(Long_t nElements, void *p) {
      return p ? new(p) ::LHCOEvent[nElements] : new ::LHCOEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHCOEvent(void *p) {
      delete ((::LHCOEvent*)p);
   }
   static void deleteArray_LHCOEvent(void *p) {
      delete [] ((::LHCOEvent*)p);
   }
   static void destruct_LHCOEvent(void *p) {
      typedef ::LHCOEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LHCOEvent

//______________________________________________________________________________
void LHEFEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class LHEFEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LHEFEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(LHEFEvent::Class(),this);
   }
}

//______________________________________________________________________________
void LHEFEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LHEFEvent.
      TClass *R__cl = ::LHEFEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ProcessID", &ProcessID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Weight", &Weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScalePDF", &ScalePDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AlphaQED", &AlphaQED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AlphaQCD", &AlphaQCD);
      Event::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LHEFEvent(void *p) {
      return  p ? new(p) ::LHEFEvent : new ::LHEFEvent;
   }
   static void *newArray_LHEFEvent(Long_t nElements, void *p) {
      return p ? new(p) ::LHEFEvent[nElements] : new ::LHEFEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_LHEFEvent(void *p) {
      delete ((::LHEFEvent*)p);
   }
   static void deleteArray_LHEFEvent(void *p) {
      delete [] ((::LHEFEvent*)p);
   }
   static void destruct_LHEFEvent(void *p) {
      typedef ::LHEFEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LHEFEvent

//______________________________________________________________________________
void HepMCEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class HepMCEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HepMCEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(HepMCEvent::Class(),this);
   }
}

//______________________________________________________________________________
void HepMCEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HepMCEvent.
      TClass *R__cl = ::HepMCEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ProcessID", &ProcessID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MPI", &MPI);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Weight", &Weight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale", &Scale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AlphaQED", &AlphaQED);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "AlphaQCD", &AlphaQCD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ID1", &ID1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ID2", &ID2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X1", &X1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X2", &X2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScalePDF", &ScalePDF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PDF1", &PDF1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PDF2", &PDF2);
      Event::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HepMCEvent(void *p) {
      return  p ? new(p) ::HepMCEvent : new ::HepMCEvent;
   }
   static void *newArray_HepMCEvent(Long_t nElements, void *p) {
      return p ? new(p) ::HepMCEvent[nElements] : new ::HepMCEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_HepMCEvent(void *p) {
      delete ((::HepMCEvent*)p);
   }
   static void deleteArray_HepMCEvent(void *p) {
      delete [] ((::HepMCEvent*)p);
   }
   static void destruct_HepMCEvent(void *p) {
      typedef ::HepMCEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HepMCEvent

//______________________________________________________________________________
void GenParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class GenParticle.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GenParticle::Class(),this);
   } else {
      R__b.WriteClassBuffer(GenParticle::Class(),this);
   }
}

//______________________________________________________________________________
void GenParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GenParticle.
      TClass *R__cl = ::GenParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PID", &PID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Status", &Status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsPU", &IsPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M1", &M1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M2", &M2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D1", &D1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D2", &D2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Px", &Px);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Py", &Py);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Pz", &Pz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rapidity", &Rapidity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GenParticle(void *p) {
      return  p ? new(p) ::GenParticle : new ::GenParticle;
   }
   static void *newArray_GenParticle(Long_t nElements, void *p) {
      return p ? new(p) ::GenParticle[nElements] : new ::GenParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_GenParticle(void *p) {
      delete ((::GenParticle*)p);
   }
   static void deleteArray_GenParticle(void *p) {
      delete [] ((::GenParticle*)p);
   }
   static void destruct_GenParticle(void *p) {
      typedef ::GenParticle current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GenParticle

//______________________________________________________________________________
void Vertex::Streamer(TBuffer &R__b)
{
   // Stream an object of class Vertex.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Vertex::Class(),this);
   } else {
      R__b.WriteClassBuffer(Vertex::Class(),this);
   }
}

//______________________________________________________________________________
void Vertex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Vertex.
      TClass *R__cl = ::Vertex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Vertex(void *p) {
      return  p ? new(p) ::Vertex : new ::Vertex;
   }
   static void *newArray_Vertex(Long_t nElements, void *p) {
      return p ? new(p) ::Vertex[nElements] : new ::Vertex[nElements];
   }
   // Wrapper around operator delete
   static void delete_Vertex(void *p) {
      delete ((::Vertex*)p);
   }
   static void deleteArray_Vertex(void *p) {
      delete [] ((::Vertex*)p);
   }
   static void destruct_Vertex(void *p) {
      typedef ::Vertex current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Vertex

//______________________________________________________________________________
void MissingET::Streamer(TBuffer &R__b)
{
   // Stream an object of class MissingET.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MissingET::Class(),this);
   } else {
      R__b.WriteClassBuffer(MissingET::Class(),this);
   }
}

//______________________________________________________________________________
void MissingET::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MissingET.
      TClass *R__cl = ::MissingET::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MET", &MET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MissingET(void *p) {
      return  p ? new(p) ::MissingET : new ::MissingET;
   }
   static void *newArray_MissingET(Long_t nElements, void *p) {
      return p ? new(p) ::MissingET[nElements] : new ::MissingET[nElements];
   }
   // Wrapper around operator delete
   static void delete_MissingET(void *p) {
      delete ((::MissingET*)p);
   }
   static void deleteArray_MissingET(void *p) {
      delete [] ((::MissingET*)p);
   }
   static void destruct_MissingET(void *p) {
      typedef ::MissingET current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MissingET

//______________________________________________________________________________
void ScalarHT::Streamer(TBuffer &R__b)
{
   // Stream an object of class ScalarHT.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ScalarHT::Class(),this);
   } else {
      R__b.WriteClassBuffer(ScalarHT::Class(),this);
   }
}

//______________________________________________________________________________
void ScalarHT::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ScalarHT.
      TClass *R__cl = ::ScalarHT::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "HT", &HT);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ScalarHT(void *p) {
      return  p ? new(p) ::ScalarHT : new ::ScalarHT;
   }
   static void *newArray_ScalarHT(Long_t nElements, void *p) {
      return p ? new(p) ::ScalarHT[nElements] : new ::ScalarHT[nElements];
   }
   // Wrapper around operator delete
   static void delete_ScalarHT(void *p) {
      delete ((::ScalarHT*)p);
   }
   static void deleteArray_ScalarHT(void *p) {
      delete [] ((::ScalarHT*)p);
   }
   static void destruct_ScalarHT(void *p) {
      typedef ::ScalarHT current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ScalarHT

//______________________________________________________________________________
void Rho::Streamer(TBuffer &R__b)
{
   // Stream an object of class Rho.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Rho::Class(),this);
   } else {
      R__b.WriteClassBuffer(Rho::Class(),this);
   }
}

//______________________________________________________________________________
void Rho::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Rho.
      TClass *R__cl = ::Rho::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rho", &Rho);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edges[2]", Edges);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Rho(void *p) {
      return  p ? new(p) ::Rho : new ::Rho;
   }
   static void *newArray_Rho(Long_t nElements, void *p) {
      return p ? new(p) ::Rho[nElements] : new ::Rho[nElements];
   }
   // Wrapper around operator delete
   static void delete_Rho(void *p) {
      delete ((::Rho*)p);
   }
   static void deleteArray_Rho(void *p) {
      delete [] ((::Rho*)p);
   }
   static void destruct_Rho(void *p) {
      typedef ::Rho current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Rho

//______________________________________________________________________________
void Weight::Streamer(TBuffer &R__b)
{
   // Stream an object of class Weight.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Weight::Class(),this);
   } else {
      R__b.WriteClassBuffer(Weight::Class(),this);
   }
}

//______________________________________________________________________________
void Weight::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Weight.
      TClass *R__cl = ::Weight::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Weight", &Weight);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Weight(void *p) {
      return  p ? new(p) ::Weight : new ::Weight;
   }
   static void *newArray_Weight(Long_t nElements, void *p) {
      return p ? new(p) ::Weight[nElements] : new ::Weight[nElements];
   }
   // Wrapper around operator delete
   static void delete_Weight(void *p) {
      delete ((::Weight*)p);
   }
   static void deleteArray_Weight(void *p) {
      delete [] ((::Weight*)p);
   }
   static void destruct_Weight(void *p) {
      typedef ::Weight current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Weight

//______________________________________________________________________________
void Photon::Streamer(TBuffer &R__b)
{
   // Stream an object of class Photon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Photon::Class(),this);
   } else {
      R__b.WriteClassBuffer(Photon::Class(),this);
   }
}

//______________________________________________________________________________
void Photon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Photon.
      TClass *R__cl = ::Photon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EhadOverEem", &EhadOverEem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particles", &Particles);
      R__insp.InspectMember(Particles, "Particles.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Photon(void *p) {
      return  p ? new(p) ::Photon : new ::Photon;
   }
   static void *newArray_Photon(Long_t nElements, void *p) {
      return p ? new(p) ::Photon[nElements] : new ::Photon[nElements];
   }
   // Wrapper around operator delete
   static void delete_Photon(void *p) {
      delete ((::Photon*)p);
   }
   static void deleteArray_Photon(void *p) {
      delete [] ((::Photon*)p);
   }
   static void destruct_Photon(void *p) {
      typedef ::Photon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Photon

//______________________________________________________________________________
void Electron::Streamer(TBuffer &R__b)
{
   // Stream an object of class Electron.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Electron::Class(),this);
   } else {
      R__b.WriteClassBuffer(Electron::Class(),this);
   }
}

//______________________________________________________________________________
void Electron::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Electron.
      TClass *R__cl = ::Electron::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EhadOverEem", &EhadOverEem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particle", &Particle);
      R__insp.InspectMember(Particle, "Particle.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Electron(void *p) {
      return  p ? new(p) ::Electron : new ::Electron;
   }
   static void *newArray_Electron(Long_t nElements, void *p) {
      return p ? new(p) ::Electron[nElements] : new ::Electron[nElements];
   }
   // Wrapper around operator delete
   static void delete_Electron(void *p) {
      delete ((::Electron*)p);
   }
   static void deleteArray_Electron(void *p) {
      delete [] ((::Electron*)p);
   }
   static void destruct_Electron(void *p) {
      typedef ::Electron current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Electron

//______________________________________________________________________________
void Muon::Streamer(TBuffer &R__b)
{
   // Stream an object of class Muon.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Muon::Class(),this);
   } else {
      R__b.WriteClassBuffer(Muon::Class(),this);
   }
}

//______________________________________________________________________________
void Muon::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Muon.
      TClass *R__cl = ::Muon::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particle", &Particle);
      R__insp.InspectMember(Particle, "Particle.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Muon(void *p) {
      return  p ? new(p) ::Muon : new ::Muon;
   }
   static void *newArray_Muon(Long_t nElements, void *p) {
      return p ? new(p) ::Muon[nElements] : new ::Muon[nElements];
   }
   // Wrapper around operator delete
   static void delete_Muon(void *p) {
      delete ((::Muon*)p);
   }
   static void deleteArray_Muon(void *p) {
      delete [] ((::Muon*)p);
   }
   static void destruct_Muon(void *p) {
      typedef ::Muon current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Muon

//______________________________________________________________________________
void Jet::Streamer(TBuffer &R__b)
{
   // Stream an object of class Jet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Jet::Class(),this);
   } else {
      R__b.WriteClassBuffer(Jet::Class(),this);
   }
}

//______________________________________________________________________________
void Jet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Jet.
      TClass *R__cl = ::Jet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaEta", &DeltaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaPhi", &DeltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BTag", &BTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TauTag", &TauTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EhadOverEem", &EhadOverEem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NCharged", &NCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NNeutrals", &NNeutrals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beta", &Beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BetaStar", &BetaStar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MeanSqDeltaR", &MeanSqDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PTD", &PTD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FracPt[5]", FracPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau1", &Tau1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau2", &Tau2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau3", &Tau3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau4", &Tau4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau5", &Tau5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Constituents", &Constituents);
      R__insp.InspectMember(Constituents, "Constituents.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particles", &Particles);
      R__insp.InspectMember(Particles, "Particles.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Jet(void *p) {
      return  p ? new(p) ::Jet : new ::Jet;
   }
   static void *newArray_Jet(Long_t nElements, void *p) {
      return p ? new(p) ::Jet[nElements] : new ::Jet[nElements];
   }
   // Wrapper around operator delete
   static void delete_Jet(void *p) {
      delete ((::Jet*)p);
   }
   static void deleteArray_Jet(void *p) {
      delete [] ((::Jet*)p);
   }
   static void destruct_Jet(void *p) {
      typedef ::Jet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Jet

//______________________________________________________________________________
void Track::Streamer(TBuffer &R__b)
{
   // Stream an object of class Track.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Track::Class(),this);
   } else {
      R__b.WriteClassBuffer(Track::Class(),this);
   }
}

//______________________________________________________________________________
void Track::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Track.
      TClass *R__cl = ::Track::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PID", &PID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PT", &PT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EtaOuter", &EtaOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PhiOuter", &PhiOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "XOuter", &XOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "YOuter", &YOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ZOuter", &ZOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TOuter", &TOuter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dxy", &Dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SDxy", &SDxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xd", &Xd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Yd", &Yd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zd", &Zd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particle", &Particle);
      R__insp.InspectMember(Particle, "Particle.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Track(void *p) {
      return  p ? new(p) ::Track : new ::Track;
   }
   static void *newArray_Track(Long_t nElements, void *p) {
      return p ? new(p) ::Track[nElements] : new ::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_Track(void *p) {
      delete ((::Track*)p);
   }
   static void deleteArray_Track(void *p) {
      delete [] ((::Track*)p);
   }
   static void destruct_Track(void *p) {
      typedef ::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Track

//______________________________________________________________________________
void Tower::Streamer(TBuffer &R__b)
{
   // Stream an object of class Tower.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Tower::Class(),this);
   } else {
      R__b.WriteClassBuffer(Tower::Class(),this);
   }
}

//______________________________________________________________________________
void Tower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Tower.
      TClass *R__cl = ::Tower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ET", &ET);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eta", &Eta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eem", &Eem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ehad", &Ehad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edges[4]", Edges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particles", &Particles);
      R__insp.InspectMember(Particles, "Particles.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Tower(void *p) {
      return  p ? new(p) ::Tower : new ::Tower;
   }
   static void *newArray_Tower(Long_t nElements, void *p) {
      return p ? new(p) ::Tower[nElements] : new ::Tower[nElements];
   }
   // Wrapper around operator delete
   static void delete_Tower(void *p) {
      delete ((::Tower*)p);
   }
   static void deleteArray_Tower(void *p) {
      delete [] ((::Tower*)p);
   }
   static void destruct_Tower(void *p) {
      typedef ::Tower current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Tower

//______________________________________________________________________________
void HectorHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HectorHit.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(HectorHit::Class(),this);
   } else {
      R__b.WriteClassBuffer(HectorHit::Class(),this);
   }
}

//______________________________________________________________________________
void HectorHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HectorHit.
      TClass *R__cl = ::HectorHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "E", &E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tx", &Tx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ty", &Ty);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T", &T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "X", &X);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Y", &Y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "S", &S);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Particle", &Particle);
      R__insp.InspectMember(Particle, "Particle.");
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_HectorHit(void *p) {
      return  p ? new(p) ::HectorHit : new ::HectorHit;
   }
   static void *newArray_HectorHit(Long_t nElements, void *p) {
      return p ? new(p) ::HectorHit[nElements] : new ::HectorHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HectorHit(void *p) {
      delete ((::HectorHit*)p);
   }
   static void deleteArray_HectorHit(void *p) {
      delete [] ((::HectorHit*)p);
   }
   static void destruct_HectorHit(void *p) {
      typedef ::HectorHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HectorHit

//______________________________________________________________________________
void Candidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class Candidate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Candidate::Class(),this);
   } else {
      R__b.WriteClassBuffer(Candidate::Class(),this);
   }
}

//______________________________________________________________________________
void Candidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Candidate.
      TClass *R__cl = ::Candidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PID", &PID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Status", &Status);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M1", &M1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "M2", &M2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D1", &D1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D2", &D2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Charge", &Charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Mass", &Mass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsPU", &IsPU);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsConstituent", &IsConstituent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BTag", &BTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TauTag", &TauTag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eem", &Eem);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ehad", &Ehad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Edges[4]", Edges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaEta", &DeltaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "DeltaPhi", &DeltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Momentum", &Momentum);
      R__insp.InspectMember(Momentum, "Momentum.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Position", &Position);
      R__insp.InspectMember(Position, "Position.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Area", &Area);
      R__insp.InspectMember(Area, "Area.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Dxy", &Dxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "SDxy", &SDxy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Xd", &Xd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Yd", &Yd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zd", &Zd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NCharged", &NCharged);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NNeutrals", &NNeutrals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Beta", &Beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "BetaStar", &BetaStar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MeanSqDeltaR", &MeanSqDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PTD", &PTD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FracPt[5]", FracPt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tau[5]", Tau);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFactory", &fFactory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      SortableObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Candidate(void *p) {
      return  p ? new(p) ::Candidate : new ::Candidate;
   }
   static void *newArray_Candidate(Long_t nElements, void *p) {
      return p ? new(p) ::Candidate[nElements] : new ::Candidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_Candidate(void *p) {
      delete ((::Candidate*)p);
   }
   static void deleteArray_Candidate(void *p) {
      delete [] ((::Candidate*)p);
   }
   static void destruct_Candidate(void *p) {
      typedef ::Candidate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Candidate

/********************************************************
* tmp/classes/ClassesDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableClassesDict();

extern "C" void G__set_cpp_environmentClassesDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__cpp_reset_tagtableClassesDict();
}
#include <new>
extern "C" int G__cpp_dllrevClassesDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* DelphesFactory */
static int G__ClassesDict_440_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DelphesFactory* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DelphesFactory((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) DelphesFactory((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new DelphesFactory[n];
       } else {
         p = new((void*) gvp) DelphesFactory[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new DelphesFactory;
       } else {
         p = new((void*) gvp) DelphesFactory;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DelphesFactory*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesFactory*) G__getstructoffset())->NewPermanentArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesFactory*) G__getstructoffset())->NewArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesFactory*) G__getstructoffset())->NewCandidate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesFactory*) G__getstructoffset())->New((TClass*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DelphesFactory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesFactory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DelphesFactory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DelphesFactory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DelphesFactory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesFactory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DelphesFactory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesFactory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_440_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DelphesFactory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_440_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DelphesFactory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DelphesFactory(*(DelphesFactory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DelphesFactory G__TDelphesFactory;
static int G__ClassesDict_440_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DelphesFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DelphesFactory*) (soff+(sizeof(DelphesFactory)*i)))->~G__TDelphesFactory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DelphesFactory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DelphesFactory*) (soff))->~G__TDelphesFactory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_440_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DelphesFactory* dest = (DelphesFactory*) G__getstructoffset();
   *dest = *(DelphesFactory*) libp->para[0].ref;
   const DelphesFactory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* DelphesModule */
static int G__ClassesDict_441_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DelphesModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DelphesModule[n];
     } else {
       p = new((void*) gvp) DelphesModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new DelphesModule;
     } else {
       p = new((void*) gvp) DelphesModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesModule*) G__getstructoffset())->ImportArray((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesModule*) G__getstructoffset())->ExportArray((const char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesModule*) G__getstructoffset())->NewBranch((const char*) G__int(libp->para[0]), (TClass*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesModule*) G__getstructoffset())->GetPlots());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((DelphesModule*) G__getstructoffset())->GetFactory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) DelphesModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) DelphesModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      DelphesModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((DelphesModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DelphesModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) DelphesModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_441_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) DelphesModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_441_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   DelphesModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new DelphesModule(*(DelphesModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef DelphesModule G__TDelphesModule;
static int G__ClassesDict_441_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (DelphesModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((DelphesModule*) (soff+(sizeof(DelphesModule)*i)))->~G__TDelphesModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (DelphesModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((DelphesModule*) (soff))->~G__TDelphesModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_441_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   DelphesModule* dest = (DelphesModule*) G__getstructoffset();
   *dest = *(DelphesModule*) libp->para[0].ref;
   const DelphesModule& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Candidate */
static int G__ClassesDict_497_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Candidate[n];
     } else {
       p = new((void*) gvp) Candidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Candidate;
     } else {
       p = new((void*) gvp) Candidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->AddCandidate((Candidate*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((Candidate*) G__getstructoffset())->GetCandidates());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const Candidate*) G__getstructoffset())->Overlaps((Candidate*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Candidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Candidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Candidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Candidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Candidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_497_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Candidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_497_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Candidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Candidate(*(Candidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Candidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Candidate G__TCandidate;
static int G__ClassesDict_497_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Candidate*) (soff+(sizeof(Candidate)*i)))->~G__TCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Candidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Candidate*) (soff))->~G__TCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_497_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Candidate* dest = (Candidate*) G__getstructoffset();
   *dest = *(Candidate*) libp->para[0].ref;
   const Candidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SortableObject */
static int G__ClassesDict_515_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const SortableObject*) G__getstructoffset())->GetCompare());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SortableObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SortableObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SortableObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SortableObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SortableObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SortableObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SortableObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SortableObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_515_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SortableObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SortableObject G__TSortableObject;
static int G__ClassesDict_515_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SortableObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SortableObject*) (soff+(sizeof(SortableObject)*i)))->~G__TSortableObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SortableObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SortableObject*) (soff))->~G__TSortableObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_515_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SortableObject* dest = (SortableObject*) G__getstructoffset();
   *dest = *(SortableObject*) libp->para[0].ref;
   const SortableObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Event */
static int G__ClassesDict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Event::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Event::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Event::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Event*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Event::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_558_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Event::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event[n];
     } else {
       p = new((void*) gvp) Event[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Event;
     } else {
       p = new((void*) gvp) Event;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Event* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Event(*(Event*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Event));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Event G__TEvent;
static int G__ClassesDict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Event*) (soff+(sizeof(Event)*i)))->~G__TEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Event*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Event*) (soff))->~G__TEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Event* dest = (Event*) G__getstructoffset();
   *dest = *(Event*) libp->para[0].ref;
   const Event& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHCOEvent */
static int G__ClassesDict_559_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LHCOEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LHCOEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LHCOEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHCOEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCOEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHCOEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_559_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHCOEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_559_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCOEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCOEvent[n];
     } else {
       p = new((void*) gvp) LHCOEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHCOEvent;
     } else {
       p = new((void*) gvp) LHCOEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_559_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHCOEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHCOEvent(*(LHCOEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHCOEvent G__TLHCOEvent;
static int G__ClassesDict_559_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHCOEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHCOEvent*) (soff+(sizeof(LHCOEvent)*i)))->~G__TLHCOEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHCOEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHCOEvent*) (soff))->~G__TLHCOEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_559_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHCOEvent* dest = (LHCOEvent*) G__getstructoffset();
   *dest = *(LHCOEvent*) libp->para[0].ref;
   const LHCOEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LHEFEvent */
static int G__ClassesDict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LHEFEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHEFEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LHEFEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LHEFEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LHEFEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHEFEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHEFEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LHEFEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LHEFEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHEFEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHEFEvent[n];
     } else {
       p = new((void*) gvp) LHEFEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LHEFEvent;
     } else {
       p = new((void*) gvp) LHEFEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LHEFEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LHEFEvent(*(LHEFEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LHEFEvent G__TLHEFEvent;
static int G__ClassesDict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LHEFEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LHEFEvent*) (soff+(sizeof(LHEFEvent)*i)))->~G__TLHEFEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LHEFEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LHEFEvent*) (soff))->~G__TLHEFEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_560_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LHEFEvent* dest = (LHEFEvent*) G__getstructoffset();
   *dest = *(LHEFEvent*) libp->para[0].ref;
   const LHEFEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HepMCEvent */
static int G__ClassesDict_561_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HepMCEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HepMCEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HepMCEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HepMCEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HepMCEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HepMCEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HepMCEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HepMCEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_561_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HepMCEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_561_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMCEvent *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMCEvent[n];
     } else {
       p = new((void*) gvp) HepMCEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HepMCEvent;
     } else {
       p = new((void*) gvp) HepMCEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_561_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HepMCEvent* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HepMCEvent(*(HepMCEvent*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HepMCEvent G__THepMCEvent;
static int G__ClassesDict_561_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HepMCEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HepMCEvent*) (soff+(sizeof(HepMCEvent)*i)))->~G__THepMCEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HepMCEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HepMCEvent*) (soff))->~G__THepMCEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_561_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HepMCEvent* dest = (HepMCEvent*) G__getstructoffset();
   *dest = *(HepMCEvent*) libp->para[0].ref;
   const HepMCEvent& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GenParticle */
static int G__ClassesDict_562_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((GenParticle*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GenParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GenParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GenParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GenParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GenParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GenParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GenParticle *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenParticle[n];
     } else {
       p = new((void*) gvp) GenParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GenParticle;
     } else {
       p = new((void*) gvp) GenParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_GenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GenParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GenParticle(*(GenParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_GenParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GenParticle G__TGenParticle;
static int G__ClassesDict_562_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GenParticle*) (soff+(sizeof(GenParticle)*i)))->~G__TGenParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GenParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GenParticle*) (soff))->~G__TGenParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_562_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GenParticle* dest = (GenParticle*) G__getstructoffset();
   *dest = *(GenParticle*) libp->para[0].ref;
   const GenParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Vertex */
static int G__ClassesDict_563_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Vertex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Vertex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Vertex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Vertex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Vertex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Vertex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Vertex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Vertex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_563_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Vertex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_563_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Vertex *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Vertex[n];
     } else {
       p = new((void*) gvp) Vertex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Vertex;
     } else {
       p = new((void*) gvp) Vertex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Vertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_563_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Vertex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Vertex(*(Vertex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Vertex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Vertex G__TVertex;
static int G__ClassesDict_563_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Vertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Vertex*) (soff+(sizeof(Vertex)*i)))->~G__TVertex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Vertex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Vertex*) (soff))->~G__TVertex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_563_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Vertex* dest = (Vertex*) G__getstructoffset();
   *dest = *(Vertex*) libp->para[0].ref;
   const Vertex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MissingET */
static int G__ClassesDict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((MissingET*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MissingET::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MissingET::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MissingET::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MissingET::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MissingET*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MissingET::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MissingET::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MissingET::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_564_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MissingET::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_564_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MissingET *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MissingET[n];
     } else {
       p = new((void*) gvp) MissingET[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MissingET;
     } else {
       p = new((void*) gvp) MissingET;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_MissingET));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_564_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MissingET* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MissingET(*(MissingET*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_MissingET));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MissingET G__TMissingET;
static int G__ClassesDict_564_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MissingET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MissingET*) (soff+(sizeof(MissingET)*i)))->~G__TMissingET();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MissingET*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MissingET*) (soff))->~G__TMissingET();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_564_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MissingET* dest = (MissingET*) G__getstructoffset();
   *dest = *(MissingET*) libp->para[0].ref;
   const MissingET& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ScalarHT */
static int G__ClassesDict_565_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ScalarHT::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScalarHT::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ScalarHT::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ScalarHT::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ScalarHT*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScalarHT::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ScalarHT::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ScalarHT::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_565_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ScalarHT::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_565_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ScalarHT *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ScalarHT[n];
     } else {
       p = new((void*) gvp) ScalarHT[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ScalarHT;
     } else {
       p = new((void*) gvp) ScalarHT;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_565_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ScalarHT* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ScalarHT(*(ScalarHT*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ScalarHT G__TScalarHT;
static int G__ClassesDict_565_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ScalarHT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ScalarHT*) (soff+(sizeof(ScalarHT)*i)))->~G__TScalarHT();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ScalarHT*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ScalarHT*) (soff))->~G__TScalarHT();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_565_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ScalarHT* dest = (ScalarHT*) G__getstructoffset();
   *dest = *(ScalarHT*) libp->para[0].ref;
   const ScalarHT& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Rho */
static int G__ClassesDict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Rho::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Rho::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Rho::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Rho::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Rho*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Rho::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Rho::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Rho::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_566_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Rho::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Rho *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Rho[n];
     } else {
       p = new((void*) gvp) Rho[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Rho;
     } else {
       p = new((void*) gvp) Rho;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Rho));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Rho* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Rho(*(Rho*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Rho));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Rho G__TRho;
static int G__ClassesDict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Rho*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Rho*) (soff+(sizeof(Rho)*i)))->~G__TRho();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Rho*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Rho*) (soff))->~G__TRho();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Rho* dest = (Rho*) G__getstructoffset();
   *dest = *(Rho*) libp->para[0].ref;
   const Rho& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Weight */
static int G__ClassesDict_567_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Weight::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weight::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Weight::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Weight::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Weight*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weight::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weight::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weight::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_567_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weight::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_567_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Weight *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weight[n];
     } else {
       p = new((void*) gvp) Weight[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weight;
     } else {
       p = new((void*) gvp) Weight;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Weight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_567_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Weight* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Weight(*(Weight*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Weight));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Weight G__TWeight;
static int G__ClassesDict_567_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Weight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Weight*) (soff+(sizeof(Weight)*i)))->~G__TWeight();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Weight*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Weight*) (soff))->~G__TWeight();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_567_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Weight* dest = (Weight*) G__getstructoffset();
   *dest = *(Weight*) libp->para[0].ref;
   const Weight& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Photon */
static int G__ClassesDict_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Photon*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Photon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Photon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Photon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Photon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Photon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Photon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Photon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Photon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Photon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Photon G__TPhoton;
static int G__ClassesDict_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Photon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Photon*) (soff+(sizeof(Photon)*i)))->~G__TPhoton();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Photon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Photon*) (soff))->~G__TPhoton();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Electron */
static int G__ClassesDict_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Electron*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Electron::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Electron::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Electron::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Electron::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Electron*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Electron::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Electron::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Electron::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Electron::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Electron *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Electron[n];
     } else {
       p = new((void*) gvp) Electron[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Electron;
     } else {
       p = new((void*) gvp) Electron;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Electron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Electron* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Electron(*(Electron*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Electron));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Electron G__TElectron;
static int G__ClassesDict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Electron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Electron*) (soff+(sizeof(Electron)*i)))->~G__TElectron();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Electron*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Electron*) (soff))->~G__TElectron();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_569_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Electron* dest = (Electron*) G__getstructoffset();
   *dest = *(Electron*) libp->para[0].ref;
   const Electron& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Muon */
static int G__ClassesDict_570_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Muon*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Muon::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Muon::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Muon::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Muon::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Muon*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Muon::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Muon::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Muon::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Muon::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Muon *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Muon[n];
     } else {
       p = new((void*) gvp) Muon[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Muon;
     } else {
       p = new((void*) gvp) Muon;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Muon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Muon* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Muon(*(Muon*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Muon));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Muon G__TMuon;
static int G__ClassesDict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Muon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Muon*) (soff+(sizeof(Muon)*i)))->~G__TMuon();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Muon*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Muon*) (soff))->~G__TMuon();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Muon* dest = (Muon*) G__getstructoffset();
   *dest = *(Muon*) libp->para[0].ref;
   const Muon& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Jet */
static int G__ClassesDict_571_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Jet*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Jet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Jet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Jet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Jet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Jet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Jet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Jet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Jet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_571_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Jet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Jet G__TJet;
static int G__ClassesDict_571_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Jet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Jet*) (soff+(sizeof(Jet)*i)))->~G__TJet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Jet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Jet*) (soff))->~G__TJet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Track */
static int G__ClassesDict_572_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Track*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Track::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Track::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Track::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Track*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Track::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_572_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Track::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_572_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track[n];
     } else {
       p = new((void*) gvp) Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Track;
     } else {
       p = new((void*) gvp) Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_572_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Track(*(Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_Track));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Track G__TTrack;
static int G__ClassesDict_572_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Track*) (soff+(sizeof(Track)*i)))->~G__TTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Track*) (soff))->~G__TTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_572_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Track* dest = (Track*) G__getstructoffset();
   *dest = *(Track*) libp->para[0].ref;
   const Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Tower */
static int G__ClassesDict_573_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TLorentzVector* pobj;
         TLorentzVector xobj = ((Tower*) G__getstructoffset())->P4();
         pobj = new TLorentzVector(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Tower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Tower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Tower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Tower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Tower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Tower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_573_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Tower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Tower G__TTower;
static int G__ClassesDict_573_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Tower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Tower*) (soff+(sizeof(Tower)*i)))->~G__TTower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Tower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Tower*) (soff))->~G__TTower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HectorHit */
static int G__ClassesDict_574_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HectorHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HectorHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HectorHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HectorHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HectorHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HectorHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HectorHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HectorHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ClassesDict_574_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HectorHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__ClassesDict_574_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HectorHit *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HectorHit[n];
     } else {
       p = new((void*) gvp) HectorHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HectorHit;
     } else {
       p = new((void*) gvp) HectorHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_HectorHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ClassesDict_574_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HectorHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HectorHit(*(HectorHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ClassesDictLN_HectorHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HectorHit G__THectorHit;
static int G__ClassesDict_574_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HectorHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HectorHit*) (soff+(sizeof(HectorHit)*i)))->~G__THectorHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HectorHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HectorHit*) (soff))->~G__THectorHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ClassesDict_574_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HectorHit* dest = (HectorHit*) G__getstructoffset();
   *dest = *(HectorHit*) libp->para[0].ref;
   const HectorHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* DelphesFactory */

/* DelphesModule */

/* Candidate */

/* SortableObject */

/* Event */

/* LHCOEvent */

/* LHEFEvent */

/* HepMCEvent */

/* GenParticle */

/* Vertex */

/* MissingET */

/* ScalarHT */

/* Rho */

/* Weight */

/* Photon */

/* Electron */

/* Muon */

/* Jet */

/* Track */

/* Tower */

/* HectorHit */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncClassesDict {
 public:
  G__Sizep2memfuncClassesDict(): p(&G__Sizep2memfuncClassesDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncClassesDict::*p)();
};

size_t G__get_sizep2memfuncClassesDict()
{
  G__Sizep2memfuncClassesDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceClassesDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory))) {
     DelphesFactory *G__Lderived;
     G__Lderived=(DelphesFactory*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory),G__get_linked_tagnum(&G__ClassesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule))) {
     DelphesModule *G__Lderived;
     G__Lderived=(DelphesModule*)0x1000;
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule),G__get_linked_tagnum(&G__ClassesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule),G__get_linked_tagnum(&G__ClassesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule),G__get_linked_tagnum(&G__ClassesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Candidate))) {
     Candidate *G__Lderived;
     G__Lderived=(Candidate*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Candidate),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Candidate),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_SortableObject))) {
     SortableObject *G__Lderived;
     G__Lderived=(SortableObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Event))) {
     Event *G__Lderived;
     G__Lderived=(Event*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Event),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent))) {
     LHCOEvent *G__Lderived;
     G__Lderived=(LHCOEvent*)0x1000;
     {
       Event *G__Lpbase=(Event*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent),G__get_linked_tagnum(&G__ClassesDictLN_Event),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent))) {
     LHEFEvent *G__Lderived;
     G__Lderived=(LHEFEvent*)0x1000;
     {
       Event *G__Lpbase=(Event*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent),G__get_linked_tagnum(&G__ClassesDictLN_Event),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent))) {
     HepMCEvent *G__Lderived;
     G__Lderived=(HepMCEvent*)0x1000;
     {
       Event *G__Lpbase=(Event*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent),G__get_linked_tagnum(&G__ClassesDictLN_Event),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_GenParticle))) {
     GenParticle *G__Lderived;
     G__Lderived=(GenParticle*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_GenParticle),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_GenParticle),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Vertex))) {
     Vertex *G__Lderived;
     G__Lderived=(Vertex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Vertex),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_MissingET))) {
     MissingET *G__Lderived;
     G__Lderived=(MissingET*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_MissingET),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT))) {
     ScalarHT *G__Lderived;
     G__Lderived=(ScalarHT*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Rho))) {
     Rho *G__Lderived;
     G__Lderived=(Rho*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Rho),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Weight))) {
     Weight *G__Lderived;
     G__Lderived=(Weight*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Weight),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Photon))) {
     Photon *G__Lderived;
     G__Lderived=(Photon*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Photon),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Photon),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Electron))) {
     Electron *G__Lderived;
     G__Lderived=(Electron*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Electron),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Electron),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Muon))) {
     Muon *G__Lderived;
     G__Lderived=(Muon*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Muon),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Muon),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Jet))) {
     Jet *G__Lderived;
     G__Lderived=(Jet*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Jet),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Jet),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Track))) {
     Track *G__Lderived;
     G__Lderived=(Track*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Track),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Track),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_Tower))) {
     Tower *G__Lderived;
     G__Lderived=(Tower*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Tower),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_Tower),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ClassesDictLN_HectorHit))) {
     HectorHit *G__Lderived;
     G__Lderived=(HectorHit*)0x1000;
     {
       SortableObject *G__Lpbase=(SortableObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_HectorHit),G__get_linked_tagnum(&G__ClassesDictLN_SortableObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ClassesDictLN_HectorHit),G__get_linked_tagnum(&G__ClassesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableClassesDict() {

   /* Setting up typedef entry */
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ClassesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ClassesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ClassesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ClassesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__ClassesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__ClassesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<TObject*>",117,G__get_linked_tagnum(&G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("set<TObject*,less<TObject*> >",117,G__get_linked_tagnum(&G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__ClassesDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* DelphesFactory */
static void G__setup_memvarDelphesFactory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory));
   { DelphesFactory *p; p=(DelphesFactory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_ExRootTreeBranch),-1,-1,4,"fObjArrays=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR),G__defined_typename("set<TObject*>"),-1,4,"fPool=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* DelphesModule */
static void G__setup_memvarDelphesModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule));
   { DelphesModule *p; p=(DelphesModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_ExRootTreeWriter),-1,-1,2,"fTreeWriter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory),-1,-1,2,"fFactory=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_ExRootResult),-1,-1,4,"fPlots=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TFolder),-1,-1,4,"fPlotFolder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TFolder),-1,-1,4,"fExportFolder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Candidate */
static void G__setup_memvarCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Candidate));
   { Candidate *p; p=(Candidate*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"PID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Status=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->M1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"M1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->M2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"M2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"D1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->D2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"D2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Mass=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsPU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IsPU=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsConstituent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IsConstituent=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BTag)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"BTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->TauTag)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"TauTag=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Eem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eem=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Ehad)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ehad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Edges)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Edges[4]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"DeltaEta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->DeltaPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"DeltaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Momentum)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector),-1,-1,1,"Momentum=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Position)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector),-1,-1,1,"Position=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Area)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector),-1,-1,1,"Area=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Dxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Dxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->SDxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"SDxy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Xd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Xd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Yd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Yd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Zd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Zd=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NCharged)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NCharged=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->NNeutrals)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NNeutrals=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Beta=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->BetaStar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BetaStar=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->MeanSqDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MeanSqDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->PTD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PTD=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FracPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FracPt[5]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Tau)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau[5]=",0,(char*)NULL);
   G__memvar_setup((void*)(&Candidate::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory),-1,-1,4,"fFactory=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TObjArray),-1,-1,4,"fArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SortableObject */
static void G__setup_memvarSortableObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_SortableObject));
   { SortableObject *p; p=(SortableObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Event */
static void G__setup_memvarEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Event));
   { Event *p; p=(Event*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Number)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"Number=",0,"event number");
   G__memvar_setup((void*)((long)(&p->ReadTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ReadTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ProcTime)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ProcTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHCOEvent */
static void G__setup_memvarLHCOEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent));
   { LHCOEvent *p; p=(LHCOEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Trigger)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Trigger=",0,"trigger word");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LHEFEvent */
static void G__setup_memvarLHEFEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent));
   { LHEFEvent *p; p=(LHEFEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ProcessID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ProcessID=",0,"subprocess code for the event | hepup.IDPRUP");
   G__memvar_setup((void*)((long)(&p->Weight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Weight=",0,"weight for the event | hepup.XWGTUP");
   G__memvar_setup((void*)((long)(&p->ScalePDF)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ScalePDF=",0,"scale in GeV used in the calculation of the PDFs in the event | hepup.SCALUP");
   G__memvar_setup((void*)((long)(&p->AlphaQED)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"AlphaQED=",0,"value of the QED coupling used in the event | hepup.AQEDUP");
   G__memvar_setup((void*)((long)(&p->AlphaQCD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"AlphaQCD=",0,"value of the QCD coupling used in the event | hepup.AQCDUP");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HepMCEvent */
static void G__setup_memvarHepMCEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent));
   { HepMCEvent *p; p=(HepMCEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ProcessID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ProcessID=",0,"unique signal process id | signal_process_id()");
   G__memvar_setup((void*)((long)(&p->MPI)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"MPI=",0,"number of multi parton interactions | mpi ()");
   G__memvar_setup((void*)((long)(&p->Weight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Weight=",0,"weight for the event");
   G__memvar_setup((void*)((long)(&p->Scale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Scale=",0,"energy scale, see hep-ph/0109068 | event_scale()");
   G__memvar_setup((void*)((long)(&p->AlphaQED)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"AlphaQED=",0,"QED coupling, see hep-ph/0109068 | alphaQED()");
   G__memvar_setup((void*)((long)(&p->AlphaQCD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"AlphaQCD=",0,"QCD coupling, see hep-ph/0109068 | alphaQCD()");
   G__memvar_setup((void*)((long)(&p->ID1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ID1=",0,"flavour code of first parton | pdf_info()->id1()");
   G__memvar_setup((void*)((long)(&p->ID2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"ID2=",0,"flavour code of second parton | pdf_info()->id2()");
   G__memvar_setup((void*)((long)(&p->X1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X1=",0,"fraction of beam momentum carried by first parton (\"beam side\") | pdf_info()->x1()");
   G__memvar_setup((void*)((long)(&p->X2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X2=",0,"fraction of beam momentum carried by second parton (\"target side\") | pdf_info()->x2()");
   G__memvar_setup((void*)((long)(&p->ScalePDF)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ScalePDF=",0,"Q-scale used in evaluation of PDF's (in GeV) | pdf_info()->scalePDF()");
   G__memvar_setup((void*)((long)(&p->PDF1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PDF1=",0,"PDF (id1, x1, Q) | pdf_info()->pdf1()");
   G__memvar_setup((void*)((long)(&p->PDF2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PDF2=",0,"PDF (id2, x2, Q) | pdf_info()->pdf2()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GenParticle */
static void G__setup_memvarGenParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_GenParticle));
   { GenParticle *p; p=(GenParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"PID=",0,"particle HEP ID number | hepevt.idhep[number]");
   G__memvar_setup((void*)((long)(&p->Status)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Status=",0,"particle status | hepevt.isthep[number]");
   G__memvar_setup((void*)((long)(&p->IsPU)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IsPU=",0,"0 or 1 for particles from pile-up interactions");
   G__memvar_setup((void*)((long)(&p->M1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"M1=",0,"particle 1st mother | hepevt.jmohep[number][0] - 1");
   G__memvar_setup((void*)((long)(&p->M2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"M2=",0,"particle 2nd mother | hepevt.jmohep[number][1] - 1");
   G__memvar_setup((void*)((long)(&p->D1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"D1=",0,"particle 1st daughter | hepevt.jdahep[number][0] - 1");
   G__memvar_setup((void*)((long)(&p->D2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"D2=",0,"particle last daughter | hepevt.jdahep[number][1] - 1");
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,"particle charge");
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Mass=",0,"particle mass");
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E=",0,"particle energy | hepevt.phep[number][3]");
   G__memvar_setup((void*)((long)(&p->Px)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Px=",0,"particle momentum vector (x component) | hepevt.phep[number][0]");
   G__memvar_setup((void*)((long)(&p->Py)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Py=",0,"particle momentum vector (y component) | hepevt.phep[number][1]");
   G__memvar_setup((void*)((long)(&p->Pz)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Pz=",0,"particle momentum vector (z component) | hepevt.phep[number][2]");
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"particle transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"particle pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"particle azimuthal angle");
   G__memvar_setup((void*)((long)(&p->Rapidity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Rapidity=",0,"particle rapidity");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle vertex position (t component) | hepevt.vhep[number][3]");
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X=",0,"particle vertex position (x component) | hepevt.vhep[number][0]");
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y=",0,"particle vertex position (y component) | hepevt.vhep[number][1]");
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z=",0,"particle vertex position (z component) | hepevt.vhep[number][2]");
   G__memvar_setup((void*)(&GenParticle::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Vertex */
static void G__setup_memvarVertex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Vertex));
   { Vertex *p; p=(Vertex*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"vertex position (t component)");
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X=",0,"vertex position (x component)");
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y=",0,"vertex position (y component)");
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z=",0,"vertex position (z component)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MissingET */
static void G__setup_memvarMissingET(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_MissingET));
   { MissingET *p; p=(MissingET*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->MET)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MET=",0,"mising transverse energy");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"mising energy pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"mising energy azimuthal angle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ScalarHT */
static void G__setup_memvarScalarHT(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT));
   { ScalarHT *p; p=(ScalarHT*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->HT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"HT=",0,"scalar sum of transverse momenta");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Rho */
static void G__setup_memvarRho(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Rho));
   { Rho *p; p=(Rho*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Rho)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Rho=",0,"rho energy density");
   G__memvar_setup((void*)((long)(&p->Edges)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Edges[2]=",0,"pseudorapidity range edges");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Weight */
static void G__setup_memvarWeight(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Weight));
   { Weight *p; p=(Weight*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->Weight)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Weight=",0,"weight for the event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Photon */
static void G__setup_memvarPhoton(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Photon));
   { Photon *p; p=(Photon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"photon transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"photon pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"photon azimuthal angle");
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E=",0,"photon energy");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle arrival time of flight");
   G__memvar_setup((void*)((long)(&p->EhadOverEem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"EhadOverEem=",0,"ratio of the hadronic versus electromagnetic energy deposited in the calorimeter");
   G__memvar_setup((void*)((long)(&p->Particles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRefArray),-1,-1,1,"Particles=",0,"references to generated particles");
   G__memvar_setup((void*)(&Photon::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Electron */
static void G__setup_memvarElectron(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Electron));
   { Electron *p; p=(Electron*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"electron transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"electron pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"electron azimuthal angle");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle arrival time of flight");
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,"electron charge");
   G__memvar_setup((void*)((long)(&p->EhadOverEem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"EhadOverEem=",0,"ratio of the hadronic versus electromagnetic energy deposited in the calorimeter");
   G__memvar_setup((void*)((long)(&p->Particle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRef),-1,-1,1,"Particle=",0,"reference to generated particle");
   G__memvar_setup((void*)(&Electron::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Muon */
static void G__setup_memvarMuon(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Muon));
   { Muon *p; p=(Muon*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"muon transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"muon pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"muon azimuthal angle");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle arrival time of flight");
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,"muon charge");
   G__memvar_setup((void*)((long)(&p->Particle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRef),-1,-1,1,"Particle=",0,"reference to generated particle");
   G__memvar_setup((void*)(&Muon::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Jet */
static void G__setup_memvarJet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Jet));
   { Jet *p; p=(Jet*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"jet transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"jet pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"jet azimuthal angle");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle arrival time of flight");
   G__memvar_setup((void*)((long)(&p->Mass)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Mass=",0,"jet invariant mass");
   G__memvar_setup((void*)((long)(&p->DeltaEta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"DeltaEta=",0,"jet radius in pseudorapidity");
   G__memvar_setup((void*)((long)(&p->DeltaPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"DeltaPhi=",0,"jet radius in azimuthal angle");
   G__memvar_setup((void*)((long)(&p->BTag)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"BTag=",0,"0 or 1 for a jet that has been tagged as containing a heavy quark");
   G__memvar_setup((void*)((long)(&p->TauTag)-(long)(p)),104,0,0,-1,G__defined_typename("UInt_t"),-1,1,"TauTag=",0,"0 or 1 for a jet that has been tagged as a tau");
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,"tau charge");
   G__memvar_setup((void*)((long)(&p->EhadOverEem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"EhadOverEem=",0,"ratio of the hadronic versus electromagnetic energy deposited in the calorimeter");
   G__memvar_setup((void*)((long)(&p->NCharged)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NCharged=",0,"number of charged constituents ");
   G__memvar_setup((void*)((long)(&p->NNeutrals)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"NNeutrals=",0,"number of neutral constituents ");
   G__memvar_setup((void*)((long)(&p->Beta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Beta=",0,"(sum pt of charged pile-up constituents)/(sum pt of charged constituents) ");
   G__memvar_setup((void*)((long)(&p->BetaStar)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"BetaStar=",0,"(sum pt of charged constituents coming from hard interaction)/(sum pt of charged constituents) ");
   G__memvar_setup((void*)((long)(&p->MeanSqDeltaR)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"MeanSqDeltaR=",0,"average distance (squared) between constituent and jet weighted by pt (squared) of constituent");
   G__memvar_setup((void*)((long)(&p->PTD)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PTD=",0,"average pt between constituent and jet weighted by pt of constituent");
   G__memvar_setup((void*)((long)(&p->FracPt)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"FracPt[5]=",0,"(sum pt of constituents within a ring 0.1*i < DeltaR < 0.1*(i+1))/(sum pt of constituents) ");
   G__memvar_setup((void*)((long)(&p->Tau1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau1=",0,"1-subjettiness");
   G__memvar_setup((void*)((long)(&p->Tau2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau2=",0,"2-subjettiness");
   G__memvar_setup((void*)((long)(&p->Tau3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau3=",0,"3-subjettiness");
   G__memvar_setup((void*)((long)(&p->Tau4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau4=",0,"4-subjettiness");
   G__memvar_setup((void*)((long)(&p->Tau5)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tau5=",0,"5-subjettiness");
   G__memvar_setup((void*)((long)(&p->Constituents)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRefArray),-1,-1,1,"Constituents=",0,"references to constituents");
   G__memvar_setup((void*)((long)(&p->Particles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRefArray),-1,-1,1,"Particles=",0,"references to generated particles");
   G__memvar_setup((void*)(&Jet::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Track */
static void G__setup_memvarTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Track));
   { Track *p; p=(Track*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->PID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"PID=",0,"HEP ID number");
   G__memvar_setup((void*)((long)(&p->Charge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Charge=",0,"track charge");
   G__memvar_setup((void*)((long)(&p->PT)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PT=",0,"track transverse momentum");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"track pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"track azimuthal angle");
   G__memvar_setup((void*)((long)(&p->EtaOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"EtaOuter=",0,"track pseudorapidity at the tracker edge");
   G__memvar_setup((void*)((long)(&p->PhiOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"PhiOuter=",0,"track azimuthal angle at the tracker edge");
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X=",0,"track vertex position (x component)");
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y=",0,"track vertex position (y component)");
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Z=",0,"track vertex position (z component)");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"track vertex position (z component)");
   G__memvar_setup((void*)((long)(&p->XOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"XOuter=",0,"track position (x component) at the tracker edge");
   G__memvar_setup((void*)((long)(&p->YOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"YOuter=",0,"track position (y component) at the tracker edge");
   G__memvar_setup((void*)((long)(&p->ZOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ZOuter=",0,"track position (z component) at the tracker edge");
   G__memvar_setup((void*)((long)(&p->TOuter)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"TOuter=",0,"track position (z component) at the tracker edge");
   G__memvar_setup((void*)((long)(&p->Dxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Dxy=",0,"track signed transverse impact parameter");
   G__memvar_setup((void*)((long)(&p->SDxy)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"SDxy=",0,"signed error on the track signed transverse impact parameter");
   G__memvar_setup((void*)((long)(&p->Xd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Xd=",0,"X coordinate of point of closest approach to vertex");
   G__memvar_setup((void*)((long)(&p->Yd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Yd=",0,"Y coordinate of point of closest approach to vertex");
   G__memvar_setup((void*)((long)(&p->Zd)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Zd=",0,"Z coordinate of point of closest approach to vertex");
   G__memvar_setup((void*)((long)(&p->Particle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRef),-1,-1,1,"Particle=",0,"reference to generated particle");
   G__memvar_setup((void*)(&Track::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Tower */
static void G__setup_memvarTower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_Tower));
   { Tower *p; p=(Tower*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ET)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"ET=",0,"calorimeter tower transverse energy");
   G__memvar_setup((void*)((long)(&p->Eta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eta=",0,"calorimeter tower pseudorapidity");
   G__memvar_setup((void*)((long)(&p->Phi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Phi=",0,"calorimeter tower azimuthal angle");
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E=",0,"calorimeter tower energy");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"particle arrival time of flight");
   G__memvar_setup((void*)((long)(&p->Eem)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Eem=",0,"calorimeter tower electromagnetic energy");
   G__memvar_setup((void*)((long)(&p->Ehad)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ehad=",0,"calorimeter tower hadronic energy");
   G__memvar_setup((void*)((long)(&p->Edges)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Edges[4]=",0,"calorimeter tower edges");
   G__memvar_setup((void*)((long)(&p->Particles)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRefArray),-1,-1,1,"Particles=",0,"references to generated particles");
   G__memvar_setup((void*)(&Tower::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HectorHit */
static void G__setup_memvarHectorHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ClassesDictLN_HectorHit));
   { HectorHit *p; p=(HectorHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->E)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"E=",0,"reconstructed energy [GeV]");
   G__memvar_setup((void*)((long)(&p->Tx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Tx=",0,"angle of the momentum in the horizontal (x,z) plane [urad]");
   G__memvar_setup((void*)((long)(&p->Ty)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Ty=",0,"angle of the momentum in the verical (y,z) plane [urad]");
   G__memvar_setup((void*)((long)(&p->T)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"T=",0,"time of flight to the detector [s]");
   G__memvar_setup((void*)((long)(&p->X)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"X=",0,"horizontal distance to the beam [um]");
   G__memvar_setup((void*)((long)(&p->Y)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"Y=",0,"vertical distance to the beam [um]");
   G__memvar_setup((void*)((long)(&p->S)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"S=",0,"distance to the interaction point [m]");
   G__memvar_setup((void*)((long)(&p->Particle)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TRef),-1,-1,1,"Particle=",0,"reference to generated particle");
   G__memvar_setup((void*)(&HectorHit::fgCompare),85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_CompBase),-1,-2,1,"fgCompare=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ClassesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarClassesDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDelphesFactory(void) {
   /* DelphesFactory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory));
   G__memfunc_setup("DelphesFactory",1437,G__ClassesDict_440_0_1, 105, G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory), -1, 0, 1, 1, 1, 0, "C - - 10 '\"ObjectFactory\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__ClassesDict_440_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewPermanentArray",1747,G__ClassesDict_440_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewArray",809,G__ClassesDict_440_0_4, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewCandidate",1191,G__ClassesDict_440_0_5, 85, G__get_linked_tagnum(&G__ClassesDictLN_Candidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("New",298,G__ClassesDict_440_0_6, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObject), -1, 0, 1, 1, 1, 0, "U 'TClass' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_440_0_7, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DelphesFactory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_440_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesFactory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_440_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DelphesFactory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_440_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DelphesFactory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_440_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_440_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesFactory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_440_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DelphesFactory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_440_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesFactory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_440_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DelphesFactory::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DelphesFactory", 1437, G__ClassesDict_440_0_19, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory), -1, 0, 1, 1, 1, 0, "u 'DelphesFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DelphesFactory", 1563, G__ClassesDict_440_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_440_0_21, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory), -1, 1, 1, 1, 1, 0, "u 'DelphesFactory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncDelphesModule(void) {
   /* DelphesModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule));
   G__memfunc_setup("DelphesModule",1323,G__ClassesDict_441_0_1, 105, G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ImportArray",1146,G__ClassesDict_441_0_5, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObjArray), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExportArray",1153,G__ClassesDict_441_0_6, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObjArray), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NewBranch",888,G__ClassesDict_441_0_7, 85, G__get_linked_tagnum(&G__ClassesDictLN_ExRootTreeBranch), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name U 'TClass' - 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPlots",818,G__ClassesDict_441_0_8, 85, G__get_linked_tagnum(&G__ClassesDictLN_ExRootResult), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFactory",1016,G__ClassesDict_441_0_9, 85, G__get_linked_tagnum(&G__ClassesDictLN_DelphesFactory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_441_0_10, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&DelphesModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_441_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_441_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&DelphesModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_441_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&DelphesModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_441_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_441_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_441_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DelphesModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_441_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&DelphesModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_441_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&DelphesModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("DelphesModule", 1323, G__ClassesDict_441_0_22, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule), -1, 0, 1, 1, 1, 0, "u 'DelphesModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DelphesModule", 1449, G__ClassesDict_441_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_441_0_24, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_DelphesModule), -1, 1, 1, 1, 1, 0, "u 'DelphesModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCandidate(void) {
   /* Candidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Candidate));
   G__memfunc_setup("Candidate",893,G__ClassesDict_497_0_1, 105, G__get_linked_tagnum(&G__ClassesDictLN_Candidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCandidate",1158,G__ClassesDict_497_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'Candidate' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCandidates",1296,G__ClassesDict_497_0_4, 85, G__get_linked_tagnum(&G__ClassesDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Overlaps",844,G__ClassesDict_497_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'Candidate' - 10 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - object", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clone",497,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TObject), -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' newname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFactory",1028,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'DelphesFactory' - 0 - factory", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_497_0_10, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Candidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_497_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_497_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Candidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_497_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Candidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_497_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_497_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_497_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_497_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Candidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_497_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Candidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Candidate", 893, G__ClassesDict_497_0_22, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Candidate), -1, 0, 1, 1, 1, 0, "u 'Candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Candidate", 1019, G__ClassesDict_497_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_497_0_24, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Candidate), -1, 1, 1, 1, 1, 0, "u 'Candidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSortableObject(void) {
   /* SortableObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_SortableObject));
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCompare",999,G__ClassesDict_515_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__ClassesDict_515_0_4, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SortableObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_515_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SortableObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_515_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SortableObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_515_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SortableObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_515_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_515_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SortableObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_515_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SortableObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_515_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SortableObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_515_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SortableObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~SortableObject", 1553, G__ClassesDict_515_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_515_0_17, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_SortableObject), -1, 1, 1, 1, 1, 0, "u 'SortableObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEvent(void) {
   /* Event */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Event));
   G__memfunc_setup("Class",502,G__ClassesDict_558_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Event::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_558_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_558_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Event::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_558_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Event::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_558_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_558_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_558_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_558_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Event::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_558_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Event::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Event", 514, G__ClassesDict_558_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Event), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Event", 514, G__ClassesDict_558_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Event), -1, 0, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Event", 640, G__ClassesDict_558_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_558_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Event), -1, 1, 1, 1, 1, 0, "u 'Event' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHCOEvent(void) {
   /* LHCOEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent));
   G__memfunc_setup("Class",502,G__ClassesDict_559_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LHCOEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_559_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHCOEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_559_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LHCOEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_559_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LHCOEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_559_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_559_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHCOEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_559_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCOEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_559_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHCOEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_559_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHCOEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("LHCOEvent", 808, G__ClassesDict_559_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHCOEvent", 808, G__ClassesDict_559_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent), -1, 0, 1, 1, 1, 0, "u 'LHCOEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHCOEvent", 934, G__ClassesDict_559_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_559_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_LHCOEvent), -1, 1, 1, 1, 1, 0, "u 'LHCOEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLHEFEvent(void) {
   /* LHEFEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent));
   G__memfunc_setup("Class",502,G__ClassesDict_560_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LHEFEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_560_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHEFEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_560_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LHEFEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_560_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LHEFEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_560_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_560_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHEFEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_560_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHEFEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_560_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LHEFEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_560_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LHEFEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("LHEFEvent", 801, G__ClassesDict_560_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("LHEFEvent", 801, G__ClassesDict_560_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent), -1, 0, 1, 1, 1, 0, "u 'LHEFEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LHEFEvent", 927, G__ClassesDict_560_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_560_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_LHEFEvent), -1, 1, 1, 1, 1, 0, "u 'LHEFEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHepMCEvent(void) {
   /* HepMCEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent));
   G__memfunc_setup("Class",502,G__ClassesDict_561_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HepMCEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_561_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HepMCEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_561_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HepMCEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_561_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HepMCEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_561_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_561_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HepMCEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_561_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HepMCEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_561_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HepMCEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_561_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HepMCEvent::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HepMCEvent", 943, G__ClassesDict_561_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HepMCEvent", 943, G__ClassesDict_561_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent), -1, 0, 1, 1, 1, 0, "u 'HepMCEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HepMCEvent", 1069, G__ClassesDict_561_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_561_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_HepMCEvent), -1, 1, 1, 1, 1, 0, "u 'HepMCEvent' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGenParticle(void) {
   /* GenParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_GenParticle));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_562_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_562_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GenParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_562_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_562_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GenParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_562_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GenParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_562_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_562_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_562_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_562_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GenParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_562_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GenParticle::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("GenParticle", 1102, G__ClassesDict_562_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_GenParticle), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("GenParticle", 1102, G__ClassesDict_562_0_16, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_GenParticle), -1, 0, 1, 1, 1, 0, "u 'GenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GenParticle", 1228, G__ClassesDict_562_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_562_0_18, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_GenParticle), -1, 1, 1, 1, 1, 0, "u 'GenParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncVertex(void) {
   /* Vertex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Vertex));
   G__memfunc_setup("Class",502,G__ClassesDict_563_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Vertex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_563_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Vertex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_563_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Vertex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_563_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Vertex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_563_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_563_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Vertex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_563_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Vertex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_563_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Vertex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_563_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Vertex::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Vertex", 638, G__ClassesDict_563_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Vertex), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Vertex", 638, G__ClassesDict_563_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Vertex), -1, 0, 1, 1, 1, 0, "u 'Vertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Vertex", 764, G__ClassesDict_563_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_563_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Vertex), -1, 1, 1, 1, 1, 0, "u 'Vertex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMissingET(void) {
   /* MissingET */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_MissingET));
   G__memfunc_setup("P4",132,G__ClassesDict_564_0_1, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_564_0_2, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MissingET::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_564_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MissingET::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_564_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MissingET::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_564_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MissingET::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_564_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_564_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MissingET::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_564_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MissingET::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_564_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MissingET::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_564_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MissingET::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("MissingET", 883, G__ClassesDict_564_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_MissingET), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MissingET", 883, G__ClassesDict_564_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_MissingET), -1, 0, 1, 1, 1, 0, "u 'MissingET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MissingET", 1009, G__ClassesDict_564_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_564_0_17, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_MissingET), -1, 1, 1, 1, 1, 0, "u 'MissingET' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncScalarHT(void) {
   /* ScalarHT */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT));
   G__memfunc_setup("Class",502,G__ClassesDict_565_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ScalarHT::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_565_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ScalarHT::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_565_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ScalarHT::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_565_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ScalarHT::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_565_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_565_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ScalarHT::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_565_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ScalarHT::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_565_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ScalarHT::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_565_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ScalarHT::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("ScalarHT", 754, G__ClassesDict_565_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ScalarHT", 754, G__ClassesDict_565_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT), -1, 0, 1, 1, 1, 0, "u 'ScalarHT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ScalarHT", 880, G__ClassesDict_565_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_565_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_ScalarHT), -1, 1, 1, 1, 1, 0, "u 'ScalarHT' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncRho(void) {
   /* Rho */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Rho));
   G__memfunc_setup("Class",502,G__ClassesDict_566_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Rho::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_566_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Rho::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_566_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Rho::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_566_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Rho::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_566_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_566_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Rho::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_566_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Rho::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_566_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Rho::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_566_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Rho::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Rho", 297, G__ClassesDict_566_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Rho), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Rho", 297, G__ClassesDict_566_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Rho), -1, 0, 1, 1, 1, 0, "u 'Rho' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Rho", 423, G__ClassesDict_566_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_566_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Rho), -1, 1, 1, 1, 1, 0, "u 'Rho' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWeight(void) {
   /* Weight */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Weight));
   G__memfunc_setup("Class",502,G__ClassesDict_567_0_1, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Weight::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_567_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weight::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_567_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Weight::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_567_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Weight::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_567_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_567_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weight::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_567_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weight::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_567_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weight::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_567_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weight::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Weight", 616, G__ClassesDict_567_0_13, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Weight), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Weight", 616, G__ClassesDict_567_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Weight), -1, 0, 1, 1, 1, 0, "u 'Weight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Weight", 742, G__ClassesDict_567_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_567_0_16, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Weight), -1, 1, 1, 1, 1, 0, "u 'Weight' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPhoton(void) {
   /* Photon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Photon));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_568_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_568_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Photon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_568_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Photon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_568_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Photon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_568_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Photon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_568_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_568_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Photon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_568_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Photon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_568_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Photon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_568_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Photon::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Photon", 758, G__ClassesDict_568_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncElectron(void) {
   /* Electron */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Electron));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_569_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_569_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Electron::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_569_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Electron::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_569_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Electron::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_569_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Electron::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_569_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_569_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Electron::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_569_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Electron::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_569_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Electron::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_569_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Electron::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Electron", 828, G__ClassesDict_569_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Electron), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Electron", 828, G__ClassesDict_569_0_16, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Electron), -1, 0, 1, 1, 1, 0, "u 'Electron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Electron", 954, G__ClassesDict_569_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_569_0_18, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Electron), -1, 1, 1, 1, 1, 0, "u 'Electron' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMuon(void) {
   /* Muon */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Muon));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_570_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_570_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Muon::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_570_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Muon::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_570_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Muon::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_570_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Muon::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_570_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_570_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Muon::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_570_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Muon::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_570_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Muon::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_570_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Muon::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Muon", 415, G__ClassesDict_570_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Muon), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Muon", 415, G__ClassesDict_570_0_16, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Muon), -1, 0, 1, 1, 1, 0, "u 'Muon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Muon", 541, G__ClassesDict_570_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_570_0_18, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Muon), -1, 1, 1, 1, 1, 0, "u 'Muon' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJet(void) {
   /* Jet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Jet));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_571_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_571_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Jet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_571_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Jet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_571_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Jet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_571_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Jet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_571_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_571_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Jet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_571_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Jet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_571_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Jet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_571_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Jet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Jet", 417, G__ClassesDict_571_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrack(void) {
   /* Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Track));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_572_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_572_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Track::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_572_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_572_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Track::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_572_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Track::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_572_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_572_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_572_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_572_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Track::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_572_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Track::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("Track", 501, G__ClassesDict_572_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Track), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__ClassesDict_572_0_16, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_Track), -1, 0, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__ClassesDict_572_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_572_0_18, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_Track), -1, 1, 1, 1, 1, 0, "u 'Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTower(void) {
   /* Tower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_Tower));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("P4",132,G__ClassesDict_573_0_2, 117, G__get_linked_tagnum(&G__ClassesDictLN_TLorentzVector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ClassesDict_573_0_3, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Tower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_573_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_573_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Tower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_573_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Tower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_573_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_573_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_573_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Tower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_573_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Tower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_573_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Tower::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~Tower", 655, G__ClassesDict_573_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHectorHit(void) {
   /* HectorHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ClassesDictLN_HectorHit));
   G__memfunc_setup("GetCompare",999,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_CompBase), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ClassesDict_574_0_2, 85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HectorHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ClassesDict_574_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HectorHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ClassesDict_574_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HectorHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ClassesDict_574_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HectorHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ClassesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ClassesDict_574_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ClassesDict_574_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HectorHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ClassesDict_574_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HectorHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ClassesDict_574_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HectorHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ClassesDict_574_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HectorHit::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HectorHit", 906, G__ClassesDict_574_0_14, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_HectorHit), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HectorHit", 906, G__ClassesDict_574_0_15, (int) ('i'), G__get_linked_tagnum(&G__ClassesDictLN_HectorHit), -1, 0, 1, 1, 1, 0, "u 'HectorHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HectorHit", 1032, G__ClassesDict_574_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ClassesDict_574_0_17, (int) ('u'), G__get_linked_tagnum(&G__ClassesDictLN_HectorHit), -1, 1, 1, 1, 1, 0, "u 'HectorHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncClassesDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalClassesDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcClassesDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ClassesDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ClassesDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TFolder = { "TFolder" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_ExRootTask = { "ExRootTask" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_ExRootResult = { "ExRootResult" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_ExRootTreeBranch = { "ExRootTreeBranch" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_ExRootTreeWriter = { "ExRootTreeWriter" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_DelphesFactory = { "DelphesFactory" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_DelphesModule = { "DelphesModule" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Candidate = { "Candidate" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR = { "set<TObject*,less<TObject*>,allocator<TObject*> >" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TRef = { "TRef" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_CompBase = { "CompBase" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_SortableObject = { "SortableObject" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Event = { "Event" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_LHCOEvent = { "LHCOEvent" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_LHEFEvent = { "LHEFEvent" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_HepMCEvent = { "HepMCEvent" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_GenParticle = { "GenParticle" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Vertex = { "Vertex" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_MissingET = { "MissingET" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_ScalarHT = { "ScalarHT" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Rho = { "Rho" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Weight = { "Weight" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Photon = { "Photon" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Electron = { "Electron" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Muon = { "Muon" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Jet = { "Jet" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Track = { "Track" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_Tower = { "Tower" , 99 , -1 };
G__linked_taginfo G__ClassesDictLN_HectorHit = { "HectorHit" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableClassesDict() {
  G__ClassesDictLN_TClass.tagnum = -1 ;
  G__ClassesDictLN_TBuffer.tagnum = -1 ;
  G__ClassesDictLN_TMemberInspector.tagnum = -1 ;
  G__ClassesDictLN_TObject.tagnum = -1 ;
  G__ClassesDictLN_TNamed.tagnum = -1 ;
  G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ClassesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ClassesDictLN_TObjArray.tagnum = -1 ;
  G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ClassesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ClassesDictLN_TTask.tagnum = -1 ;
  G__ClassesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__ClassesDictLN_TFolder.tagnum = -1 ;
  G__ClassesDictLN_ExRootTask.tagnum = -1 ;
  G__ClassesDictLN_ExRootResult.tagnum = -1 ;
  G__ClassesDictLN_ExRootTreeBranch.tagnum = -1 ;
  G__ClassesDictLN_ExRootTreeWriter.tagnum = -1 ;
  G__ClassesDictLN_DelphesFactory.tagnum = -1 ;
  G__ClassesDictLN_DelphesModule.tagnum = -1 ;
  G__ClassesDictLN_Candidate.tagnum = -1 ;
  G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR.tagnum = -1 ;
  G__ClassesDictLN_TRef.tagnum = -1 ;
  G__ClassesDictLN_TRefArray.tagnum = -1 ;
  G__ClassesDictLN_CompBase.tagnum = -1 ;
  G__ClassesDictLN_SortableObject.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ClassesDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ClassesDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__ClassesDictLN_TLorentzVector.tagnum = -1 ;
  G__ClassesDictLN_Event.tagnum = -1 ;
  G__ClassesDictLN_LHCOEvent.tagnum = -1 ;
  G__ClassesDictLN_LHEFEvent.tagnum = -1 ;
  G__ClassesDictLN_HepMCEvent.tagnum = -1 ;
  G__ClassesDictLN_GenParticle.tagnum = -1 ;
  G__ClassesDictLN_Vertex.tagnum = -1 ;
  G__ClassesDictLN_MissingET.tagnum = -1 ;
  G__ClassesDictLN_ScalarHT.tagnum = -1 ;
  G__ClassesDictLN_Rho.tagnum = -1 ;
  G__ClassesDictLN_Weight.tagnum = -1 ;
  G__ClassesDictLN_Photon.tagnum = -1 ;
  G__ClassesDictLN_Electron.tagnum = -1 ;
  G__ClassesDictLN_Muon.tagnum = -1 ;
  G__ClassesDictLN_Jet.tagnum = -1 ;
  G__ClassesDictLN_Track.tagnum = -1 ;
  G__ClassesDictLN_Tower.tagnum = -1 ;
  G__ClassesDictLN_HectorHit.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableClassesDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TFolder);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_ExRootTask);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_ExRootResult);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_ExRootTreeBranch);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_ExRootTreeWriter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_DelphesFactory),sizeof(DelphesFactory),-1,324864,(char*)NULL,G__setup_memvarDelphesFactory,G__setup_memfuncDelphesFactory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_DelphesModule),sizeof(DelphesModule),-1,324864,(char*)NULL,G__setup_memvarDelphesModule,G__setup_memfuncDelphesModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Candidate),sizeof(Candidate),-1,291072,(char*)NULL,G__setup_memvarCandidate,G__setup_memfuncCandidate);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_setlETObjectmUcOlesslETObjectmUgRcOallocatorlETObjectmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TRef);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TRefArray);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_CompBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_SortableObject),sizeof(SortableObject),-1,290817,(char*)NULL,G__setup_memvarSortableObject,G__setup_memfuncSortableObject);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__ClassesDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Event),sizeof(Event),-1,290816,(char*)NULL,G__setup_memvarEvent,G__setup_memfuncEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_LHCOEvent),sizeof(LHCOEvent),-1,290816,(char*)NULL,G__setup_memvarLHCOEvent,G__setup_memfuncLHCOEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_LHEFEvent),sizeof(LHEFEvent),-1,290816,(char*)NULL,G__setup_memvarLHEFEvent,G__setup_memfuncLHEFEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_HepMCEvent),sizeof(HepMCEvent),-1,290816,(char*)NULL,G__setup_memvarHepMCEvent,G__setup_memfuncHepMCEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_GenParticle),sizeof(GenParticle),-1,290816,(char*)NULL,G__setup_memvarGenParticle,G__setup_memfuncGenParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Vertex),sizeof(Vertex),-1,290816,(char*)NULL,G__setup_memvarVertex,G__setup_memfuncVertex);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_MissingET),sizeof(MissingET),-1,290816,(char*)NULL,G__setup_memvarMissingET,G__setup_memfuncMissingET);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_ScalarHT),sizeof(ScalarHT),-1,290816,(char*)NULL,G__setup_memvarScalarHT,G__setup_memfuncScalarHT);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Rho),sizeof(Rho),-1,290816,(char*)NULL,G__setup_memvarRho,G__setup_memfuncRho);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Weight),sizeof(Weight),-1,290816,(char*)NULL,G__setup_memvarWeight,G__setup_memfuncWeight);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Photon),sizeof(Photon),-1,290816,(char*)NULL,G__setup_memvarPhoton,G__setup_memfuncPhoton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Electron),sizeof(Electron),-1,290816,(char*)NULL,G__setup_memvarElectron,G__setup_memfuncElectron);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Muon),sizeof(Muon),-1,290816,(char*)NULL,G__setup_memvarMuon,G__setup_memfuncMuon);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Jet),sizeof(Jet),-1,290816,(char*)NULL,G__setup_memvarJet,G__setup_memfuncJet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Track),sizeof(Track),-1,290816,(char*)NULL,G__setup_memvarTrack,G__setup_memfuncTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_Tower),sizeof(Tower),-1,290816,(char*)NULL,G__setup_memvarTower,G__setup_memfuncTower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ClassesDictLN_HectorHit),sizeof(HectorHit),-1,290816,(char*)NULL,G__setup_memvarHectorHit,G__setup_memfuncHectorHit);
}
extern "C" void G__cpp_setupClassesDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupClassesDict()");
  G__set_cpp_environmentClassesDict();
  G__cpp_setup_tagtableClassesDict();

  G__cpp_setup_inheritanceClassesDict();

  G__cpp_setup_typetableClassesDict();

  G__cpp_setup_memvarClassesDict();

  G__cpp_setup_memfuncClassesDict();
  G__cpp_setup_globalClassesDict();
  G__cpp_setup_funcClassesDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncClassesDict();
  return;
}
class G__cpp_setup_initClassesDict {
  public:
    G__cpp_setup_initClassesDict() { G__add_setup_func("ClassesDict",(G__incsetup)(&G__cpp_setupClassesDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initClassesDict() { G__remove_setup_func("ClassesDict"); }
};
G__cpp_setup_initClassesDict G__cpp_setup_initializerClassesDict;

