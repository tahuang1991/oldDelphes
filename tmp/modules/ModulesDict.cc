#define private public
#define protected public
/*
 *  Delphes: a framework for fast simulation of a generic collider experiment
 *  Copyright (C) 2012-2014  Universite catholique de Louvain (UCL), Belgium
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** \class
 *
 *  Lists classes to be included in cint dicitonary
 *
 *  \author P. Demin - UCL, Louvain-la-Neuve
 *
 */

#include "modules/Delphes.h"

#include "modules/AngularSmearing.h"
#include "modules/ParticlePropagator.h"
#include "modules/Efficiency.h"
#include "modules/IdentificationMap.h"
#include "modules/EnergySmearing.h"
#include "modules/MomentumSmearing.h"
#include "modules/ImpactParameterSmearing.h"
#include "modules/TimeSmearing.h"
#include "modules/SimpleCalorimeter.h"
#include "modules/Calorimeter.h"
#include "modules/Isolation.h"
#include "modules/EnergyScale.h"
#include "modules/UniqueObjectFinder.h"
#include "modules/TrackCountingBTagging.h"
#include "modules/BTagging.h"
#include "modules/TauTagging.h"
#include "modules/TreeWriter.h"
#include "modules/Merger.h"
#include "modules/LeptonDressing.h"
#include "modules/PileUpMerger.h"
#include "modules/JetPileUpSubtractor.h"
#include "modules/TrackPileUpSubtractor.h"
#include "modules/PileUpJetID.h"
#include "modules/ConstituentFilter.h"
#include "modules/StatusPidFilter.h"
#include "modules/PdgCodeFilter.h"
#include "modules/Cloner.h"
#include "modules/Weighter.h"
#include "modules/Hector.h"
#include "modules/ExampleModule.h"

#ifdef __CINT__

#pragma link off all globals;
#pragma link off all classes;
#pragma link off all functions;

#pragma link C++ class Delphes+;

#pragma link C++ class AngularSmearing+;
#pragma link C++ class ParticlePropagator+;
#pragma link C++ class Efficiency+;
#pragma link C++ class IdentificationMap+;
#pragma link C++ class EnergySmearing+;
#pragma link C++ class MomentumSmearing+;
#pragma link C++ class ImpactParameterSmearing+;
#pragma link C++ class TimeSmearing+;
#pragma link C++ class SimpleCalorimeter+;
#pragma link C++ class Calorimeter+;
#pragma link C++ class Isolation+;
#pragma link C++ class EnergyScale+;
#pragma link C++ class UniqueObjectFinder+;
#pragma link C++ class TrackCountingBTagging+;
#pragma link C++ class BTagging+;
#pragma link C++ class TauTagging+;
#pragma link C++ class TreeWriter+;
#pragma link C++ class Merger+;
#pragma link C++ class LeptonDressing+;
#pragma link C++ class PileUpMerger+;
#pragma link C++ class JetPileUpSubtractor+;
#pragma link C++ class TrackPileUpSubtractor+;
#pragma link C++ class PileUpJetID+;
#pragma link C++ class ConstituentFilter+;
#pragma link C++ class StatusPidFilter+;
#pragma link C++ class PdgCodeFilter+;
#pragma link C++ class Cloner+;
#pragma link C++ class Weighter+;
#pragma link C++ class Hector+;
#pragma link C++ class ExampleModule+;

#endif
//
// File generated by rootcint at Wed Jul  1 00:16:01 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME tmpdImodulesdIModulesDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ModulesDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Delphes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Delphes(void *p = 0);
   static void *newArray_Delphes(Long_t size, void *p);
   static void delete_Delphes(void *p);
   static void deleteArray_Delphes(void *p);
   static void destruct_Delphes(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Delphes*)
   {
      ::Delphes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Delphes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Delphes", ::Delphes::Class_Version(), "./modules/Delphes.h", 41,
                  typeid(::Delphes), DefineBehavior(ptr, ptr),
                  &::Delphes::Dictionary, isa_proxy, 4,
                  sizeof(::Delphes) );
      instance.SetNew(&new_Delphes);
      instance.SetNewArray(&newArray_Delphes);
      instance.SetDelete(&delete_Delphes);
      instance.SetDeleteArray(&deleteArray_Delphes);
      instance.SetDestructor(&destruct_Delphes);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Delphes*)
   {
      return GenerateInitInstanceLocal((::Delphes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Delphes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AngularSmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AngularSmearing(void *p = 0);
   static void *newArray_AngularSmearing(Long_t size, void *p);
   static void delete_AngularSmearing(void *p);
   static void deleteArray_AngularSmearing(void *p);
   static void destruct_AngularSmearing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::AngularSmearing*)
   {
      ::AngularSmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AngularSmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AngularSmearing", ::AngularSmearing::Class_Version(), "./modules/AngularSmearing.h", 37,
                  typeid(::AngularSmearing), DefineBehavior(ptr, ptr),
                  &::AngularSmearing::Dictionary, isa_proxy, 4,
                  sizeof(::AngularSmearing) );
      instance.SetNew(&new_AngularSmearing);
      instance.SetNewArray(&newArray_AngularSmearing);
      instance.SetDelete(&delete_AngularSmearing);
      instance.SetDeleteArray(&deleteArray_AngularSmearing);
      instance.SetDestructor(&destruct_AngularSmearing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::AngularSmearing*)
   {
      return GenerateInitInstanceLocal((::AngularSmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AngularSmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ParticlePropagator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ParticlePropagator(void *p = 0);
   static void *newArray_ParticlePropagator(Long_t size, void *p);
   static void delete_ParticlePropagator(void *p);
   static void deleteArray_ParticlePropagator(void *p);
   static void destruct_ParticlePropagator(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ParticlePropagator*)
   {
      ::ParticlePropagator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ParticlePropagator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ParticlePropagator", ::ParticlePropagator::Class_Version(), "./modules/ParticlePropagator.h", 39,
                  typeid(::ParticlePropagator), DefineBehavior(ptr, ptr),
                  &::ParticlePropagator::Dictionary, isa_proxy, 4,
                  sizeof(::ParticlePropagator) );
      instance.SetNew(&new_ParticlePropagator);
      instance.SetNewArray(&newArray_ParticlePropagator);
      instance.SetDelete(&delete_ParticlePropagator);
      instance.SetDeleteArray(&deleteArray_ParticlePropagator);
      instance.SetDestructor(&destruct_ParticlePropagator);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ParticlePropagator*)
   {
      return GenerateInitInstanceLocal((::ParticlePropagator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Efficiency_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Efficiency(void *p = 0);
   static void *newArray_Efficiency(Long_t size, void *p);
   static void delete_Efficiency(void *p);
   static void deleteArray_Efficiency(void *p);
   static void destruct_Efficiency(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Efficiency*)
   {
      ::Efficiency *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Efficiency >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Efficiency", ::Efficiency::Class_Version(), "./modules/Efficiency.h", 37,
                  typeid(::Efficiency), DefineBehavior(ptr, ptr),
                  &::Efficiency::Dictionary, isa_proxy, 4,
                  sizeof(::Efficiency) );
      instance.SetNew(&new_Efficiency);
      instance.SetNewArray(&newArray_Efficiency);
      instance.SetDelete(&delete_Efficiency);
      instance.SetDeleteArray(&deleteArray_Efficiency);
      instance.SetDestructor(&destruct_Efficiency);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Efficiency*)
   {
      return GenerateInitInstanceLocal((::Efficiency*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Efficiency*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void IdentificationMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_IdentificationMap(void *p = 0);
   static void *newArray_IdentificationMap(Long_t size, void *p);
   static void delete_IdentificationMap(void *p);
   static void deleteArray_IdentificationMap(void *p);
   static void destruct_IdentificationMap(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::IdentificationMap*)
   {
      ::IdentificationMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::IdentificationMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("IdentificationMap", ::IdentificationMap::Class_Version(), "./modules/IdentificationMap.h", 39,
                  typeid(::IdentificationMap), DefineBehavior(ptr, ptr),
                  &::IdentificationMap::Dictionary, isa_proxy, 4,
                  sizeof(::IdentificationMap) );
      instance.SetNew(&new_IdentificationMap);
      instance.SetNewArray(&newArray_IdentificationMap);
      instance.SetDelete(&delete_IdentificationMap);
      instance.SetDeleteArray(&deleteArray_IdentificationMap);
      instance.SetDestructor(&destruct_IdentificationMap);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::IdentificationMap*)
   {
      return GenerateInitInstanceLocal((::IdentificationMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::IdentificationMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EnergySmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EnergySmearing(void *p = 0);
   static void *newArray_EnergySmearing(Long_t size, void *p);
   static void delete_EnergySmearing(void *p);
   static void deleteArray_EnergySmearing(void *p);
   static void destruct_EnergySmearing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EnergySmearing*)
   {
      ::EnergySmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EnergySmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EnergySmearing", ::EnergySmearing::Class_Version(), "./modules/EnergySmearing.h", 37,
                  typeid(::EnergySmearing), DefineBehavior(ptr, ptr),
                  &::EnergySmearing::Dictionary, isa_proxy, 4,
                  sizeof(::EnergySmearing) );
      instance.SetNew(&new_EnergySmearing);
      instance.SetNewArray(&newArray_EnergySmearing);
      instance.SetDelete(&delete_EnergySmearing);
      instance.SetDeleteArray(&deleteArray_EnergySmearing);
      instance.SetDestructor(&destruct_EnergySmearing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EnergySmearing*)
   {
      return GenerateInitInstanceLocal((::EnergySmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EnergySmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void MomentumSmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MomentumSmearing(void *p = 0);
   static void *newArray_MomentumSmearing(Long_t size, void *p);
   static void delete_MomentumSmearing(void *p);
   static void deleteArray_MomentumSmearing(void *p);
   static void destruct_MomentumSmearing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MomentumSmearing*)
   {
      ::MomentumSmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MomentumSmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MomentumSmearing", ::MomentumSmearing::Class_Version(), "./modules/MomentumSmearing.h", 37,
                  typeid(::MomentumSmearing), DefineBehavior(ptr, ptr),
                  &::MomentumSmearing::Dictionary, isa_proxy, 4,
                  sizeof(::MomentumSmearing) );
      instance.SetNew(&new_MomentumSmearing);
      instance.SetNewArray(&newArray_MomentumSmearing);
      instance.SetDelete(&delete_MomentumSmearing);
      instance.SetDeleteArray(&deleteArray_MomentumSmearing);
      instance.SetDestructor(&destruct_MomentumSmearing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MomentumSmearing*)
   {
      return GenerateInitInstanceLocal((::MomentumSmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ImpactParameterSmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ImpactParameterSmearing(void *p = 0);
   static void *newArray_ImpactParameterSmearing(Long_t size, void *p);
   static void delete_ImpactParameterSmearing(void *p);
   static void deleteArray_ImpactParameterSmearing(void *p);
   static void destruct_ImpactParameterSmearing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ImpactParameterSmearing*)
   {
      ::ImpactParameterSmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ImpactParameterSmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ImpactParameterSmearing", ::ImpactParameterSmearing::Class_Version(), "./modules/ImpactParameterSmearing.h", 37,
                  typeid(::ImpactParameterSmearing), DefineBehavior(ptr, ptr),
                  &::ImpactParameterSmearing::Dictionary, isa_proxy, 4,
                  sizeof(::ImpactParameterSmearing) );
      instance.SetNew(&new_ImpactParameterSmearing);
      instance.SetNewArray(&newArray_ImpactParameterSmearing);
      instance.SetDelete(&delete_ImpactParameterSmearing);
      instance.SetDeleteArray(&deleteArray_ImpactParameterSmearing);
      instance.SetDestructor(&destruct_ImpactParameterSmearing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ImpactParameterSmearing*)
   {
      return GenerateInitInstanceLocal((::ImpactParameterSmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ImpactParameterSmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TimeSmearing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TimeSmearing(void *p = 0);
   static void *newArray_TimeSmearing(Long_t size, void *p);
   static void delete_TimeSmearing(void *p);
   static void deleteArray_TimeSmearing(void *p);
   static void destruct_TimeSmearing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TimeSmearing*)
   {
      ::TimeSmearing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TimeSmearing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TimeSmearing", ::TimeSmearing::Class_Version(), "./modules/TimeSmearing.h", 36,
                  typeid(::TimeSmearing), DefineBehavior(ptr, ptr),
                  &::TimeSmearing::Dictionary, isa_proxy, 4,
                  sizeof(::TimeSmearing) );
      instance.SetNew(&new_TimeSmearing);
      instance.SetNewArray(&newArray_TimeSmearing);
      instance.SetDelete(&delete_TimeSmearing);
      instance.SetDeleteArray(&deleteArray_TimeSmearing);
      instance.SetDestructor(&destruct_TimeSmearing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TimeSmearing*)
   {
      return GenerateInitInstanceLocal((::TimeSmearing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TimeSmearing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SimpleCalorimeter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SimpleCalorimeter(void *p = 0);
   static void *newArray_SimpleCalorimeter(Long_t size, void *p);
   static void delete_SimpleCalorimeter(void *p);
   static void deleteArray_SimpleCalorimeter(void *p);
   static void destruct_SimpleCalorimeter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SimpleCalorimeter*)
   {
      ::SimpleCalorimeter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SimpleCalorimeter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SimpleCalorimeter", ::SimpleCalorimeter::Class_Version(), "./modules/SimpleCalorimeter.h", 42,
                  typeid(::SimpleCalorimeter), DefineBehavior(ptr, ptr),
                  &::SimpleCalorimeter::Dictionary, isa_proxy, 4,
                  sizeof(::SimpleCalorimeter) );
      instance.SetNew(&new_SimpleCalorimeter);
      instance.SetNewArray(&newArray_SimpleCalorimeter);
      instance.SetDelete(&delete_SimpleCalorimeter);
      instance.SetDeleteArray(&deleteArray_SimpleCalorimeter);
      instance.SetDestructor(&destruct_SimpleCalorimeter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SimpleCalorimeter*)
   {
      return GenerateInitInstanceLocal((::SimpleCalorimeter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SimpleCalorimeter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Calorimeter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Calorimeter(void *p = 0);
   static void *newArray_Calorimeter(Long_t size, void *p);
   static void delete_Calorimeter(void *p);
   static void deleteArray_Calorimeter(void *p);
   static void destruct_Calorimeter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Calorimeter*)
   {
      ::Calorimeter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Calorimeter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Calorimeter", ::Calorimeter::Class_Version(), "./modules/Calorimeter.h", 42,
                  typeid(::Calorimeter), DefineBehavior(ptr, ptr),
                  &::Calorimeter::Dictionary, isa_proxy, 4,
                  sizeof(::Calorimeter) );
      instance.SetNew(&new_Calorimeter);
      instance.SetNewArray(&newArray_Calorimeter);
      instance.SetDelete(&delete_Calorimeter);
      instance.SetDeleteArray(&deleteArray_Calorimeter);
      instance.SetDestructor(&destruct_Calorimeter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Calorimeter*)
   {
      return GenerateInitInstanceLocal((::Calorimeter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Calorimeter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Isolation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Isolation(void *p = 0);
   static void *newArray_Isolation(Long_t size, void *p);
   static void delete_Isolation(void *p);
   static void deleteArray_Isolation(void *p);
   static void destruct_Isolation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Isolation*)
   {
      ::Isolation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Isolation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Isolation", ::Isolation::Class_Version(), "./modules/Isolation.h", 41,
                  typeid(::Isolation), DefineBehavior(ptr, ptr),
                  &::Isolation::Dictionary, isa_proxy, 4,
                  sizeof(::Isolation) );
      instance.SetNew(&new_Isolation);
      instance.SetNewArray(&newArray_Isolation);
      instance.SetDelete(&delete_Isolation);
      instance.SetDeleteArray(&deleteArray_Isolation);
      instance.SetDestructor(&destruct_Isolation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Isolation*)
   {
      return GenerateInitInstanceLocal((::Isolation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Isolation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void EnergyScale_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_EnergyScale(void *p = 0);
   static void *newArray_EnergyScale(Long_t size, void *p);
   static void delete_EnergyScale(void *p);
   static void deleteArray_EnergyScale(void *p);
   static void destruct_EnergyScale(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::EnergyScale*)
   {
      ::EnergyScale *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::EnergyScale >(0);
      static ::ROOT::TGenericClassInfo 
         instance("EnergyScale", ::EnergyScale::Class_Version(), "./modules/EnergyScale.h", 37,
                  typeid(::EnergyScale), DefineBehavior(ptr, ptr),
                  &::EnergyScale::Dictionary, isa_proxy, 4,
                  sizeof(::EnergyScale) );
      instance.SetNew(&new_EnergyScale);
      instance.SetNewArray(&newArray_EnergyScale);
      instance.SetDelete(&delete_EnergyScale);
      instance.SetDeleteArray(&deleteArray_EnergyScale);
      instance.SetDestructor(&destruct_EnergyScale);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::EnergyScale*)
   {
      return GenerateInitInstanceLocal((::EnergyScale*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::EnergyScale*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void UniqueObjectFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_UniqueObjectFinder(void *p = 0);
   static void *newArray_UniqueObjectFinder(Long_t size, void *p);
   static void delete_UniqueObjectFinder(void *p);
   static void deleteArray_UniqueObjectFinder(void *p);
   static void destruct_UniqueObjectFinder(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::UniqueObjectFinder*)
   {
      ::UniqueObjectFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::UniqueObjectFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("UniqueObjectFinder", ::UniqueObjectFinder::Class_Version(), "./modules/UniqueObjectFinder.h", 39,
                  typeid(::UniqueObjectFinder), DefineBehavior(ptr, ptr),
                  &::UniqueObjectFinder::Dictionary, isa_proxy, 4,
                  sizeof(::UniqueObjectFinder) );
      instance.SetNew(&new_UniqueObjectFinder);
      instance.SetNewArray(&newArray_UniqueObjectFinder);
      instance.SetDelete(&delete_UniqueObjectFinder);
      instance.SetDeleteArray(&deleteArray_UniqueObjectFinder);
      instance.SetDestructor(&destruct_UniqueObjectFinder);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::UniqueObjectFinder*)
   {
      return GenerateInitInstanceLocal((::UniqueObjectFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackCountingBTagging_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackCountingBTagging(void *p = 0);
   static void *newArray_TrackCountingBTagging(Long_t size, void *p);
   static void delete_TrackCountingBTagging(void *p);
   static void deleteArray_TrackCountingBTagging(void *p);
   static void destruct_TrackCountingBTagging(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackCountingBTagging*)
   {
      ::TrackCountingBTagging *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackCountingBTagging >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackCountingBTagging", ::TrackCountingBTagging::Class_Version(), "./modules/TrackCountingBTagging.h", 37,
                  typeid(::TrackCountingBTagging), DefineBehavior(ptr, ptr),
                  &::TrackCountingBTagging::Dictionary, isa_proxy, 4,
                  sizeof(::TrackCountingBTagging) );
      instance.SetNew(&new_TrackCountingBTagging);
      instance.SetNewArray(&newArray_TrackCountingBTagging);
      instance.SetDelete(&delete_TrackCountingBTagging);
      instance.SetDeleteArray(&deleteArray_TrackCountingBTagging);
      instance.SetDestructor(&destruct_TrackCountingBTagging);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackCountingBTagging*)
   {
      return GenerateInitInstanceLocal((::TrackCountingBTagging*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackCountingBTagging*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void BTagging_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_BTagging(void *p = 0);
   static void *newArray_BTagging(Long_t size, void *p);
   static void delete_BTagging(void *p);
   static void deleteArray_BTagging(void *p);
   static void destruct_BTagging(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::BTagging*)
   {
      ::BTagging *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::BTagging >(0);
      static ::ROOT::TGenericClassInfo 
         instance("BTagging", ::BTagging::Class_Version(), "./modules/BTagging.h", 43,
                  typeid(::BTagging), DefineBehavior(ptr, ptr),
                  &::BTagging::Dictionary, isa_proxy, 4,
                  sizeof(::BTagging) );
      instance.SetNew(&new_BTagging);
      instance.SetNewArray(&newArray_BTagging);
      instance.SetDelete(&delete_BTagging);
      instance.SetDeleteArray(&deleteArray_BTagging);
      instance.SetDestructor(&destruct_BTagging);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::BTagging*)
   {
      return GenerateInitInstanceLocal((::BTagging*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::BTagging*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TauTagging_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TauTagging(void *p = 0);
   static void *newArray_TauTagging(Long_t size, void *p);
   static void delete_TauTagging(void *p);
   static void deleteArray_TauTagging(void *p);
   static void destruct_TauTagging(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TauTagging*)
   {
      ::TauTagging *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TauTagging >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TauTagging", ::TauTagging::Class_Version(), "./modules/TauTagging.h", 43,
                  typeid(::TauTagging), DefineBehavior(ptr, ptr),
                  &::TauTagging::Dictionary, isa_proxy, 4,
                  sizeof(::TauTagging) );
      instance.SetNew(&new_TauTagging);
      instance.SetNewArray(&newArray_TauTagging);
      instance.SetDelete(&delete_TauTagging);
      instance.SetDeleteArray(&deleteArray_TauTagging);
      instance.SetDestructor(&destruct_TauTagging);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TauTagging*)
   {
      return GenerateInitInstanceLocal((::TauTagging*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TauTagging*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TreeWriter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TreeWriter(void *p = 0);
   static void *newArray_TreeWriter(Long_t size, void *p);
   static void delete_TreeWriter(void *p);
   static void deleteArray_TreeWriter(void *p);
   static void destruct_TreeWriter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TreeWriter*)
   {
      ::TreeWriter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TreeWriter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TreeWriter", ::TreeWriter::Class_Version(), "./modules/TreeWriter.h", 42,
                  typeid(::TreeWriter), DefineBehavior(ptr, ptr),
                  &::TreeWriter::Dictionary, isa_proxy, 4,
                  sizeof(::TreeWriter) );
      instance.SetNew(&new_TreeWriter);
      instance.SetNewArray(&newArray_TreeWriter);
      instance.SetDelete(&delete_TreeWriter);
      instance.SetDeleteArray(&deleteArray_TreeWriter);
      instance.SetDestructor(&destruct_TreeWriter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TreeWriter*)
   {
      return GenerateInitInstanceLocal((::TreeWriter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TreeWriter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Merger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Merger(void *p = 0);
   static void *newArray_Merger(Long_t size, void *p);
   static void delete_Merger(void *p);
   static void deleteArray_Merger(void *p);
   static void destruct_Merger(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Merger*)
   {
      ::Merger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Merger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Merger", ::Merger::Class_Version(), "./modules/Merger.h", 39,
                  typeid(::Merger), DefineBehavior(ptr, ptr),
                  &::Merger::Dictionary, isa_proxy, 4,
                  sizeof(::Merger) );
      instance.SetNew(&new_Merger);
      instance.SetNewArray(&newArray_Merger);
      instance.SetDelete(&delete_Merger);
      instance.SetDeleteArray(&deleteArray_Merger);
      instance.SetDestructor(&destruct_Merger);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Merger*)
   {
      return GenerateInitInstanceLocal((::Merger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Merger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LeptonDressing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LeptonDressing(void *p = 0);
   static void *newArray_LeptonDressing(Long_t size, void *p);
   static void delete_LeptonDressing(void *p);
   static void deleteArray_LeptonDressing(void *p);
   static void destruct_LeptonDressing(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LeptonDressing*)
   {
      ::LeptonDressing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LeptonDressing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LeptonDressing", ::LeptonDressing::Class_Version(), "./modules/LeptonDressing.h", 34,
                  typeid(::LeptonDressing), DefineBehavior(ptr, ptr),
                  &::LeptonDressing::Dictionary, isa_proxy, 4,
                  sizeof(::LeptonDressing) );
      instance.SetNew(&new_LeptonDressing);
      instance.SetNewArray(&newArray_LeptonDressing);
      instance.SetDelete(&delete_LeptonDressing);
      instance.SetDeleteArray(&deleteArray_LeptonDressing);
      instance.SetDestructor(&destruct_LeptonDressing);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LeptonDressing*)
   {
      return GenerateInitInstanceLocal((::LeptonDressing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LeptonDressing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void PileUpMerger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PileUpMerger(void *p = 0);
   static void *newArray_PileUpMerger(Long_t size, void *p);
   static void delete_PileUpMerger(void *p);
   static void deleteArray_PileUpMerger(void *p);
   static void destruct_PileUpMerger(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PileUpMerger*)
   {
      ::PileUpMerger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PileUpMerger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PileUpMerger", ::PileUpMerger::Class_Version(), "./modules/PileUpMerger.h", 37,
                  typeid(::PileUpMerger), DefineBehavior(ptr, ptr),
                  &::PileUpMerger::Dictionary, isa_proxy, 4,
                  sizeof(::PileUpMerger) );
      instance.SetNew(&new_PileUpMerger);
      instance.SetNewArray(&newArray_PileUpMerger);
      instance.SetDelete(&delete_PileUpMerger);
      instance.SetDeleteArray(&deleteArray_PileUpMerger);
      instance.SetDestructor(&destruct_PileUpMerger);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PileUpMerger*)
   {
      return GenerateInitInstanceLocal((::PileUpMerger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PileUpMerger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void JetPileUpSubtractor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_JetPileUpSubtractor(void *p = 0);
   static void *newArray_JetPileUpSubtractor(Long_t size, void *p);
   static void delete_JetPileUpSubtractor(void *p);
   static void deleteArray_JetPileUpSubtractor(void *p);
   static void destruct_JetPileUpSubtractor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::JetPileUpSubtractor*)
   {
      ::JetPileUpSubtractor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::JetPileUpSubtractor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("JetPileUpSubtractor", ::JetPileUpSubtractor::Class_Version(), "./modules/JetPileUpSubtractor.h", 37,
                  typeid(::JetPileUpSubtractor), DefineBehavior(ptr, ptr),
                  &::JetPileUpSubtractor::Dictionary, isa_proxy, 4,
                  sizeof(::JetPileUpSubtractor) );
      instance.SetNew(&new_JetPileUpSubtractor);
      instance.SetNewArray(&newArray_JetPileUpSubtractor);
      instance.SetDelete(&delete_JetPileUpSubtractor);
      instance.SetDeleteArray(&deleteArray_JetPileUpSubtractor);
      instance.SetDestructor(&destruct_JetPileUpSubtractor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::JetPileUpSubtractor*)
   {
      return GenerateInitInstanceLocal((::JetPileUpSubtractor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void TrackPileUpSubtractor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_TrackPileUpSubtractor(void *p = 0);
   static void *newArray_TrackPileUpSubtractor(Long_t size, void *p);
   static void delete_TrackPileUpSubtractor(void *p);
   static void deleteArray_TrackPileUpSubtractor(void *p);
   static void destruct_TrackPileUpSubtractor(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::TrackPileUpSubtractor*)
   {
      ::TrackPileUpSubtractor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::TrackPileUpSubtractor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("TrackPileUpSubtractor", ::TrackPileUpSubtractor::Class_Version(), "./modules/TrackPileUpSubtractor.h", 38,
                  typeid(::TrackPileUpSubtractor), DefineBehavior(ptr, ptr),
                  &::TrackPileUpSubtractor::Dictionary, isa_proxy, 4,
                  sizeof(::TrackPileUpSubtractor) );
      instance.SetNew(&new_TrackPileUpSubtractor);
      instance.SetNewArray(&newArray_TrackPileUpSubtractor);
      instance.SetDelete(&delete_TrackPileUpSubtractor);
      instance.SetDeleteArray(&deleteArray_TrackPileUpSubtractor);
      instance.SetDestructor(&destruct_TrackPileUpSubtractor);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::TrackPileUpSubtractor*)
   {
      return GenerateInitInstanceLocal((::TrackPileUpSubtractor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void PileUpJetID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PileUpJetID(void *p = 0);
   static void *newArray_PileUpJetID(Long_t size, void *p);
   static void delete_PileUpJetID(void *p);
   static void deleteArray_PileUpJetID(void *p);
   static void destruct_PileUpJetID(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PileUpJetID*)
   {
      ::PileUpJetID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PileUpJetID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PileUpJetID", ::PileUpJetID::Class_Version(), "./modules/PileUpJetID.h", 38,
                  typeid(::PileUpJetID), DefineBehavior(ptr, ptr),
                  &::PileUpJetID::Dictionary, isa_proxy, 4,
                  sizeof(::PileUpJetID) );
      instance.SetNew(&new_PileUpJetID);
      instance.SetNewArray(&newArray_PileUpJetID);
      instance.SetDelete(&delete_PileUpJetID);
      instance.SetDeleteArray(&deleteArray_PileUpJetID);
      instance.SetDestructor(&destruct_PileUpJetID);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PileUpJetID*)
   {
      return GenerateInitInstanceLocal((::PileUpJetID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PileUpJetID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ConstituentFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ConstituentFilter(void *p = 0);
   static void *newArray_ConstituentFilter(Long_t size, void *p);
   static void delete_ConstituentFilter(void *p);
   static void deleteArray_ConstituentFilter(void *p);
   static void destruct_ConstituentFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ConstituentFilter*)
   {
      ::ConstituentFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ConstituentFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ConstituentFilter", ::ConstituentFilter::Class_Version(), "./modules/ConstituentFilter.h", 39,
                  typeid(::ConstituentFilter), DefineBehavior(ptr, ptr),
                  &::ConstituentFilter::Dictionary, isa_proxy, 4,
                  sizeof(::ConstituentFilter) );
      instance.SetNew(&new_ConstituentFilter);
      instance.SetNewArray(&newArray_ConstituentFilter);
      instance.SetDelete(&delete_ConstituentFilter);
      instance.SetDeleteArray(&deleteArray_ConstituentFilter);
      instance.SetDestructor(&destruct_ConstituentFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ConstituentFilter*)
   {
      return GenerateInitInstanceLocal((::ConstituentFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void StatusPidFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_StatusPidFilter(void *p = 0);
   static void *newArray_StatusPidFilter(Long_t size, void *p);
   static void delete_StatusPidFilter(void *p);
   static void deleteArray_StatusPidFilter(void *p);
   static void destruct_StatusPidFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::StatusPidFilter*)
   {
      ::StatusPidFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::StatusPidFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("StatusPidFilter", ::StatusPidFilter::Class_Version(), "./modules/StatusPidFilter.h", 39,
                  typeid(::StatusPidFilter), DefineBehavior(ptr, ptr),
                  &::StatusPidFilter::Dictionary, isa_proxy, 4,
                  sizeof(::StatusPidFilter) );
      instance.SetNew(&new_StatusPidFilter);
      instance.SetNewArray(&newArray_StatusPidFilter);
      instance.SetDelete(&delete_StatusPidFilter);
      instance.SetDeleteArray(&deleteArray_StatusPidFilter);
      instance.SetDestructor(&destruct_StatusPidFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::StatusPidFilter*)
   {
      return GenerateInitInstanceLocal((::StatusPidFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void PdgCodeFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_PdgCodeFilter(void *p = 0);
   static void *newArray_PdgCodeFilter(Long_t size, void *p);
   static void delete_PdgCodeFilter(void *p);
   static void deleteArray_PdgCodeFilter(void *p);
   static void destruct_PdgCodeFilter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::PdgCodeFilter*)
   {
      ::PdgCodeFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::PdgCodeFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("PdgCodeFilter", ::PdgCodeFilter::Class_Version(), "./modules/PdgCodeFilter.h", 39,
                  typeid(::PdgCodeFilter), DefineBehavior(ptr, ptr),
                  &::PdgCodeFilter::Dictionary, isa_proxy, 4,
                  sizeof(::PdgCodeFilter) );
      instance.SetNew(&new_PdgCodeFilter);
      instance.SetNewArray(&newArray_PdgCodeFilter);
      instance.SetDelete(&delete_PdgCodeFilter);
      instance.SetDeleteArray(&deleteArray_PdgCodeFilter);
      instance.SetDestructor(&destruct_PdgCodeFilter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::PdgCodeFilter*)
   {
      return GenerateInitInstanceLocal((::PdgCodeFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::PdgCodeFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Cloner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Cloner(void *p = 0);
   static void *newArray_Cloner(Long_t size, void *p);
   static void delete_Cloner(void *p);
   static void deleteArray_Cloner(void *p);
   static void destruct_Cloner(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Cloner*)
   {
      ::Cloner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Cloner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Cloner", ::Cloner::Class_Version(), "./modules/Cloner.h", 37,
                  typeid(::Cloner), DefineBehavior(ptr, ptr),
                  &::Cloner::Dictionary, isa_proxy, 4,
                  sizeof(::Cloner) );
      instance.SetNew(&new_Cloner);
      instance.SetNewArray(&newArray_Cloner);
      instance.SetDelete(&delete_Cloner);
      instance.SetDeleteArray(&deleteArray_Cloner);
      instance.SetDestructor(&destruct_Cloner);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Cloner*)
   {
      return GenerateInitInstanceLocal((::Cloner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Cloner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Weighter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Weighter(void *p = 0);
   static void *newArray_Weighter(Long_t size, void *p);
   static void delete_Weighter(void *p);
   static void deleteArray_Weighter(void *p);
   static void destruct_Weighter(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Weighter*)
   {
      ::Weighter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Weighter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Weighter", ::Weighter::Class_Version(), "./modules/Weighter.h", 38,
                  typeid(::Weighter), DefineBehavior(ptr, ptr),
                  &::Weighter::Dictionary, isa_proxy, 4,
                  sizeof(::Weighter) );
      instance.SetNew(&new_Weighter);
      instance.SetNewArray(&newArray_Weighter);
      instance.SetDelete(&delete_Weighter);
      instance.SetDeleteArray(&deleteArray_Weighter);
      instance.SetDestructor(&destruct_Weighter);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Weighter*)
   {
      return GenerateInitInstanceLocal((::Weighter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Weighter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Hector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Hector(void *p = 0);
   static void *newArray_Hector(Long_t size, void *p);
   static void delete_Hector(void *p);
   static void deleteArray_Hector(void *p);
   static void destruct_Hector(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Hector*)
   {
      ::Hector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Hector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Hector", ::Hector::Class_Version(), "./modules/Hector.h", 37,
                  typeid(::Hector), DefineBehavior(ptr, ptr),
                  &::Hector::Dictionary, isa_proxy, 4,
                  sizeof(::Hector) );
      instance.SetNew(&new_Hector);
      instance.SetNewArray(&newArray_Hector);
      instance.SetDelete(&delete_Hector);
      instance.SetDeleteArray(&deleteArray_Hector);
      instance.SetDestructor(&destruct_Hector);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Hector*)
   {
      return GenerateInitInstanceLocal((::Hector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Hector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void ExampleModule_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ExampleModule(void *p = 0);
   static void *newArray_ExampleModule(Long_t size, void *p);
   static void delete_ExampleModule(void *p);
   static void deleteArray_ExampleModule(void *p);
   static void destruct_ExampleModule(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ExampleModule*)
   {
      ::ExampleModule *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ExampleModule >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ExampleModule", ::ExampleModule::Class_Version(), "./modules/ExampleModule.h", 38,
                  typeid(::ExampleModule), DefineBehavior(ptr, ptr),
                  &::ExampleModule::Dictionary, isa_proxy, 4,
                  sizeof(::ExampleModule) );
      instance.SetNew(&new_ExampleModule);
      instance.SetNewArray(&newArray_ExampleModule);
      instance.SetDelete(&delete_ExampleModule);
      instance.SetDeleteArray(&deleteArray_ExampleModule);
      instance.SetDestructor(&destruct_ExampleModule);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ExampleModule*)
   {
      return GenerateInitInstanceLocal((::ExampleModule*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ExampleModule*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Delphes::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Delphes::Class_Name()
{
   return "Delphes";
}

//______________________________________________________________________________
const char *Delphes::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Delphes::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Delphes::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Delphes::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Delphes*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *AngularSmearing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *AngularSmearing::Class_Name()
{
   return "AngularSmearing";
}

//______________________________________________________________________________
const char *AngularSmearing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AngularSmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AngularSmearing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AngularSmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AngularSmearing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AngularSmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AngularSmearing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AngularSmearing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ParticlePropagator::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ParticlePropagator::Class_Name()
{
   return "ParticlePropagator";
}

//______________________________________________________________________________
const char *ParticlePropagator::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ParticlePropagator::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ParticlePropagator::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ParticlePropagator::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ParticlePropagator*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Efficiency::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Efficiency::Class_Name()
{
   return "Efficiency";
}

//______________________________________________________________________________
const char *Efficiency::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Efficiency::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Efficiency::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Efficiency::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Efficiency*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *IdentificationMap::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IdentificationMap::Class_Name()
{
   return "IdentificationMap";
}

//______________________________________________________________________________
const char *IdentificationMap::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IdentificationMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IdentificationMap::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IdentificationMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IdentificationMap::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IdentificationMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IdentificationMap::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IdentificationMap*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EnergySmearing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EnergySmearing::Class_Name()
{
   return "EnergySmearing";
}

//______________________________________________________________________________
const char *EnergySmearing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EnergySmearing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EnergySmearing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EnergySmearing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EnergySmearing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *MomentumSmearing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MomentumSmearing::Class_Name()
{
   return "MomentumSmearing";
}

//______________________________________________________________________________
const char *MomentumSmearing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MomentumSmearing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MomentumSmearing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MomentumSmearing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MomentumSmearing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ImpactParameterSmearing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ImpactParameterSmearing::Class_Name()
{
   return "ImpactParameterSmearing";
}

//______________________________________________________________________________
const char *ImpactParameterSmearing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ImpactParameterSmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ImpactParameterSmearing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ImpactParameterSmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ImpactParameterSmearing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ImpactParameterSmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ImpactParameterSmearing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ImpactParameterSmearing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TimeSmearing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TimeSmearing::Class_Name()
{
   return "TimeSmearing";
}

//______________________________________________________________________________
const char *TimeSmearing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TimeSmearing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TimeSmearing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TimeSmearing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TimeSmearing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TimeSmearing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TimeSmearing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TimeSmearing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SimpleCalorimeter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SimpleCalorimeter::Class_Name()
{
   return "SimpleCalorimeter";
}

//______________________________________________________________________________
const char *SimpleCalorimeter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SimpleCalorimeter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SimpleCalorimeter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SimpleCalorimeter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SimpleCalorimeter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SimpleCalorimeter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SimpleCalorimeter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SimpleCalorimeter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Calorimeter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Calorimeter::Class_Name()
{
   return "Calorimeter";
}

//______________________________________________________________________________
const char *Calorimeter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Calorimeter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Calorimeter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Calorimeter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Calorimeter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Isolation::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Isolation::Class_Name()
{
   return "Isolation";
}

//______________________________________________________________________________
const char *Isolation::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Isolation::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Isolation::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Isolation::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isolation*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *EnergyScale::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *EnergyScale::Class_Name()
{
   return "EnergyScale";
}

//______________________________________________________________________________
const char *EnergyScale::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int EnergyScale::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void EnergyScale::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *EnergyScale::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::EnergyScale*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *UniqueObjectFinder::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *UniqueObjectFinder::Class_Name()
{
   return "UniqueObjectFinder";
}

//______________________________________________________________________________
const char *UniqueObjectFinder::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int UniqueObjectFinder::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void UniqueObjectFinder::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *UniqueObjectFinder::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::UniqueObjectFinder*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackCountingBTagging::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackCountingBTagging::Class_Name()
{
   return "TrackCountingBTagging";
}

//______________________________________________________________________________
const char *TrackCountingBTagging::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCountingBTagging*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackCountingBTagging::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackCountingBTagging*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackCountingBTagging::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCountingBTagging*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackCountingBTagging::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackCountingBTagging*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *BTagging::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *BTagging::Class_Name()
{
   return "BTagging";
}

//______________________________________________________________________________
const char *BTagging::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int BTagging::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void BTagging::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *BTagging::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::BTagging*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TauTagging::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TauTagging::Class_Name()
{
   return "TauTagging";
}

//______________________________________________________________________________
const char *TauTagging::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TauTagging::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TauTagging::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TauTagging::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TauTagging*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TreeWriter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TreeWriter::Class_Name()
{
   return "TreeWriter";
}

//______________________________________________________________________________
const char *TreeWriter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TreeWriter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TreeWriter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TreeWriter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TreeWriter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Merger::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Merger::Class_Name()
{
   return "Merger";
}

//______________________________________________________________________________
const char *Merger::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Merger::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Merger::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Merger::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Merger*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *LeptonDressing::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *LeptonDressing::Class_Name()
{
   return "LeptonDressing";
}

//______________________________________________________________________________
const char *LeptonDressing::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LeptonDressing::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LeptonDressing::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LeptonDressing::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LeptonDressing*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PileUpMerger::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PileUpMerger::Class_Name()
{
   return "PileUpMerger";
}

//______________________________________________________________________________
const char *PileUpMerger::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PileUpMerger::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PileUpMerger::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PileUpMerger::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PileUpMerger*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *JetPileUpSubtractor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *JetPileUpSubtractor::Class_Name()
{
   return "JetPileUpSubtractor";
}

//______________________________________________________________________________
const char *JetPileUpSubtractor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int JetPileUpSubtractor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void JetPileUpSubtractor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *JetPileUpSubtractor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::JetPileUpSubtractor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *TrackPileUpSubtractor::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *TrackPileUpSubtractor::Class_Name()
{
   return "TrackPileUpSubtractor";
}

//______________________________________________________________________________
const char *TrackPileUpSubtractor::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int TrackPileUpSubtractor::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void TrackPileUpSubtractor::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *TrackPileUpSubtractor::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::TrackPileUpSubtractor*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PileUpJetID::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PileUpJetID::Class_Name()
{
   return "PileUpJetID";
}

//______________________________________________________________________________
const char *PileUpJetID::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PileUpJetID::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PileUpJetID::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PileUpJetID::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PileUpJetID*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ConstituentFilter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ConstituentFilter::Class_Name()
{
   return "ConstituentFilter";
}

//______________________________________________________________________________
const char *ConstituentFilter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ConstituentFilter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ConstituentFilter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ConstituentFilter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ConstituentFilter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *StatusPidFilter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *StatusPidFilter::Class_Name()
{
   return "StatusPidFilter";
}

//______________________________________________________________________________
const char *StatusPidFilter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int StatusPidFilter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void StatusPidFilter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *StatusPidFilter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::StatusPidFilter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *PdgCodeFilter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *PdgCodeFilter::Class_Name()
{
   return "PdgCodeFilter";
}

//______________________________________________________________________________
const char *PdgCodeFilter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PdgCodeFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int PdgCodeFilter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::PdgCodeFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void PdgCodeFilter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PdgCodeFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *PdgCodeFilter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::PdgCodeFilter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Cloner::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Cloner::Class_Name()
{
   return "Cloner";
}

//______________________________________________________________________________
const char *Cloner::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Cloner::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Cloner::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Cloner::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Cloner*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Weighter::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Weighter::Class_Name()
{
   return "Weighter";
}

//______________________________________________________________________________
const char *Weighter::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Weighter::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Weighter::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Weighter::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Weighter*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Hector::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Hector::Class_Name()
{
   return "Hector";
}

//______________________________________________________________________________
const char *Hector::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Hector::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Hector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Hector::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Hector::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Hector*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *ExampleModule::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ExampleModule::Class_Name()
{
   return "ExampleModule";
}

//______________________________________________________________________________
const char *ExampleModule::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ExampleModule::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ExampleModule::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ExampleModule::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ExampleModule*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Delphes::Streamer(TBuffer &R__b)
{
   // Stream an object of class Delphes.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Delphes::Class(),this);
   } else {
      R__b.WriteClassBuffer(Delphes::Class(),this);
   }
}

//______________________________________________________________________________
void Delphes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Delphes.
      TClass *R__cl = ::Delphes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFactory", &fFactory);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Delphes(void *p) {
      return  p ? new(p) ::Delphes : new ::Delphes;
   }
   static void *newArray_Delphes(Long_t nElements, void *p) {
      return p ? new(p) ::Delphes[nElements] : new ::Delphes[nElements];
   }
   // Wrapper around operator delete
   static void delete_Delphes(void *p) {
      delete ((::Delphes*)p);
   }
   static void deleteArray_Delphes(void *p) {
      delete [] ((::Delphes*)p);
   }
   static void destruct_Delphes(void *p) {
      typedef ::Delphes current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Delphes

//______________________________________________________________________________
void AngularSmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class AngularSmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AngularSmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(AngularSmearing::Class(),this);
   }
}

//______________________________________________________________________________
void AngularSmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AngularSmearing.
      TClass *R__cl = ::AngularSmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormulaEta", &fFormulaEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormulaPhi", &fFormulaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_AngularSmearing(void *p) {
      return  p ? new(p) ::AngularSmearing : new ::AngularSmearing;
   }
   static void *newArray_AngularSmearing(Long_t nElements, void *p) {
      return p ? new(p) ::AngularSmearing[nElements] : new ::AngularSmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_AngularSmearing(void *p) {
      delete ((::AngularSmearing*)p);
   }
   static void deleteArray_AngularSmearing(void *p) {
      delete [] ((::AngularSmearing*)p);
   }
   static void destruct_AngularSmearing(void *p) {
      typedef ::AngularSmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::AngularSmearing

//______________________________________________________________________________
void ParticlePropagator::Streamer(TBuffer &R__b)
{
   // Stream an object of class ParticlePropagator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ParticlePropagator::Class(),this);
   } else {
      R__b.WriteClassBuffer(ParticlePropagator::Class(),this);
   }
}

//______________________________________________________________________________
void ParticlePropagator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ParticlePropagator.
      TClass *R__cl = ::ParticlePropagator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadius", &fRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRadius2", &fRadius2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHalfLength", &fHalfLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBz", &fBz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChargedHadronOutputArray", &fChargedHadronOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fElectronOutputArray", &fElectronOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMuonOutputArray", &fMuonOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ParticlePropagator(void *p) {
      return  p ? new(p) ::ParticlePropagator : new ::ParticlePropagator;
   }
   static void *newArray_ParticlePropagator(Long_t nElements, void *p) {
      return p ? new(p) ::ParticlePropagator[nElements] : new ::ParticlePropagator[nElements];
   }
   // Wrapper around operator delete
   static void delete_ParticlePropagator(void *p) {
      delete ((::ParticlePropagator*)p);
   }
   static void deleteArray_ParticlePropagator(void *p) {
      delete [] ((::ParticlePropagator*)p);
   }
   static void destruct_ParticlePropagator(void *p) {
      typedef ::ParticlePropagator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ParticlePropagator

//______________________________________________________________________________
void Efficiency::Streamer(TBuffer &R__b)
{
   // Stream an object of class Efficiency.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Efficiency::Class(),this);
   } else {
      R__b.WriteClassBuffer(Efficiency::Class(),this);
   }
}

//______________________________________________________________________________
void Efficiency::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Efficiency.
      TClass *R__cl = ::Efficiency::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Efficiency(void *p) {
      return  p ? new(p) ::Efficiency : new ::Efficiency;
   }
   static void *newArray_Efficiency(Long_t nElements, void *p) {
      return p ? new(p) ::Efficiency[nElements] : new ::Efficiency[nElements];
   }
   // Wrapper around operator delete
   static void delete_Efficiency(void *p) {
      delete ((::Efficiency*)p);
   }
   static void deleteArray_Efficiency(void *p) {
      delete [] ((::Efficiency*)p);
   }
   static void destruct_Efficiency(void *p) {
      typedef ::Efficiency current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Efficiency

//______________________________________________________________________________
void IdentificationMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class IdentificationMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(IdentificationMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(IdentificationMap::Class(),this);
   }
}

//______________________________________________________________________________
void IdentificationMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class IdentificationMap.
      TClass *R__cl = ::IdentificationMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEfficiencyMap", (void*)&fEfficiencyMap);
      R__insp.InspectMember("IdentificationMap::TMisIDMap", (void*)&fEfficiencyMap, "fEfficiencyMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_IdentificationMap(void *p) {
      return  p ? new(p) ::IdentificationMap : new ::IdentificationMap;
   }
   static void *newArray_IdentificationMap(Long_t nElements, void *p) {
      return p ? new(p) ::IdentificationMap[nElements] : new ::IdentificationMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_IdentificationMap(void *p) {
      delete ((::IdentificationMap*)p);
   }
   static void deleteArray_IdentificationMap(void *p) {
      delete [] ((::IdentificationMap*)p);
   }
   static void destruct_IdentificationMap(void *p) {
      typedef ::IdentificationMap current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::IdentificationMap

//______________________________________________________________________________
void EnergySmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class EnergySmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EnergySmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(EnergySmearing::Class(),this);
   }
}

//______________________________________________________________________________
void EnergySmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EnergySmearing.
      TClass *R__cl = ::EnergySmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EnergySmearing(void *p) {
      return  p ? new(p) ::EnergySmearing : new ::EnergySmearing;
   }
   static void *newArray_EnergySmearing(Long_t nElements, void *p) {
      return p ? new(p) ::EnergySmearing[nElements] : new ::EnergySmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_EnergySmearing(void *p) {
      delete ((::EnergySmearing*)p);
   }
   static void deleteArray_EnergySmearing(void *p) {
      delete [] ((::EnergySmearing*)p);
   }
   static void destruct_EnergySmearing(void *p) {
      typedef ::EnergySmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EnergySmearing

//______________________________________________________________________________
void MomentumSmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class MomentumSmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MomentumSmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(MomentumSmearing::Class(),this);
   }
}

//______________________________________________________________________________
void MomentumSmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MomentumSmearing.
      TClass *R__cl = ::MomentumSmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MomentumSmearing(void *p) {
      return  p ? new(p) ::MomentumSmearing : new ::MomentumSmearing;
   }
   static void *newArray_MomentumSmearing(Long_t nElements, void *p) {
      return p ? new(p) ::MomentumSmearing[nElements] : new ::MomentumSmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_MomentumSmearing(void *p) {
      delete ((::MomentumSmearing*)p);
   }
   static void deleteArray_MomentumSmearing(void *p) {
      delete [] ((::MomentumSmearing*)p);
   }
   static void destruct_MomentumSmearing(void *p) {
      typedef ::MomentumSmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MomentumSmearing

//______________________________________________________________________________
void ImpactParameterSmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class ImpactParameterSmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ImpactParameterSmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(ImpactParameterSmearing::Class(),this);
   }
}

//______________________________________________________________________________
void ImpactParameterSmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ImpactParameterSmearing.
      TClass *R__cl = ::ImpactParameterSmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ImpactParameterSmearing(void *p) {
      return  p ? new(p) ::ImpactParameterSmearing : new ::ImpactParameterSmearing;
   }
   static void *newArray_ImpactParameterSmearing(Long_t nElements, void *p) {
      return p ? new(p) ::ImpactParameterSmearing[nElements] : new ::ImpactParameterSmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_ImpactParameterSmearing(void *p) {
      delete ((::ImpactParameterSmearing*)p);
   }
   static void deleteArray_ImpactParameterSmearing(void *p) {
      delete [] ((::ImpactParameterSmearing*)p);
   }
   static void destruct_ImpactParameterSmearing(void *p) {
      typedef ::ImpactParameterSmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ImpactParameterSmearing

//______________________________________________________________________________
void TimeSmearing::Streamer(TBuffer &R__b)
{
   // Stream an object of class TimeSmearing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TimeSmearing::Class(),this);
   } else {
      R__b.WriteClassBuffer(TimeSmearing::Class(),this);
   }
}

//______________________________________________________________________________
void TimeSmearing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TimeSmearing.
      TClass *R__cl = ::TimeSmearing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeResolution", &fTimeResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TimeSmearing(void *p) {
      return  p ? new(p) ::TimeSmearing : new ::TimeSmearing;
   }
   static void *newArray_TimeSmearing(Long_t nElements, void *p) {
      return p ? new(p) ::TimeSmearing[nElements] : new ::TimeSmearing[nElements];
   }
   // Wrapper around operator delete
   static void delete_TimeSmearing(void *p) {
      delete ((::TimeSmearing*)p);
   }
   static void deleteArray_TimeSmearing(void *p) {
      delete [] ((::TimeSmearing*)p);
   }
   static void destruct_TimeSmearing(void *p) {
      typedef ::TimeSmearing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TimeSmearing

//______________________________________________________________________________
void SimpleCalorimeter::Streamer(TBuffer &R__b)
{
   // Stream an object of class SimpleCalorimeter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SimpleCalorimeter::Class(),this);
   } else {
      R__b.WriteClassBuffer(SimpleCalorimeter::Class(),this);
   }
}

//______________________________________________________________________________
void SimpleCalorimeter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SimpleCalorimeter.
      TClass *R__cl = ::SimpleCalorimeter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTower", &fTower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEta", &fTowerEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhi", &fTowerPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEdges[4]", fTowerEdges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEnergy", &fTowerEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackEnergy", &fTrackEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerTime", &fTowerTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackTime", &fTrackTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerTimeWeight", &fTowerTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackTimeWeight", &fTrackTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerTrackHits", &fTowerTrackHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhotonHits", &fTowerPhotonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergyMin", &fEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergySignificanceMin", &fEnergySignificanceMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearTowerCenter", &fSmearTowerCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFractionMap", (void*)&fFractionMap);
      R__insp.InspectMember("SimpleCalorimeter::TFractionMap", (void*)&fFractionMap, "fFractionMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinMap", (void*)&fBinMap);
      R__insp.InspectMember("SimpleCalorimeter::TBinMap", (void*)&fBinMap, "fBinMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaBins", (void*)&fEtaBins);
      R__insp.InspectMember("vector<Double_t>", (void*)&fEtaBins, "fEtaBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiBins", (void*)&fPhiBins);
      R__insp.InspectMember("vector<std::vector<Double_t>*>", (void*)&fPhiBins, "fPhiBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHits", (void*)&fTowerHits);
      R__insp.InspectMember("vector<Long64_t>", (void*)&fTowerHits, "fTowerHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerFractions", (void*)&fTowerFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTowerFractions, "fTowerFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackFractions", (void*)&fTrackFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTrackFractions, "fTrackFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fResolutionFormula", &fResolutionFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItParticleInputArray", &fItParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleInputArray", &fParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerOutputArray", &fTowerOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowTowerOutputArray", &fEFlowTowerOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerTrackArray", &fTowerTrackArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTowerTrackArray", &fItTowerTrackArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SimpleCalorimeter(void *p) {
      return  p ? new(p) ::SimpleCalorimeter : new ::SimpleCalorimeter;
   }
   static void *newArray_SimpleCalorimeter(Long_t nElements, void *p) {
      return p ? new(p) ::SimpleCalorimeter[nElements] : new ::SimpleCalorimeter[nElements];
   }
   // Wrapper around operator delete
   static void delete_SimpleCalorimeter(void *p) {
      delete ((::SimpleCalorimeter*)p);
   }
   static void deleteArray_SimpleCalorimeter(void *p) {
      delete [] ((::SimpleCalorimeter*)p);
   }
   static void destruct_SimpleCalorimeter(void *p) {
      typedef ::SimpleCalorimeter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SimpleCalorimeter

//______________________________________________________________________________
void Calorimeter::Streamer(TBuffer &R__b)
{
   // Stream an object of class Calorimeter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Calorimeter::Class(),this);
   } else {
      R__b.WriteClassBuffer(Calorimeter::Class(),this);
   }
}

//______________________________________________________________________________
void Calorimeter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Calorimeter.
      TClass *R__cl = ::Calorimeter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTower", &fTower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEta", &fTowerEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhi", &fTowerPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerEdges[4]", fTowerEdges);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalEnergy", &fTowerECalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalEnergy", &fTowerHCalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalEnergy", &fTrackECalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalEnergy", &fTrackHCalEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalTime", &fTowerECalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalTime", &fTowerHCalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalTime", &fTrackECalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalTime", &fTrackHCalTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalTimeWeight", &fTowerECalTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalTimeWeight", &fTowerHCalTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalTimeWeight", &fTrackECalTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalTimeWeight", &fTrackHCalTimeWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerTrackHits", &fTowerTrackHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerPhotonHits", &fTowerPhotonHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fECalEnergyMin", &fECalEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCalEnergyMin", &fHCalEnergyMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fECalEnergySignificanceMin", &fECalEnergySignificanceMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHCalEnergySignificanceMin", &fHCalEnergySignificanceMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSmearTowerCenter", &fSmearTowerCenter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFractionMap", (void*)&fFractionMap);
      R__insp.InspectMember("Calorimeter::TFractionMap", (void*)&fFractionMap, "fFractionMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinMap", (void*)&fBinMap);
      R__insp.InspectMember("Calorimeter::TBinMap", (void*)&fBinMap, "fBinMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaBins", (void*)&fEtaBins);
      R__insp.InspectMember("vector<Double_t>", (void*)&fEtaBins, "fEtaBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiBins", (void*)&fPhiBins);
      R__insp.InspectMember("vector<std::vector<Double_t>*>", (void*)&fPhiBins, "fPhiBins.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHits", (void*)&fTowerHits);
      R__insp.InspectMember("vector<Long64_t>", (void*)&fTowerHits, "fTowerHits.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerECalFractions", (void*)&fTowerECalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTowerECalFractions, "fTowerECalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTowerHCalFractions", (void*)&fTowerHCalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTowerHCalFractions, "fTowerHCalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackECalFractions", (void*)&fTrackECalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTrackECalFractions, "fTrackECalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackHCalFractions", (void*)&fTrackHCalFractions);
      R__insp.InspectMember("vector<Double_t>", (void*)&fTrackHCalFractions, "fTrackHCalFractions.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fECalResolutionFormula", &fECalResolutionFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHCalResolutionFormula", &fHCalResolutionFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItParticleInputArray", &fItParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleInputArray", &fParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerOutputArray", &fTowerOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPhotonOutputArray", &fPhotonOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowTrackOutputArray", &fEFlowTrackOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowPhotonOutputArray", &fEFlowPhotonOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEFlowNeutralHadronOutputArray", &fEFlowNeutralHadronOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTowerTrackArray", &fTowerTrackArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTowerTrackArray", &fItTowerTrackArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Calorimeter(void *p) {
      return  p ? new(p) ::Calorimeter : new ::Calorimeter;
   }
   static void *newArray_Calorimeter(Long_t nElements, void *p) {
      return p ? new(p) ::Calorimeter[nElements] : new ::Calorimeter[nElements];
   }
   // Wrapper around operator delete
   static void delete_Calorimeter(void *p) {
      delete ((::Calorimeter*)p);
   }
   static void deleteArray_Calorimeter(void *p) {
      delete [] ((::Calorimeter*)p);
   }
   static void destruct_Calorimeter(void *p) {
      typedef ::Calorimeter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Calorimeter

//______________________________________________________________________________
void Isolation::Streamer(TBuffer &R__b)
{
   // Stream an object of class Isolation.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Isolation::Class(),this);
   } else {
      R__b.WriteClassBuffer(Isolation::Class(),this);
   }
}

//______________________________________________________________________________
void Isolation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Isolation.
      TClass *R__cl = ::Isolation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaRMax", &fDeltaRMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTRatioMax", &fPTRatioMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTSumMax", &fPTSumMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsePTSum", &fUsePTSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItIsolationInputArray", &fItIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItCandidateInputArray", &fItCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItRhoInputArray", &fItRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIsolationInputArray", &fIsolationInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCandidateInputArray", &fCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRhoInputArray", &fRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Isolation(void *p) {
      return  p ? new(p) ::Isolation : new ::Isolation;
   }
   static void *newArray_Isolation(Long_t nElements, void *p) {
      return p ? new(p) ::Isolation[nElements] : new ::Isolation[nElements];
   }
   // Wrapper around operator delete
   static void delete_Isolation(void *p) {
      delete ((::Isolation*)p);
   }
   static void deleteArray_Isolation(void *p) {
      delete [] ((::Isolation*)p);
   }
   static void destruct_Isolation(void *p) {
      typedef ::Isolation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Isolation

//______________________________________________________________________________
void EnergyScale::Streamer(TBuffer &R__b)
{
   // Stream an object of class EnergyScale.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(EnergyScale::Class(),this);
   } else {
      R__b.WriteClassBuffer(EnergyScale::Class(),this);
   }
}

//______________________________________________________________________________
void EnergyScale::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class EnergyScale.
      TClass *R__cl = ::EnergyScale::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_EnergyScale(void *p) {
      return  p ? new(p) ::EnergyScale : new ::EnergyScale;
   }
   static void *newArray_EnergyScale(Long_t nElements, void *p) {
      return p ? new(p) ::EnergyScale[nElements] : new ::EnergyScale[nElements];
   }
   // Wrapper around operator delete
   static void delete_EnergyScale(void *p) {
      delete ((::EnergyScale*)p);
   }
   static void deleteArray_EnergyScale(void *p) {
      delete [] ((::EnergyScale*)p);
   }
   static void destruct_EnergyScale(void *p) {
      typedef ::EnergyScale current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::EnergyScale

//______________________________________________________________________________
void UniqueObjectFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class UniqueObjectFinder.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(UniqueObjectFinder::Class(),this);
   } else {
      R__b.WriteClassBuffer(UniqueObjectFinder::Class(),this);
   }
}

//______________________________________________________________________________
void UniqueObjectFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class UniqueObjectFinder.
      TClass *R__cl = ::UniqueObjectFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_UniqueObjectFinder(void *p) {
      return  p ? new(p) ::UniqueObjectFinder : new ::UniqueObjectFinder;
   }
   static void *newArray_UniqueObjectFinder(Long_t nElements, void *p) {
      return p ? new(p) ::UniqueObjectFinder[nElements] : new ::UniqueObjectFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_UniqueObjectFinder(void *p) {
      delete ((::UniqueObjectFinder*)p);
   }
   static void deleteArray_UniqueObjectFinder(void *p) {
      delete [] ((::UniqueObjectFinder*)p);
   }
   static void destruct_UniqueObjectFinder(void *p) {
      typedef ::UniqueObjectFinder current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::UniqueObjectFinder

//______________________________________________________________________________
void TrackCountingBTagging::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackCountingBTagging.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackCountingBTagging::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackCountingBTagging::Class(),this);
   }
}

//______________________________________________________________________________
void TrackCountingBTagging::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackCountingBTagging.
      TClass *R__cl = ::TrackCountingBTagging::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBitNumber", &fBitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPtMin", &fPtMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIPmax", &fIPmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigMin", &fSigMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNtracks", &fNtracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackCountingBTagging(void *p) {
      return  p ? new(p) ::TrackCountingBTagging : new ::TrackCountingBTagging;
   }
   static void *newArray_TrackCountingBTagging(Long_t nElements, void *p) {
      return p ? new(p) ::TrackCountingBTagging[nElements] : new ::TrackCountingBTagging[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackCountingBTagging(void *p) {
      delete ((::TrackCountingBTagging*)p);
   }
   static void deleteArray_TrackCountingBTagging(void *p) {
      delete [] ((::TrackCountingBTagging*)p);
   }
   static void destruct_TrackCountingBTagging(void *p) {
      typedef ::TrackCountingBTagging current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackCountingBTagging

//______________________________________________________________________________
void BTagging::Streamer(TBuffer &R__b)
{
   // Stream an object of class BTagging.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(BTagging::Class(),this);
   } else {
      R__b.WriteClassBuffer(BTagging::Class(),this);
   }
}

//______________________________________________________________________________
void BTagging::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class BTagging.
      TClass *R__cl = ::BTagging::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBitNumber", &fBitNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItPartonInputArray", &fItPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartonInputArray", &fPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_BTagging(void *p) {
      return  p ? new(p) ::BTagging : new ::BTagging;
   }
   static void *newArray_BTagging(Long_t nElements, void *p) {
      return p ? new(p) ::BTagging[nElements] : new ::BTagging[nElements];
   }
   // Wrapper around operator delete
   static void delete_BTagging(void *p) {
      delete ((::BTagging*)p);
   }
   static void deleteArray_BTagging(void *p) {
      delete [] ((::BTagging*)p);
   }
   static void destruct_BTagging(void *p) {
      typedef ::BTagging current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::BTagging

//______________________________________________________________________________
void TauTagging::Streamer(TBuffer &R__b)
{
   // Stream an object of class TauTagging.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TauTagging::Class(),this);
   } else {
      R__b.WriteClassBuffer(TauTagging::Class(),this);
   }
}

//______________________________________________________________________________
void TauTagging::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TauTagging.
      TClass *R__cl = ::TauTagging::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClassifier", &fClassifier);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFilter", &fFilter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItPartonInputArray", &fItPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleInputArray", &fParticleInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartonInputArray", &fPartonInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TauTagging(void *p) {
      return  p ? new(p) ::TauTagging : new ::TauTagging;
   }
   static void *newArray_TauTagging(Long_t nElements, void *p) {
      return p ? new(p) ::TauTagging[nElements] : new ::TauTagging[nElements];
   }
   // Wrapper around operator delete
   static void delete_TauTagging(void *p) {
      delete ((::TauTagging*)p);
   }
   static void deleteArray_TauTagging(void *p) {
      delete [] ((::TauTagging*)p);
   }
   static void destruct_TauTagging(void *p) {
      typedef ::TauTagging current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TauTagging

//______________________________________________________________________________
void TreeWriter::Streamer(TBuffer &R__b)
{
   // Stream an object of class TreeWriter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TreeWriter::Class(),this);
   } else {
      R__b.WriteClassBuffer(TreeWriter::Class(),this);
   }
}

//______________________________________________________________________________
void TreeWriter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TreeWriter.
      TClass *R__cl = ::TreeWriter::IsA();
      if (R__cl || R__insp.IsA()) { }
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TreeWriter(void *p) {
      return  p ? new(p) ::TreeWriter : new ::TreeWriter;
   }
   static void *newArray_TreeWriter(Long_t nElements, void *p) {
      return p ? new(p) ::TreeWriter[nElements] : new ::TreeWriter[nElements];
   }
   // Wrapper around operator delete
   static void delete_TreeWriter(void *p) {
      delete ((::TreeWriter*)p);
   }
   static void deleteArray_TreeWriter(void *p) {
      delete [] ((::TreeWriter*)p);
   }
   static void destruct_TreeWriter(void *p) {
      typedef ::TreeWriter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TreeWriter

//______________________________________________________________________________
void Merger::Streamer(TBuffer &R__b)
{
   // Stream an object of class Merger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Merger::Class(),this);
   } else {
      R__b.WriteClassBuffer(Merger::Class(),this);
   }
}

//______________________________________________________________________________
void Merger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Merger.
      TClass *R__cl = ::Merger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputList", (void*)&fInputList);
      R__insp.InspectMember("vector<TIterator*>", (void*)&fInputList, "fInputList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMomentumOutputArray", &fMomentumOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEnergyOutputArray", &fEnergyOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Merger(void *p) {
      return  p ? new(p) ::Merger : new ::Merger;
   }
   static void *newArray_Merger(Long_t nElements, void *p) {
      return p ? new(p) ::Merger[nElements] : new ::Merger[nElements];
   }
   // Wrapper around operator delete
   static void delete_Merger(void *p) {
      delete ((::Merger*)p);
   }
   static void deleteArray_Merger(void *p) {
      delete [] ((::Merger*)p);
   }
   static void destruct_Merger(void *p) {
      typedef ::Merger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Merger

//______________________________________________________________________________
void LeptonDressing::Streamer(TBuffer &R__b)
{
   // Stream an object of class LeptonDressing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LeptonDressing::Class(),this);
   } else {
      R__b.WriteClassBuffer(LeptonDressing::Class(),this);
   }
}

//______________________________________________________________________________
void LeptonDressing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LeptonDressing.
      TClass *R__cl = ::LeptonDressing::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaR", &fDeltaR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItDressingInputArray", &fItDressingInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItCandidateInputArray", &fItCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDressingInputArray", &fDressingInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCandidateInputArray", &fCandidateInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LeptonDressing(void *p) {
      return  p ? new(p) ::LeptonDressing : new ::LeptonDressing;
   }
   static void *newArray_LeptonDressing(Long_t nElements, void *p) {
      return p ? new(p) ::LeptonDressing[nElements] : new ::LeptonDressing[nElements];
   }
   // Wrapper around operator delete
   static void delete_LeptonDressing(void *p) {
      delete ((::LeptonDressing*)p);
   }
   static void deleteArray_LeptonDressing(void *p) {
      delete [] ((::LeptonDressing*)p);
   }
   static void destruct_LeptonDressing(void *p) {
      typedef ::LeptonDressing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::LeptonDressing

//______________________________________________________________________________
void PileUpMerger::Streamer(TBuffer &R__b)
{
   // Stream an object of class PileUpMerger.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PileUpMerger::Class(),this);
   } else {
      R__b.WriteClassBuffer(PileUpMerger::Class(),this);
   }
}

//______________________________________________________________________________
void PileUpMerger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PileUpMerger.
      TClass *R__cl = ::PileUpMerger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPileUpDistribution", &fPileUpDistribution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPileUp", &fMeanPileUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexSpread", &fZVertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTVertexSpread", &fTVertexSpread);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFunction", &fFunction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReader", &fReader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticleOutputArray", &fParticleOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVertexOutputArray", &fVertexOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PileUpMerger(void *p) {
      return  p ? new(p) ::PileUpMerger : new ::PileUpMerger;
   }
   static void *newArray_PileUpMerger(Long_t nElements, void *p) {
      return p ? new(p) ::PileUpMerger[nElements] : new ::PileUpMerger[nElements];
   }
   // Wrapper around operator delete
   static void delete_PileUpMerger(void *p) {
      delete ((::PileUpMerger*)p);
   }
   static void deleteArray_PileUpMerger(void *p) {
      delete [] ((::PileUpMerger*)p);
   }
   static void destruct_PileUpMerger(void *p) {
      typedef ::PileUpMerger current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PileUpMerger

//______________________________________________________________________________
void JetPileUpSubtractor::Streamer(TBuffer &R__b)
{
   // Stream an object of class JetPileUpSubtractor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(JetPileUpSubtractor::Class(),this);
   } else {
      R__b.WriteClassBuffer(JetPileUpSubtractor::Class(),this);
   }
}

//______________________________________________________________________________
void JetPileUpSubtractor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class JetPileUpSubtractor.
      TClass *R__cl = ::JetPileUpSubtractor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItRhoInputArray", &fItRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRhoInputArray", &fRhoInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_JetPileUpSubtractor(void *p) {
      return  p ? new(p) ::JetPileUpSubtractor : new ::JetPileUpSubtractor;
   }
   static void *newArray_JetPileUpSubtractor(Long_t nElements, void *p) {
      return p ? new(p) ::JetPileUpSubtractor[nElements] : new ::JetPileUpSubtractor[nElements];
   }
   // Wrapper around operator delete
   static void delete_JetPileUpSubtractor(void *p) {
      delete ((::JetPileUpSubtractor*)p);
   }
   static void deleteArray_JetPileUpSubtractor(void *p) {
      delete [] ((::JetPileUpSubtractor*)p);
   }
   static void destruct_JetPileUpSubtractor(void *p) {
      typedef ::JetPileUpSubtractor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::JetPileUpSubtractor

//______________________________________________________________________________
void TrackPileUpSubtractor::Streamer(TBuffer &R__b)
{
   // Stream an object of class TrackPileUpSubtractor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(TrackPileUpSubtractor::Class(),this);
   } else {
      R__b.WriteClassBuffer(TrackPileUpSubtractor::Class(),this);
   }
}

//______________________________________________________________________________
void TrackPileUpSubtractor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class TrackPileUpSubtractor.
      TClass *R__cl = ::TrackPileUpSubtractor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexResolution", &fZVertexResolution);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItVertexInputArray", &fItVertexInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVertexInputArray", &fVertexInputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_TrackPileUpSubtractor(void *p) {
      return  p ? new(p) ::TrackPileUpSubtractor : new ::TrackPileUpSubtractor;
   }
   static void *newArray_TrackPileUpSubtractor(Long_t nElements, void *p) {
      return p ? new(p) ::TrackPileUpSubtractor[nElements] : new ::TrackPileUpSubtractor[nElements];
   }
   // Wrapper around operator delete
   static void delete_TrackPileUpSubtractor(void *p) {
      delete ((::TrackPileUpSubtractor*)p);
   }
   static void deleteArray_TrackPileUpSubtractor(void *p) {
      delete [] ((::TrackPileUpSubtractor*)p);
   }
   static void destruct_TrackPileUpSubtractor(void *p) {
      typedef ::TrackPileUpSubtractor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::TrackPileUpSubtractor

//______________________________________________________________________________
void PileUpJetID::Streamer(TBuffer &R__b)
{
   // Stream an object of class PileUpJetID.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PileUpJetID::Class(),this);
   } else {
      R__b.WriteClassBuffer(PileUpJetID::Class(),this);
   }
}

//______________________________________________________________________________
void PileUpJetID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PileUpJetID.
      TClass *R__cl = ::PileUpJetID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameterR", &fParameterR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseConstituents", &fUseConstituents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAverageEachTower", &fAverageEachTower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItJetInputArray", &fItJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fJetInputArray", &fJetInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackInputArray", &fTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNeutralInputArray", &fNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItTrackInputArray", &fItTrackInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItNeutralInputArray", &fItNeutralInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItVertexInputArray", &fItVertexInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fVertexInputArray", &fVertexInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZVertexResolution", &fZVertexResolution);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PileUpJetID(void *p) {
      return  p ? new(p) ::PileUpJetID : new ::PileUpJetID;
   }
   static void *newArray_PileUpJetID(Long_t nElements, void *p) {
      return p ? new(p) ::PileUpJetID[nElements] : new ::PileUpJetID[nElements];
   }
   // Wrapper around operator delete
   static void delete_PileUpJetID(void *p) {
      delete ((::PileUpJetID*)p);
   }
   static void deleteArray_PileUpJetID(void *p) {
      delete [] ((::PileUpJetID*)p);
   }
   static void destruct_PileUpJetID(void *p) {
      typedef ::PileUpJetID current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PileUpJetID

//______________________________________________________________________________
void ConstituentFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class ConstituentFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ConstituentFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(ConstituentFilter::Class(),this);
   }
}

//______________________________________________________________________________
void ConstituentFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ConstituentFilter.
      TClass *R__cl = ::ConstituentFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fJetPTMin", &fJetPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputList", (void*)&fInputList);
      R__insp.InspectMember("vector<TIterator*>", (void*)&fInputList, "fInputList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInputMap", (void*)&fInputMap);
      R__insp.InspectMember("map<TIterator*,TObjArray*>", (void*)&fInputMap, "fInputMap.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ConstituentFilter(void *p) {
      return  p ? new(p) ::ConstituentFilter : new ::ConstituentFilter;
   }
   static void *newArray_ConstituentFilter(Long_t nElements, void *p) {
      return p ? new(p) ::ConstituentFilter[nElements] : new ::ConstituentFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_ConstituentFilter(void *p) {
      delete ((::ConstituentFilter*)p);
   }
   static void deleteArray_ConstituentFilter(void *p) {
      delete [] ((::ConstituentFilter*)p);
   }
   static void destruct_ConstituentFilter(void *p) {
      typedef ::ConstituentFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ConstituentFilter

//______________________________________________________________________________
void StatusPidFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class StatusPidFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(StatusPidFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(StatusPidFilter::Class(),this);
   }
}

//______________________________________________________________________________
void StatusPidFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class StatusPidFilter.
      TClass *R__cl = ::StatusPidFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTMin", &fPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_StatusPidFilter(void *p) {
      return  p ? new(p) ::StatusPidFilter : new ::StatusPidFilter;
   }
   static void *newArray_StatusPidFilter(Long_t nElements, void *p) {
      return p ? new(p) ::StatusPidFilter[nElements] : new ::StatusPidFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_StatusPidFilter(void *p) {
      delete ((::StatusPidFilter*)p);
   }
   static void deleteArray_StatusPidFilter(void *p) {
      delete [] ((::StatusPidFilter*)p);
   }
   static void destruct_StatusPidFilter(void *p) {
      typedef ::StatusPidFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::StatusPidFilter

//______________________________________________________________________________
void PdgCodeFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class PdgCodeFilter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(PdgCodeFilter::Class(),this);
   } else {
      R__b.WriteClassBuffer(PdgCodeFilter::Class(),this);
   }
}

//______________________________________________________________________________
void PdgCodeFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class PdgCodeFilter.
      TClass *R__cl = ::PdgCodeFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPTMin", &fPTMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdgCodes", (void*)&fPdgCodes);
      R__insp.InspectMember("vector<Int_t>", (void*)&fPdgCodes, "fPdgCodes.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_PdgCodeFilter(void *p) {
      return  p ? new(p) ::PdgCodeFilter : new ::PdgCodeFilter;
   }
   static void *newArray_PdgCodeFilter(Long_t nElements, void *p) {
      return p ? new(p) ::PdgCodeFilter[nElements] : new ::PdgCodeFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_PdgCodeFilter(void *p) {
      delete ((::PdgCodeFilter*)p);
   }
   static void deleteArray_PdgCodeFilter(void *p) {
      delete [] ((::PdgCodeFilter*)p);
   }
   static void destruct_PdgCodeFilter(void *p) {
      typedef ::PdgCodeFilter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::PdgCodeFilter

//______________________________________________________________________________
void Cloner::Streamer(TBuffer &R__b)
{
   // Stream an object of class Cloner.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Cloner::Class(),this);
   } else {
      R__b.WriteClassBuffer(Cloner::Class(),this);
   }
}

//______________________________________________________________________________
void Cloner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Cloner.
      TClass *R__cl = ::Cloner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Cloner(void *p) {
      return  p ? new(p) ::Cloner : new ::Cloner;
   }
   static void *newArray_Cloner(Long_t nElements, void *p) {
      return p ? new(p) ::Cloner[nElements] : new ::Cloner[nElements];
   }
   // Wrapper around operator delete
   static void delete_Cloner(void *p) {
      delete ((::Cloner*)p);
   }
   static void deleteArray_Cloner(void *p) {
      delete [] ((::Cloner*)p);
   }
   static void destruct_Cloner(void *p) {
      typedef ::Cloner current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Cloner

//______________________________________________________________________________
void Weighter::Streamer(TBuffer &R__b)
{
   // Stream an object of class Weighter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Weighter::Class(),this);
   } else {
      R__b.WriteClassBuffer(Weighter::Class(),this);
   }
}

//______________________________________________________________________________
void Weighter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Weighter.
      TClass *R__cl = ::Weighter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Weighter(void *p) {
      return  p ? new(p) ::Weighter : new ::Weighter;
   }
   static void *newArray_Weighter(Long_t nElements, void *p) {
      return p ? new(p) ::Weighter[nElements] : new ::Weighter[nElements];
   }
   // Wrapper around operator delete
   static void delete_Weighter(void *p) {
      delete ((::Weighter*)p);
   }
   static void deleteArray_Weighter(void *p) {
      delete [] ((::Weighter*)p);
   }
   static void destruct_Weighter(void *p) {
      typedef ::Weighter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Weighter

//______________________________________________________________________________
void Hector::Streamer(TBuffer &R__b)
{
   // Stream an object of class Hector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Hector::Class(),this);
   } else {
      R__b.WriteClassBuffer(Hector::Class(),this);
   }
}

//______________________________________________________________________________
void Hector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Hector.
      TClass *R__cl = ::Hector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirection", &fDirection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamLineLength", &fBeamLineLength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistance", &fDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffsetX", &fOffsetX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffsetS", &fOffsetS);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaE", &fSigmaE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaX", &fSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaY", &fSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaT", &fSigmaT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEtaMin", &fEtaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBeamLine", &fBeamLine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Hector(void *p) {
      return  p ? new(p) ::Hector : new ::Hector;
   }
   static void *newArray_Hector(Long_t nElements, void *p) {
      return p ? new(p) ::Hector[nElements] : new ::Hector[nElements];
   }
   // Wrapper around operator delete
   static void delete_Hector(void *p) {
      delete ((::Hector*)p);
   }
   static void deleteArray_Hector(void *p) {
      delete [] ((::Hector*)p);
   }
   static void destruct_Hector(void *p) {
      typedef ::Hector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Hector

//______________________________________________________________________________
void ExampleModule::Streamer(TBuffer &R__b)
{
   // Stream an object of class ExampleModule.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ExampleModule::Class(),this);
   } else {
      R__b.WriteClassBuffer(ExampleModule::Class(),this);
   }
}

//______________________________________________________________________________
void ExampleModule::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ExampleModule.
      TClass *R__cl = ::ExampleModule::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIntParam", &fIntParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDoubleParam", &fDoubleParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrayParam", (void*)&fArrayParam);
      R__insp.InspectMember("deque<Double_t>", (void*)&fArrayParam, "fArrayParam.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFormula", &fFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fItInputArray", &fItInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputArray", &fInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOutputArray", &fOutputArray);
      DelphesModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ExampleModule(void *p) {
      return  p ? new(p) ::ExampleModule : new ::ExampleModule;
   }
   static void *newArray_ExampleModule(Long_t nElements, void *p) {
      return p ? new(p) ::ExampleModule[nElements] : new ::ExampleModule[nElements];
   }
   // Wrapper around operator delete
   static void delete_ExampleModule(void *p) {
      delete ((::ExampleModule*)p);
   }
   static void deleteArray_ExampleModule(void *p) {
      delete [] ((::ExampleModule*)p);
   }
   static void destruct_ExampleModule(void *p) {
      typedef ::ExampleModule current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ExampleModule

namespace ROOT {
   void dequelEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void dequelEdoublegR_Dictionary();
   static void *new_dequelEdoublegR(void *p = 0);
   static void *newArray_dequelEdoublegR(Long_t size, void *p);
   static void delete_dequelEdoublegR(void *p);
   static void deleteArray_dequelEdoublegR(void *p);
   static void destruct_dequelEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const deque<double>*)
   {
      deque<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(deque<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("deque<double>", -2, "deque.dll", 0,
                  typeid(deque<double>), DefineBehavior(ptr, ptr),
                  0, &dequelEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(deque<double>) );
      instance.SetNew(&new_dequelEdoublegR);
      instance.SetNewArray(&newArray_dequelEdoublegR);
      instance.SetDelete(&delete_dequelEdoublegR);
      instance.SetDeleteArray(&deleteArray_dequelEdoublegR);
      instance.SetDestructor(&destruct_dequelEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< deque<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const deque<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void dequelEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const deque<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_dequelEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double> : new deque<double>;
   }
   static void *newArray_dequelEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) deque<double>[nElements] : new deque<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_dequelEdoublegR(void *p) {
      delete ((deque<double>*)p);
   }
   static void deleteArray_dequelEdoublegR(void *p) {
      delete [] ((deque<double>*)p);
   }
   static void destruct_dequelEdoublegR(void *p) {
      typedef deque<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class deque<double>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlELong64_tgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlELong64_tgR_Dictionary();
   static void *new_vectorlELong64_tgR(void *p = 0);
   static void *newArray_vectorlELong64_tgR(Long_t size, void *p);
   static void delete_vectorlELong64_tgR(void *p);
   static void deleteArray_vectorlELong64_tgR(void *p);
   static void destruct_vectorlELong64_tgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Long64_t>*)
   {
      vector<Long64_t> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Long64_t>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Long64_t>", -2, "vector.dll", 0,
                  typeid(vector<Long64_t>), DefineBehavior(ptr, ptr),
                  0, &vectorlELong64_tgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Long64_t>) );
      instance.SetNew(&new_vectorlELong64_tgR);
      instance.SetNewArray(&newArray_vectorlELong64_tgR);
      instance.SetDelete(&delete_vectorlELong64_tgR);
      instance.SetDeleteArray(&deleteArray_vectorlELong64_tgR);
      instance.SetDestructor(&destruct_vectorlELong64_tgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Long64_t> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Long64_t>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlELong64_tgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Long64_t>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlELong64_tgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t> : new vector<Long64_t>;
   }
   static void *newArray_vectorlELong64_tgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Long64_t>[nElements] : new vector<Long64_t>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlELong64_tgR(void *p) {
      delete ((vector<Long64_t>*)p);
   }
   static void deleteArray_vectorlELong64_tgR(void *p) {
      delete [] ((vector<Long64_t>*)p);
   }
   static void destruct_vectorlELong64_tgR(void *p) {
      typedef vector<Long64_t> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Long64_t>

namespace ROOT {
   void vectorlEvectorlEdoublegRmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEvectorlEdoublegRmUgR_Dictionary();
   static void *new_vectorlEvectorlEdoublegRmUgR(void *p = 0);
   static void *newArray_vectorlEvectorlEdoublegRmUgR(Long_t size, void *p);
   static void delete_vectorlEvectorlEdoublegRmUgR(void *p);
   static void deleteArray_vectorlEvectorlEdoublegRmUgR(void *p);
   static void destruct_vectorlEvectorlEdoublegRmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<vector<double>*>*)
   {
      vector<vector<double>*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<vector<double>*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<vector<double>*>", -2, "prec_stl/vector", 49,
                  typeid(vector<vector<double>*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEvectorlEdoublegRmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<vector<double>*>) );
      instance.SetNew(&new_vectorlEvectorlEdoublegRmUgR);
      instance.SetNewArray(&newArray_vectorlEvectorlEdoublegRmUgR);
      instance.SetDelete(&delete_vectorlEvectorlEdoublegRmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEvectorlEdoublegRmUgR);
      instance.SetDestructor(&destruct_vectorlEvectorlEdoublegRmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<vector<double>*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<vector<double>*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEvectorlEdoublegRmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<vector<double>*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEvectorlEdoublegRmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double>*> : new vector<vector<double>*>;
   }
   static void *newArray_vectorlEvectorlEdoublegRmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<vector<double>*>[nElements] : new vector<vector<double>*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEvectorlEdoublegRmUgR(void *p) {
      delete ((vector<vector<double>*>*)p);
   }
   static void deleteArray_vectorlEvectorlEdoublegRmUgR(void *p) {
      delete [] ((vector<vector<double>*>*)p);
   }
   static void destruct_vectorlEvectorlEdoublegRmUgR(void *p) {
      typedef vector<vector<double>*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<vector<double>*>

/********************************************************
* tmp/modules/ModulesDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableModulesDict();

extern "C" void G__set_cpp_environmentModulesDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__cpp_reset_tagtableModulesDict();
}
#include <new>
extern "C" int G__cpp_dllrevModulesDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Delphes */
static int G__ModulesDict_442_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Delphes* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Delphes((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Delphes((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Delphes[n];
       } else {
         p = new((void*) gvp) Delphes[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Delphes;
       } else {
         p = new((void*) gvp) Delphes;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->SetTreeWriter((ExRootTreeWriter*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Delphes*) G__getstructoffset())->GetFactory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Delphes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Delphes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Delphes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Delphes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Delphes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Delphes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_442_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Delphes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_442_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Delphes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Delphes(*(Delphes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Delphes G__TDelphes;
static int G__ModulesDict_442_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Delphes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Delphes*) (soff+(sizeof(Delphes)*i)))->~G__TDelphes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Delphes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Delphes*) (soff))->~G__TDelphes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_442_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Delphes* dest = (Delphes*) G__getstructoffset();
   *dest = *(Delphes*) libp->para[0].ref;
   const Delphes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AngularSmearing */
static int G__ModulesDict_444_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AngularSmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AngularSmearing[n];
     } else {
       p = new((void*) gvp) AngularSmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AngularSmearing;
     } else {
       p = new((void*) gvp) AngularSmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AngularSmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngularSmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AngularSmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AngularSmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AngularSmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngularSmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AngularSmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AngularSmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_444_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AngularSmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_444_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   AngularSmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new AngularSmearing(*(AngularSmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AngularSmearing G__TAngularSmearing;
static int G__ModulesDict_444_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AngularSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AngularSmearing*) (soff+(sizeof(AngularSmearing)*i)))->~G__TAngularSmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AngularSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AngularSmearing*) (soff))->~G__TAngularSmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ParticlePropagator */
static int G__ModulesDict_445_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ParticlePropagator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticlePropagator[n];
     } else {
       p = new((void*) gvp) ParticlePropagator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ParticlePropagator;
     } else {
       p = new((void*) gvp) ParticlePropagator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ParticlePropagator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ParticlePropagator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ParticlePropagator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ParticlePropagator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticlePropagator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ParticlePropagator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_445_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ParticlePropagator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_445_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ParticlePropagator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ParticlePropagator(*(ParticlePropagator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ParticlePropagator G__TParticlePropagator;
static int G__ModulesDict_445_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ParticlePropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ParticlePropagator*) (soff+(sizeof(ParticlePropagator)*i)))->~G__TParticlePropagator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ParticlePropagator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ParticlePropagator*) (soff))->~G__TParticlePropagator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Efficiency */
static int G__ModulesDict_446_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Efficiency* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Efficiency[n];
     } else {
       p = new((void*) gvp) Efficiency[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Efficiency;
     } else {
       p = new((void*) gvp) Efficiency;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Efficiency::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Efficiency::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Efficiency::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Efficiency*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Efficiency::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Efficiency::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_446_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Efficiency::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_446_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Efficiency* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Efficiency(*(Efficiency*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Efficiency G__TEfficiency;
static int G__ModulesDict_446_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Efficiency*) (soff+(sizeof(Efficiency)*i)))->~G__TEfficiency();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Efficiency*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Efficiency*) (soff))->~G__TEfficiency();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* IdentificationMap */
static int G__ModulesDict_447_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IdentificationMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IdentificationMap[n];
     } else {
       p = new((void*) gvp) IdentificationMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IdentificationMap;
     } else {
       p = new((void*) gvp) IdentificationMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) IdentificationMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IdentificationMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) IdentificationMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      IdentificationMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IdentificationMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IdentificationMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IdentificationMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IdentificationMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_447_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IdentificationMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_447_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   IdentificationMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new IdentificationMap(*(IdentificationMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef IdentificationMap G__TIdentificationMap;
static int G__ModulesDict_447_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (IdentificationMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((IdentificationMap*) (soff+(sizeof(IdentificationMap)*i)))->~G__TIdentificationMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (IdentificationMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((IdentificationMap*) (soff))->~G__TIdentificationMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EnergySmearing */
static int G__ModulesDict_455_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EnergySmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergySmearing[n];
     } else {
       p = new((void*) gvp) EnergySmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergySmearing;
     } else {
       p = new((void*) gvp) EnergySmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EnergySmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EnergySmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EnergySmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EnergySmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergySmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergySmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_455_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergySmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_455_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EnergySmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EnergySmearing(*(EnergySmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EnergySmearing G__TEnergySmearing;
static int G__ModulesDict_455_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EnergySmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EnergySmearing*) (soff+(sizeof(EnergySmearing)*i)))->~G__TEnergySmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EnergySmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EnergySmearing*) (soff))->~G__TEnergySmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* MomentumSmearing */
static int G__ModulesDict_456_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MomentumSmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MomentumSmearing[n];
     } else {
       p = new((void*) gvp) MomentumSmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MomentumSmearing;
     } else {
       p = new((void*) gvp) MomentumSmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MomentumSmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MomentumSmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MomentumSmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MomentumSmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MomentumSmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MomentumSmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_456_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MomentumSmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_456_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MomentumSmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MomentumSmearing(*(MomentumSmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MomentumSmearing G__TMomentumSmearing;
static int G__ModulesDict_456_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MomentumSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MomentumSmearing*) (soff+(sizeof(MomentumSmearing)*i)))->~G__TMomentumSmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MomentumSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MomentumSmearing*) (soff))->~G__TMomentumSmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ImpactParameterSmearing */
static int G__ModulesDict_457_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ImpactParameterSmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ImpactParameterSmearing[n];
     } else {
       p = new((void*) gvp) ImpactParameterSmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ImpactParameterSmearing;
     } else {
       p = new((void*) gvp) ImpactParameterSmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ImpactParameterSmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ImpactParameterSmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ImpactParameterSmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ImpactParameterSmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ImpactParameterSmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ImpactParameterSmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ImpactParameterSmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ImpactParameterSmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_457_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ImpactParameterSmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_457_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ImpactParameterSmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ImpactParameterSmearing(*(ImpactParameterSmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ImpactParameterSmearing G__TImpactParameterSmearing;
static int G__ModulesDict_457_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ImpactParameterSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ImpactParameterSmearing*) (soff+(sizeof(ImpactParameterSmearing)*i)))->~G__TImpactParameterSmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ImpactParameterSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ImpactParameterSmearing*) (soff))->~G__TImpactParameterSmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TimeSmearing */
static int G__ModulesDict_458_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TimeSmearing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeSmearing[n];
     } else {
       p = new((void*) gvp) TimeSmearing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TimeSmearing;
     } else {
       p = new((void*) gvp) TimeSmearing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TimeSmearing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeSmearing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TimeSmearing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TimeSmearing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TimeSmearing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeSmearing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TimeSmearing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TimeSmearing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_458_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TimeSmearing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_458_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TimeSmearing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TimeSmearing(*(TimeSmearing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TimeSmearing G__TTimeSmearing;
static int G__ModulesDict_458_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TimeSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TimeSmearing*) (soff+(sizeof(TimeSmearing)*i)))->~G__TTimeSmearing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TimeSmearing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TimeSmearing*) (soff))->~G__TTimeSmearing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SimpleCalorimeter */
static int G__ModulesDict_515_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SimpleCalorimeter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SimpleCalorimeter[n];
     } else {
       p = new((void*) gvp) SimpleCalorimeter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SimpleCalorimeter;
     } else {
       p = new((void*) gvp) SimpleCalorimeter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SimpleCalorimeter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleCalorimeter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SimpleCalorimeter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SimpleCalorimeter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SimpleCalorimeter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleCalorimeter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SimpleCalorimeter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SimpleCalorimeter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_515_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SimpleCalorimeter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_515_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SimpleCalorimeter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SimpleCalorimeter(*(SimpleCalorimeter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SimpleCalorimeter G__TSimpleCalorimeter;
static int G__ModulesDict_515_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SimpleCalorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SimpleCalorimeter*) (soff+(sizeof(SimpleCalorimeter)*i)))->~G__TSimpleCalorimeter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SimpleCalorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SimpleCalorimeter*) (soff))->~G__TSimpleCalorimeter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Calorimeter */
static int G__ModulesDict_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Calorimeter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Calorimeter[n];
     } else {
       p = new((void*) gvp) Calorimeter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Calorimeter;
     } else {
       p = new((void*) gvp) Calorimeter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Calorimeter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Calorimeter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Calorimeter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Calorimeter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Calorimeter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Calorimeter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_536_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Calorimeter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Calorimeter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Calorimeter(*(Calorimeter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Calorimeter G__TCalorimeter;
static int G__ModulesDict_536_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Calorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Calorimeter*) (soff+(sizeof(Calorimeter)*i)))->~G__TCalorimeter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Calorimeter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Calorimeter*) (soff))->~G__TCalorimeter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Isolation */
static int G__ModulesDict_546_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isolation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isolation[n];
     } else {
       p = new((void*) gvp) Isolation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isolation;
     } else {
       p = new((void*) gvp) Isolation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Isolation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Isolation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Isolation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isolation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isolation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isolation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_546_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isolation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_546_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Isolation* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Isolation(*(Isolation*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Isolation G__TIsolation;
static int G__ModulesDict_546_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Isolation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Isolation*) (soff+(sizeof(Isolation)*i)))->~G__TIsolation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Isolation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Isolation*) (soff))->~G__TIsolation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* EnergyScale */
static int G__ModulesDict_547_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   EnergyScale* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergyScale[n];
     } else {
       p = new((void*) gvp) EnergyScale[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new EnergyScale;
     } else {
       p = new((void*) gvp) EnergyScale;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) EnergyScale::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) EnergyScale::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      EnergyScale::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((EnergyScale*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergyScale::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) EnergyScale::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_547_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) EnergyScale::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_547_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   EnergyScale* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new EnergyScale(*(EnergyScale*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef EnergyScale G__TEnergyScale;
static int G__ModulesDict_547_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (EnergyScale*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((EnergyScale*) (soff+(sizeof(EnergyScale)*i)))->~G__TEnergyScale();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (EnergyScale*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((EnergyScale*) (soff))->~G__TEnergyScale();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* UniqueObjectFinder */
static int G__ModulesDict_548_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UniqueObjectFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UniqueObjectFinder[n];
     } else {
       p = new((void*) gvp) UniqueObjectFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new UniqueObjectFinder;
     } else {
       p = new((void*) gvp) UniqueObjectFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) UniqueObjectFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) UniqueObjectFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      UniqueObjectFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((UniqueObjectFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UniqueObjectFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) UniqueObjectFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_548_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) UniqueObjectFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_548_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   UniqueObjectFinder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new UniqueObjectFinder(*(UniqueObjectFinder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef UniqueObjectFinder G__TUniqueObjectFinder;
static int G__ModulesDict_548_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (UniqueObjectFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((UniqueObjectFinder*) (soff+(sizeof(UniqueObjectFinder)*i)))->~G__TUniqueObjectFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (UniqueObjectFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((UniqueObjectFinder*) (soff))->~G__TUniqueObjectFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_548_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   UniqueObjectFinder* dest = (UniqueObjectFinder*) G__getstructoffset();
   *dest = *(UniqueObjectFinder*) libp->para[0].ref;
   const UniqueObjectFinder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackCountingBTagging */
static int G__ModulesDict_558_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackCountingBTagging* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCountingBTagging[n];
     } else {
       p = new((void*) gvp) TrackCountingBTagging[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackCountingBTagging;
     } else {
       p = new((void*) gvp) TrackCountingBTagging;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackCountingBTagging::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCountingBTagging::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackCountingBTagging::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackCountingBTagging::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackCountingBTagging*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCountingBTagging::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCountingBTagging::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackCountingBTagging::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_558_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackCountingBTagging::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_558_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackCountingBTagging* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackCountingBTagging(*(TrackCountingBTagging*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackCountingBTagging G__TTrackCountingBTagging;
static int G__ModulesDict_558_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackCountingBTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackCountingBTagging*) (soff+(sizeof(TrackCountingBTagging)*i)))->~G__TTrackCountingBTagging();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackCountingBTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackCountingBTagging*) (soff))->~G__TTrackCountingBTagging();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* BTagging */
static int G__ModulesDict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   BTagging* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BTagging[n];
     } else {
       p = new((void*) gvp) BTagging[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new BTagging;
     } else {
       p = new((void*) gvp) BTagging;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) BTagging::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) BTagging::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      BTagging::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((BTagging*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BTagging::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) BTagging::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_560_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) BTagging::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_560_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   BTagging* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new BTagging(*(BTagging*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef BTagging G__TBTagging;
static int G__ModulesDict_560_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (BTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((BTagging*) (soff+(sizeof(BTagging)*i)))->~G__TBTagging();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (BTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((BTagging*) (soff))->~G__TBTagging();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TauTagging */
static int G__ModulesDict_562_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TauTagging* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauTagging[n];
     } else {
       p = new((void*) gvp) TauTagging[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TauTagging;
     } else {
       p = new((void*) gvp) TauTagging;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TauTagging::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TauTagging::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TauTagging::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TauTagging*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauTagging::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TauTagging::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TauTagging::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_562_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TauTagging* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TauTagging(*(TauTagging*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TauTagging G__TTauTagging;
static int G__ModulesDict_562_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TauTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TauTagging*) (soff+(sizeof(TauTagging)*i)))->~G__TTauTagging();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TauTagging*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TauTagging*) (soff))->~G__TTauTagging();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TreeWriter */
static int G__ModulesDict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeWriter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeWriter[n];
     } else {
       p = new((void*) gvp) TreeWriter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TreeWriter;
     } else {
       p = new((void*) gvp) TreeWriter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TreeWriter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TreeWriter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TreeWriter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TreeWriter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeWriter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TreeWriter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_564_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TreeWriter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_564_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TreeWriter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TreeWriter(*(TreeWriter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TreeWriter G__TTreeWriter;
static int G__ModulesDict_564_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TreeWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TreeWriter*) (soff+(sizeof(TreeWriter)*i)))->~G__TTreeWriter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TreeWriter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TreeWriter*) (soff))->~G__TTreeWriter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_564_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TreeWriter* dest = (TreeWriter*) G__getstructoffset();
   *dest = *(TreeWriter*) libp->para[0].ref;
   const TreeWriter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Merger */
static int G__ModulesDict_565_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Merger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Merger[n];
     } else {
       p = new((void*) gvp) Merger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Merger;
     } else {
       p = new((void*) gvp) Merger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Merger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Merger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Merger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Merger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Merger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Merger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_565_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Merger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_565_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Merger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Merger(*(Merger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Merger G__TMerger;
static int G__ModulesDict_565_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Merger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Merger*) (soff+(sizeof(Merger)*i)))->~G__TMerger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Merger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Merger*) (soff))->~G__TMerger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_565_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Merger* dest = (Merger*) G__getstructoffset();
   *dest = *(Merger*) libp->para[0].ref;
   const Merger& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LeptonDressing */
static int G__ModulesDict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LeptonDressing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LeptonDressing[n];
     } else {
       p = new((void*) gvp) LeptonDressing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LeptonDressing;
     } else {
       p = new((void*) gvp) LeptonDressing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LeptonDressing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LeptonDressing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LeptonDressing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LeptonDressing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LeptonDressing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LeptonDressing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LeptonDressing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LeptonDressing* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LeptonDressing(*(LeptonDressing*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LeptonDressing G__TLeptonDressing;
static int G__ModulesDict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LeptonDressing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LeptonDressing*) (soff+(sizeof(LeptonDressing)*i)))->~G__TLeptonDressing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LeptonDressing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LeptonDressing*) (soff))->~G__TLeptonDressing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PileUpMerger */
static int G__ModulesDict_573_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PileUpMerger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpMerger[n];
     } else {
       p = new((void*) gvp) PileUpMerger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpMerger;
     } else {
       p = new((void*) gvp) PileUpMerger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PileUpMerger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PileUpMerger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PileUpMerger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PileUpMerger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpMerger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpMerger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_573_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpMerger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_573_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PileUpMerger* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PileUpMerger(*(PileUpMerger*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PileUpMerger G__TPileUpMerger;
static int G__ModulesDict_573_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PileUpMerger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PileUpMerger*) (soff+(sizeof(PileUpMerger)*i)))->~G__TPileUpMerger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PileUpMerger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PileUpMerger*) (soff))->~G__TPileUpMerger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* JetPileUpSubtractor */
static int G__ModulesDict_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   JetPileUpSubtractor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPileUpSubtractor[n];
     } else {
       p = new((void*) gvp) JetPileUpSubtractor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new JetPileUpSubtractor;
     } else {
       p = new((void*) gvp) JetPileUpSubtractor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) JetPileUpSubtractor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) JetPileUpSubtractor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      JetPileUpSubtractor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((JetPileUpSubtractor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetPileUpSubtractor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) JetPileUpSubtractor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) JetPileUpSubtractor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_592_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   JetPileUpSubtractor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new JetPileUpSubtractor(*(JetPileUpSubtractor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef JetPileUpSubtractor G__TJetPileUpSubtractor;
static int G__ModulesDict_592_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (JetPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((JetPileUpSubtractor*) (soff+(sizeof(JetPileUpSubtractor)*i)))->~G__TJetPileUpSubtractor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (JetPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((JetPileUpSubtractor*) (soff))->~G__TJetPileUpSubtractor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* TrackPileUpSubtractor */
static int G__ModulesDict_593_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   TrackPileUpSubtractor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPileUpSubtractor[n];
     } else {
       p = new((void*) gvp) TrackPileUpSubtractor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new TrackPileUpSubtractor;
     } else {
       p = new((void*) gvp) TrackPileUpSubtractor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) TrackPileUpSubtractor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) TrackPileUpSubtractor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      TrackPileUpSubtractor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((TrackPileUpSubtractor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPileUpSubtractor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) TrackPileUpSubtractor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_593_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) TrackPileUpSubtractor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_593_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   TrackPileUpSubtractor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new TrackPileUpSubtractor(*(TrackPileUpSubtractor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef TrackPileUpSubtractor G__TTrackPileUpSubtractor;
static int G__ModulesDict_593_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (TrackPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((TrackPileUpSubtractor*) (soff+(sizeof(TrackPileUpSubtractor)*i)))->~G__TTrackPileUpSubtractor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (TrackPileUpSubtractor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((TrackPileUpSubtractor*) (soff))->~G__TTrackPileUpSubtractor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PileUpJetID */
static int G__ModulesDict_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PileUpJetID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpJetID[n];
     } else {
       p = new((void*) gvp) PileUpJetID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PileUpJetID;
     } else {
       p = new((void*) gvp) PileUpJetID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PileUpJetID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PileUpJetID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PileUpJetID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PileUpJetID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpJetID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PileUpJetID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PileUpJetID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PileUpJetID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PileUpJetID(*(PileUpJetID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PileUpJetID G__TPileUpJetID;
static int G__ModulesDict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PileUpJetID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PileUpJetID*) (soff+(sizeof(PileUpJetID)*i)))->~G__TPileUpJetID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PileUpJetID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PileUpJetID*) (soff))->~G__TPileUpJetID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ConstituentFilter */
static int G__ModulesDict_595_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ConstituentFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ConstituentFilter[n];
     } else {
       p = new((void*) gvp) ConstituentFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ConstituentFilter;
     } else {
       p = new((void*) gvp) ConstituentFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ConstituentFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ConstituentFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ConstituentFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ConstituentFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ConstituentFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ConstituentFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_595_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ConstituentFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_595_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ConstituentFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ConstituentFilter(*(ConstituentFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ConstituentFilter G__TConstituentFilter;
static int G__ModulesDict_595_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ConstituentFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ConstituentFilter*) (soff+(sizeof(ConstituentFilter)*i)))->~G__TConstituentFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ConstituentFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ConstituentFilter*) (soff))->~G__TConstituentFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ModulesDict_595_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ConstituentFilter* dest = (ConstituentFilter*) G__getstructoffset();
   *dest = *(ConstituentFilter*) libp->para[0].ref;
   const ConstituentFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* StatusPidFilter */
static int G__ModulesDict_596_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   StatusPidFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StatusPidFilter[n];
     } else {
       p = new((void*) gvp) StatusPidFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new StatusPidFilter;
     } else {
       p = new((void*) gvp) StatusPidFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) StatusPidFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) StatusPidFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      StatusPidFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((StatusPidFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StatusPidFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) StatusPidFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) StatusPidFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_596_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   StatusPidFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new StatusPidFilter(*(StatusPidFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef StatusPidFilter G__TStatusPidFilter;
static int G__ModulesDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (StatusPidFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((StatusPidFilter*) (soff+(sizeof(StatusPidFilter)*i)))->~G__TStatusPidFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (StatusPidFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((StatusPidFilter*) (soff))->~G__TStatusPidFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* PdgCodeFilter */
static int G__ModulesDict_597_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   PdgCodeFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PdgCodeFilter[n];
     } else {
       p = new((void*) gvp) PdgCodeFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new PdgCodeFilter;
     } else {
       p = new((void*) gvp) PdgCodeFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) PdgCodeFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PdgCodeFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) PdgCodeFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      PdgCodeFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((PdgCodeFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PdgCodeFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PdgCodeFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) PdgCodeFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_597_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) PdgCodeFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   PdgCodeFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new PdgCodeFilter(*(PdgCodeFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef PdgCodeFilter G__TPdgCodeFilter;
static int G__ModulesDict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (PdgCodeFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((PdgCodeFilter*) (soff+(sizeof(PdgCodeFilter)*i)))->~G__TPdgCodeFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (PdgCodeFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((PdgCodeFilter*) (soff))->~G__TPdgCodeFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Cloner */
static int G__ModulesDict_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Cloner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cloner[n];
     } else {
       p = new((void*) gvp) Cloner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Cloner;
     } else {
       p = new((void*) gvp) Cloner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Cloner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Cloner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Cloner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Cloner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cloner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Cloner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_601_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Cloner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_601_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Cloner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Cloner(*(Cloner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Cloner G__TCloner;
static int G__ModulesDict_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Cloner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Cloner*) (soff+(sizeof(Cloner)*i)))->~G__TCloner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Cloner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Cloner*) (soff))->~G__TCloner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Weighter */
static int G__ModulesDict_602_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Weighter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weighter[n];
     } else {
       p = new((void*) gvp) Weighter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Weighter;
     } else {
       p = new((void*) gvp) Weighter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Weighter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Weighter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Weighter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Weighter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weighter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Weighter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_602_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Weighter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_602_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Weighter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Weighter(*(Weighter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Weighter G__TWeighter;
static int G__ModulesDict_602_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Weighter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Weighter*) (soff+(sizeof(Weighter)*i)))->~G__TWeighter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Weighter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Weighter*) (soff))->~G__TWeighter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Hector */
static int G__ModulesDict_604_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Hector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hector[n];
     } else {
       p = new((void*) gvp) Hector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Hector;
     } else {
       p = new((void*) gvp) Hector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Hector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Hector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Hector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Hector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Hector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Hector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Hector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Hector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Hector(*(Hector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_Hector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Hector G__THector;
static int G__ModulesDict_604_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Hector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Hector*) (soff+(sizeof(Hector)*i)))->~G__THector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Hector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Hector*) (soff))->~G__THector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* ExampleModule */
static int G__ModulesDict_605_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ExampleModule* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExampleModule[n];
     } else {
       p = new((void*) gvp) ExampleModule[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ExampleModule;
     } else {
       p = new((void*) gvp) ExampleModule;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ExampleModule::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ExampleModule::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ExampleModule::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ExampleModule*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExampleModule::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ExampleModule::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ModulesDict_605_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ExampleModule::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ModulesDict_605_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   ExampleModule* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new ExampleModule(*(ExampleModule*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ExampleModule G__TExampleModule;
static int G__ModulesDict_605_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ExampleModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ExampleModule*) (soff+(sizeof(ExampleModule)*i)))->~G__TExampleModule();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ExampleModule*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ExampleModule*) (soff))->~G__TExampleModule();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Delphes */

/* AngularSmearing */

/* ParticlePropagator */

/* Efficiency */

/* IdentificationMap */

/* EnergySmearing */

/* MomentumSmearing */

/* ImpactParameterSmearing */

/* TimeSmearing */

/* SimpleCalorimeter */

/* Calorimeter */

/* Isolation */

/* EnergyScale */

/* UniqueObjectFinder */

/* TrackCountingBTagging */

/* BTagging */

/* TauTagging */

/* TreeWriter */

/* Merger */

/* LeptonDressing */

/* PileUpMerger */

/* JetPileUpSubtractor */

/* TrackPileUpSubtractor */

/* PileUpJetID */

/* ConstituentFilter */

/* StatusPidFilter */

/* PdgCodeFilter */

/* Cloner */

/* Weighter */

/* Hector */

/* ExampleModule */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncModulesDict {
 public:
  G__Sizep2memfuncModulesDict(): p(&G__Sizep2memfuncModulesDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncModulesDict::*p)();
};

size_t G__get_sizep2memfuncModulesDict()
{
  G__Sizep2memfuncModulesDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceModulesDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Delphes))) {
     Delphes *G__Lderived;
     G__Lderived=(Delphes*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing))) {
     AngularSmearing *G__Lderived;
     G__Lderived=(AngularSmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator))) {
     ParticlePropagator *G__Lderived;
     G__Lderived=(ParticlePropagator*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency))) {
     Efficiency *G__Lderived;
     G__Lderived=(Efficiency*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap))) {
     IdentificationMap *G__Lderived;
     G__Lderived=(IdentificationMap*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing))) {
     EnergySmearing *G__Lderived;
     G__Lderived=(EnergySmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing))) {
     MomentumSmearing *G__Lderived;
     G__Lderived=(MomentumSmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing))) {
     ImpactParameterSmearing *G__Lderived;
     G__Lderived=(ImpactParameterSmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing))) {
     TimeSmearing *G__Lderived;
     G__Lderived=(TimeSmearing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter))) {
     SimpleCalorimeter *G__Lderived;
     G__Lderived=(SimpleCalorimeter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter))) {
     Calorimeter *G__Lderived;
     G__Lderived=(Calorimeter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Isolation))) {
     Isolation *G__Lderived;
     G__Lderived=(Isolation*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale))) {
     EnergyScale *G__Lderived;
     G__Lderived=(EnergyScale*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder))) {
     UniqueObjectFinder *G__Lderived;
     G__Lderived=(UniqueObjectFinder*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging))) {
     TrackCountingBTagging *G__Lderived;
     G__Lderived=(TrackCountingBTagging*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_BTagging))) {
     BTagging *G__Lderived;
     G__Lderived=(BTagging*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging))) {
     TauTagging *G__Lderived;
     G__Lderived=(TauTagging*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter))) {
     TreeWriter *G__Lderived;
     G__Lderived=(TreeWriter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Merger))) {
     Merger *G__Lderived;
     G__Lderived=(Merger*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing))) {
     LeptonDressing *G__Lderived;
     G__Lderived=(LeptonDressing*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger))) {
     PileUpMerger *G__Lderived;
     G__Lderived=(PileUpMerger*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor))) {
     JetPileUpSubtractor *G__Lderived;
     G__Lderived=(JetPileUpSubtractor*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor))) {
     TrackPileUpSubtractor *G__Lderived;
     G__Lderived=(TrackPileUpSubtractor*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID))) {
     PileUpJetID *G__Lderived;
     G__Lderived=(PileUpJetID*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter))) {
     ConstituentFilter *G__Lderived;
     G__Lderived=(ConstituentFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter))) {
     StatusPidFilter *G__Lderived;
     G__Lderived=(StatusPidFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter))) {
     PdgCodeFilter *G__Lderived;
     G__Lderived=(PdgCodeFilter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Cloner))) {
     Cloner *G__Lderived;
     G__Lderived=(Cloner*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Weighter))) {
     Weighter *G__Lderived;
     G__Lderived=(Weighter*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_Hector))) {
     Hector *G__Lderived;
     G__Lderived=(Hector*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule))) {
     ExampleModule *G__Lderived;
     G__Lderived=(ExampleModule*)0x1000;
     {
       DelphesModule *G__Lpbase=(DelphesModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_DelphesModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       ExRootTask *G__Lpbase=(ExRootTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_ExRootTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TTask *G__Lpbase=(TTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule),G__get_linked_tagnum(&G__ModulesDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableModulesDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,DelphesFormula*>",117,G__get_linked_tagnum(&G__ModulesDictLN_pairlEintcODelphesFormulamUgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<Int_t,std::pair<Int_t,DelphesFormula*> >",117,G__get_linked_tagnum(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<int,pair<int,DelphesFormula*> >",117,G__get_linked_tagnum(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("multimap<int,pair<int,DelphesFormula*>,less<int> >",117,G__get_linked_tagnum(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMisIDMap",117,G__get_linked_tagnum(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap));
   G__setnewtype(-1,"!",0);
   G__search_typename2("map<Long64_t,Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,double>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,double,less<long long> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TFractionMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("set<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Double_t,std::set<Double_t> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,set<double,less<double>,allocator<double> > >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<double,set<double,less<double>,allocator<double> >,less<double> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TBinMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("vector<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<Double_t>*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<Double_t>*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<double,allocator<double> >*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Long64_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Long64_t,std::pair<Double_t,Double_t> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,pair<double,double> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<long long,pair<double,double>,less<long long> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TFractionMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("TBinMap",117,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),0,G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__setnewtype(-1,"!",0);
   G__search_typename2("map<TIterator*,TObjArray*>",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TIterator*,TObjArray*,less<TIterator*> >",117,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TIterator*>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ModulesDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("deque<Double_t>",117,G__get_linked_tagnum(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Delphes */
static void G__setup_memvarDelphes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   { Delphes *p; p=(Delphes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFactory),-1,-1,4,"fFactory=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AngularSmearing */
static void G__setup_memvarAngularSmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing));
   { AngularSmearing *p; p=(AngularSmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormulaEta=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormulaPhi=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ParticlePropagator */
static void G__setup_memvarParticlePropagator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   { ParticlePropagator *p; p=(ParticlePropagator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRadius=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fRadius2=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHalfLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fChargedHadronOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fElectronOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fMuonOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Efficiency */
static void G__setup_memvarEfficiency(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   { Efficiency *p; p=(Efficiency*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* IdentificationMap */
static void G__setup_memvarIdentificationMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap));
   { IdentificationMap *p; p=(IdentificationMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR),G__defined_typename("TMisIDMap"),-1,4,"fEfficiencyMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EnergySmearing */
static void G__setup_memvarEnergySmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   { EnergySmearing *p; p=(EnergySmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* MomentumSmearing */
static void G__setup_memvarMomentumSmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   { MomentumSmearing *p; p=(MomentumSmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ImpactParameterSmearing */
static void G__setup_memvarImpactParameterSmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing));
   { ImpactParameterSmearing *p; p=(ImpactParameterSmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TimeSmearing */
static void G__setup_memvarTimeSmearing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing));
   { TimeSmearing *p; p=(TimeSmearing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTimeResolution=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SimpleCalorimeter */
static void G__setup_memvarSimpleCalorimeter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   { SimpleCalorimeter *p; p=(SimpleCalorimeter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_Candidate),-1,-1,4,"fTower=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEdges[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerTrackHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerPhotonHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEnergySignificanceMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSmearTowerCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR),G__defined_typename("TFractionMap"),-1,4,"fFractionMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),G__defined_typename("TBinMap"),-1,4,"fBinMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fEtaBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),G__defined_typename("vector<std::vector<Double_t>*>"),-1,4,"fPhiBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),G__defined_typename("vector<Long64_t>"),-1,4,"fTowerHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTowerFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTrackFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fResolutionFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowTowerOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Calorimeter */
static void G__setup_memvarCalorimeter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   { Calorimeter *p; p=(Calorimeter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_Candidate),-1,-1,4,"fTower=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerEdges[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerECalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerHCalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackECalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackHCalEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerECalTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerHCalTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackECalTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackHCalTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerECalTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTowerHCalTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackECalTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTrackHCalTimeWeight=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerTrackHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTowerPhotonHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fECalEnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHCalEnergyMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fECalEnergySignificanceMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fHCalEnergySignificanceMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSmearTowerCenter=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR),G__defined_typename("TFractionMap"),-1,4,"fFractionMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR),G__defined_typename("TBinMap"),-1,4,"fBinMap=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fEtaBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR),G__defined_typename("vector<std::vector<Double_t>*>"),-1,4,"fPhiBins=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR),G__defined_typename("vector<Long64_t>"),-1,4,"fTowerHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTowerECalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTowerHCalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTrackECalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<Double_t>"),-1,4,"fTrackHCalFractions=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fECalResolutionFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fHCalResolutionFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPhotonOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowTrackOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowPhotonOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEFlowNeutralHadronOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTowerTrackArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Isolation */
static void G__setup_memvarIsolation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   { Isolation *p; p=(Isolation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaRMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTRatioMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTSumMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsePTSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_IsolationClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fIsolationInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* EnergyScale */
static void G__setup_memvarEnergyScale(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   { EnergyScale *p; p=(EnergyScale*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* UniqueObjectFinder */
static void G__setup_memvarUniqueObjectFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   { UniqueObjectFinder *p; p=(UniqueObjectFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackCountingBTagging */
static void G__setup_memvarTrackCountingBTagging(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging));
   { TrackCountingBTagging *p; p=(TrackCountingBTagging*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBitNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPtMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fIPmax=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNtracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* BTagging */
static void G__setup_memvarBTagging(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   { BTagging *p; p=(BTagging*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fBitNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_BTaggingPartonClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TauTagging */
static void G__setup_memvarTauTagging(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   { TauTagging *p; p=(TauTagging*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TauTaggingPartonClassifier),-1,-1,4,"fClassifier=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_ExRootFilter),-1,-1,4,"fFilter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fPartonInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TreeWriter */
static void G__setup_memvarTreeWriter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   { TreeWriter *p; p=(TreeWriter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Merger */
static void G__setup_memvarMerger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   { Merger *p; p=(Merger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),G__defined_typename("vector<TIterator*>"),-1,4,"fInputList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fMomentumOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fEnergyOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LeptonDressing */
static void G__setup_memvarLeptonDressing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   { LeptonDressing *p; p=(LeptonDressing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDeltaR=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItDressingInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fDressingInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fCandidateInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PileUpMerger */
static void G__setup_memvarPileUpMerger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   { PileUpMerger *p; p=(PileUpMerger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPileUpDistribution=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fMeanPileUp=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fTVertexSpread=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesTF2),-1,-1,4,"fFunction=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesPileUpReader),-1,-1,4,"fReader=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fParticleOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fVertexOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* JetPileUpSubtractor */
static void G__setup_memvarJetPileUpSubtractor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   { JetPileUpSubtractor *p; p=(JetPileUpSubtractor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fRhoInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* TrackPileUpSubtractor */
static void G__setup_memvarTrackPileUpSubtractor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   { TrackPileUpSubtractor *p; p=(TrackPileUpSubtractor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexResolution=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fItVertexInputArray)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,1,"fItVertexInputArray=",0,"!");
   G__memvar_setup((void*)((long)(&p->fVertexInputArray)-(long)(p)),85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,1,"fVertexInputArray=",0,"!");
   }
   G__tag_memvar_reset();
}


   /* PileUpJetID */
static void G__setup_memvarPileUpJetID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   { PileUpJetID *p; p=(PileUpJetID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fParameterR=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUseConstituents=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fAverageEachTower=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fJetInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fNeutralInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItTrackInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItNeutralInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItVertexInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fVertexInputArray=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fZVertexResolution=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ConstituentFilter */
static void G__setup_memvarConstituentFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   { ConstituentFilter *p; p=(ConstituentFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fJetPTMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR),G__defined_typename("vector<TIterator*>"),-1,4,"fInputList=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR),G__defined_typename("map<TIterator*,TObjArray*>"),-1,4,"fInputMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* StatusPidFilter */
static void G__setup_memvarStatusPidFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   { StatusPidFilter *p; p=(StatusPidFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTMin=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* PdgCodeFilter */
static void G__setup_memvarPdgCodeFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter));
   { PdgCodeFilter *p; p=(PdgCodeFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPTMin=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"fPdgCodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Cloner */
static void G__setup_memvarCloner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   { Cloner *p; p=(Cloner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Weighter */
static void G__setup_memvarWeighter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   { Weighter *p; p=(Weighter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Hector */
static void G__setup_memvarHector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector));
   { Hector *p; p=(Hector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDirection=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fBeamLineLength=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDistance=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOffsetX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fOffsetS=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaE=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaX=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaY=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fSigmaT=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEtaMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_H_BeamLine),-1,-1,4,"fBeamLine=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* ExampleModule */
static void G__setup_memvarExampleModule(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   { ExampleModule *p; p=(ExampleModule*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIntParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fDoubleParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("deque<Double_t>"),-1,4,"fArrayParam=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_DelphesFormula),-1,-1,4,"fFormula=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TIterator),-1,-1,4,"fItInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,1,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fInputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TObjArray),-1,-1,4,"fOutputArray=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ModulesDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarModulesDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncDelphes(void) {
   /* Delphes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Delphes));
   G__memfunc_setup("Delphes",709,G__ModulesDict_442_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 0, 1, 1, 1, 0, "C - - 10 '\"Delphes\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTreeWriter",1337,G__ModulesDict_442_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ExRootTreeWriter' - 0 - treeWriter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFactory",1016,G__ModulesDict_442_0_3, 85, G__get_linked_tagnum(&G__ModulesDictLN_DelphesFactory), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__ModulesDict_442_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_442_0_8, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Delphes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_442_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_442_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Delphes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_442_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Delphes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_442_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_442_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_442_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Delphes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_442_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Delphes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_442_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Delphes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Delphes", 709, G__ModulesDict_442_0_20, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 0, 1, 1, 1, 0, "u 'Delphes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Delphes", 835, G__ModulesDict_442_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_442_0_22, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_Delphes), -1, 1, 1, 1, 1, 0, "u 'Delphes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAngularSmearing(void) {
   /* AngularSmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing));
   G__memfunc_setup("AngularSmearing",1536,G__ModulesDict_444_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_444_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AngularSmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_444_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngularSmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_444_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AngularSmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_444_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AngularSmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_444_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_444_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngularSmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_444_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AngularSmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_444_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AngularSmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_444_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AngularSmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("AngularSmearing", 1536, G__ModulesDict_444_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_AngularSmearing), -1, 0, 1, 1, 1, 0, "u 'AngularSmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AngularSmearing", 1662, G__ModulesDict_444_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncParticlePropagator(void) {
   /* ParticlePropagator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator));
   G__memfunc_setup("ParticlePropagator",1875,G__ModulesDict_445_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_445_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ParticlePropagator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_445_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_445_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ParticlePropagator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_445_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ParticlePropagator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_445_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_445_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_445_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticlePropagator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_445_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ParticlePropagator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_445_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ParticlePropagator::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ParticlePropagator", 1875, G__ModulesDict_445_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ParticlePropagator), -1, 0, 1, 1, 1, 0, "u 'ParticlePropagator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ParticlePropagator", 2001, G__ModulesDict_445_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEfficiency(void) {
   /* Efficiency */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Efficiency));
   G__memfunc_setup("Efficiency",1013,G__ModulesDict_446_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Efficiency), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_446_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Efficiency::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_446_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_446_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Efficiency::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_446_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Efficiency::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_446_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_446_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_446_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Efficiency::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_446_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Efficiency::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_446_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Efficiency::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Efficiency", 1013, G__ModulesDict_446_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Efficiency), -1, 0, 1, 1, 1, 0, "u 'Efficiency' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Efficiency", 1139, G__ModulesDict_446_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIdentificationMap(void) {
   /* IdentificationMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap));
   G__memfunc_setup("IdentificationMap",1736,G__ModulesDict_447_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_447_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&IdentificationMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_447_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IdentificationMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_447_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&IdentificationMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_447_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&IdentificationMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_447_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_447_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IdentificationMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_447_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IdentificationMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_447_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IdentificationMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_447_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IdentificationMap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("IdentificationMap", 1736, G__ModulesDict_447_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_IdentificationMap), -1, 0, 1, 1, 1, 0, "u 'IdentificationMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~IdentificationMap", 1862, G__ModulesDict_447_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEnergySmearing(void) {
   /* EnergySmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing));
   G__memfunc_setup("EnergySmearing",1440,G__ModulesDict_455_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_455_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EnergySmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_455_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_455_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EnergySmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_455_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EnergySmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_455_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_455_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_455_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergySmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_455_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergySmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_455_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergySmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EnergySmearing", 1440, G__ModulesDict_455_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_EnergySmearing), -1, 0, 1, 1, 1, 0, "u 'EnergySmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EnergySmearing", 1566, G__ModulesDict_455_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMomentumSmearing(void) {
   /* MomentumSmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing));
   G__memfunc_setup("MomentumSmearing",1672,G__ModulesDict_456_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_456_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MomentumSmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_456_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_456_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MomentumSmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_456_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MomentumSmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_456_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_456_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_456_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MomentumSmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_456_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MomentumSmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_456_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MomentumSmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MomentumSmearing", 1672, G__ModulesDict_456_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_MomentumSmearing), -1, 0, 1, 1, 1, 0, "u 'MomentumSmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MomentumSmearing", 1798, G__ModulesDict_456_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncImpactParameterSmearing(void) {
   /* ImpactParameterSmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing));
   G__memfunc_setup("ImpactParameterSmearing",2357,G__ModulesDict_457_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_457_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ImpactParameterSmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_457_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ImpactParameterSmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_457_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ImpactParameterSmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_457_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ImpactParameterSmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_457_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_457_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ImpactParameterSmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_457_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ImpactParameterSmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_457_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ImpactParameterSmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_457_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ImpactParameterSmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ImpactParameterSmearing", 2357, G__ModulesDict_457_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__ModulesDictLN_ImpactParameterSmearing), -1, 0, 1, 1, 1, 0, "u 'ImpactParameterSmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ImpactParameterSmearing", 2483, G__ModulesDict_457_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTimeSmearing(void) {
   /* TimeSmearing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing));
   G__memfunc_setup("TimeSmearing",1221,G__ModulesDict_458_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_458_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TimeSmearing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_458_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeSmearing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_458_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TimeSmearing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_458_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TimeSmearing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_458_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_458_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeSmearing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_458_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TimeSmearing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_458_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TimeSmearing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_458_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TimeSmearing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TimeSmearing", 1221, G__ModulesDict_458_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_TimeSmearing), -1, 0, 1, 1, 1, 0, "u 'TimeSmearing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TimeSmearing", 1347, G__ModulesDict_458_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSimpleCalorimeter(void) {
   /* SimpleCalorimeter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter));
   G__memfunc_setup("SimpleCalorimeter",1761,G__ModulesDict_515_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeTower",1347,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogNormal",907,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_515_0_7, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SimpleCalorimeter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_515_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleCalorimeter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_515_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SimpleCalorimeter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_515_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SimpleCalorimeter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_515_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_515_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleCalorimeter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_515_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SimpleCalorimeter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_515_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SimpleCalorimeter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_515_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SimpleCalorimeter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("SimpleCalorimeter", 1761, G__ModulesDict_515_0_19, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_SimpleCalorimeter), -1, 0, 1, 1, 1, 0, "u 'SimpleCalorimeter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SimpleCalorimeter", 1887, G__ModulesDict_515_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalorimeter(void) {
   /* Calorimeter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter));
   G__memfunc_setup("Calorimeter",1143,G__ModulesDict_536_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FinalizeTower",1347,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LogNormal",907,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - mean d - 'Double_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_536_0_7, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Calorimeter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_536_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_536_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Calorimeter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_536_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Calorimeter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_536_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_536_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_536_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Calorimeter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_536_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Calorimeter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_536_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Calorimeter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Calorimeter", 1143, G__ModulesDict_536_0_19, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Calorimeter), -1, 0, 1, 1, 1, 0, "u 'Calorimeter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Calorimeter", 1269, G__ModulesDict_536_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIsolation(void) {
   /* Isolation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Isolation));
   G__memfunc_setup("Isolation",946,G__ModulesDict_546_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Isolation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_546_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Isolation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_546_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_546_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Isolation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_546_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Isolation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_546_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_546_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_546_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isolation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_546_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isolation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_546_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isolation::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Isolation", 946, G__ModulesDict_546_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Isolation), -1, 0, 1, 1, 1, 0, "u 'Isolation' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Isolation", 1072, G__ModulesDict_546_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncEnergyScale(void) {
   /* EnergyScale */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale));
   G__memfunc_setup("EnergyScale",1106,G__ModulesDict_547_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_547_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&EnergyScale::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_547_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_547_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&EnergyScale::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_547_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&EnergyScale::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_547_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_547_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_547_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergyScale::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_547_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&EnergyScale::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_547_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&EnergyScale::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("EnergyScale", 1106, G__ModulesDict_547_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_EnergyScale), -1, 0, 1, 1, 1, 0, "u 'EnergyScale' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~EnergyScale", 1232, G__ModulesDict_547_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncUniqueObjectFinder(void) {
   /* UniqueObjectFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder));
   G__memfunc_setup("UniqueObjectFinder",1830,G__ModulesDict_548_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Unique",631,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"U 'Candidate' - 0 - candidate u 'map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >::iterator' - 0 - itInputMap", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_548_0_6, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&UniqueObjectFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_548_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_548_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&UniqueObjectFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_548_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&UniqueObjectFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_548_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_548_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_548_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UniqueObjectFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_548_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&UniqueObjectFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_548_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&UniqueObjectFinder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("UniqueObjectFinder", 1830, G__ModulesDict_548_0_18, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 0, 1, 1, 1, 0, "u 'UniqueObjectFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~UniqueObjectFinder", 1956, G__ModulesDict_548_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_548_0_20, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_UniqueObjectFinder), -1, 1, 1, 1, 1, 0, "u 'UniqueObjectFinder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackCountingBTagging(void) {
   /* TrackCountingBTagging */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging));
   G__memfunc_setup("TrackCountingBTagging",2111,G__ModulesDict_558_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_558_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackCountingBTagging::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_558_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCountingBTagging::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_558_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackCountingBTagging::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_558_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackCountingBTagging::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_558_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_558_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCountingBTagging::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_558_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCountingBTagging::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_558_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackCountingBTagging::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_558_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackCountingBTagging::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCountingBTagging", 2111, G__ModulesDict_558_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__ModulesDictLN_TrackCountingBTagging), -1, 0, 1, 1, 1, 0, "u 'TrackCountingBTagging' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCountingBTagging", 2237, G__ModulesDict_558_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncBTagging(void) {
   /* BTagging */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_BTagging));
   G__memfunc_setup("BTagging",771,G__ModulesDict_560_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_BTagging), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_560_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&BTagging::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_560_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_560_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&BTagging::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_560_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&BTagging::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_560_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_560_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_560_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BTagging::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_560_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&BTagging::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_560_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&BTagging::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("BTagging", 771, G__ModulesDict_560_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_BTagging), -1, 0, 1, 1, 1, 0, "u 'BTagging' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~BTagging", 897, G__ModulesDict_560_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTauTagging(void) {
   /* TauTagging */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TauTagging));
   G__memfunc_setup("TauTagging",1003,G__ModulesDict_562_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TauTagging), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_562_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TauTagging::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_562_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_562_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TauTagging::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_562_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TauTagging::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_562_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_562_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_562_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauTagging::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_562_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TauTagging::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_562_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TauTagging::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TauTagging", 1003, G__ModulesDict_562_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_TauTagging), -1, 0, 1, 1, 1, 0, "u 'TauTagging' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TauTagging", 1129, G__ModulesDict_562_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTreeWriter(void) {
   /* TreeWriter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter));
   G__memfunc_setup("TreeWriter",1037,G__ModulesDict_564_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FillParticles",1326,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'Candidate' - 0 - candidate U 'TRefArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessParticles",1670,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessVertices",1572,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTracks",1351,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTowers",1379,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessPhotons",1482,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessElectrons",1678,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessMuons",1265,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessTauJets",1439,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessJets",1141,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessMissingET",1618,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessScalarHT",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessRho",1032,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessWeight",1351,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ProcessHectorHit",1641,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'ExRootTreeBranch' - 0 - branch U 'TObjArray' - 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ModulesDict_564_0_20, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TreeWriter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_564_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_564_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TreeWriter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_564_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TreeWriter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_564_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_564_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_564_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeWriter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_564_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TreeWriter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_564_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TreeWriter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TreeWriter", 1037, G__ModulesDict_564_0_32, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 0, 1, 1, 1, 0, "u 'TreeWriter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TreeWriter", 1163, G__ModulesDict_564_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_564_0_34, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_TreeWriter), -1, 1, 1, 1, 1, 0, "u 'TreeWriter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncMerger(void) {
   /* Merger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Merger));
   G__memfunc_setup("Merger",610,G__ModulesDict_565_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_565_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Merger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_565_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_565_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Merger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_565_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Merger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_565_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_565_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_565_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Merger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_565_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Merger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_565_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Merger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Merger", 610, G__ModulesDict_565_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 0, 1, 1, 1, 0, "u 'Merger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Merger", 736, G__ModulesDict_565_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_565_0_19, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_Merger), -1, 1, 1, 1, 1, 0, "u 'Merger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLeptonDressing(void) {
   /* LeptonDressing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing));
   G__memfunc_setup("LeptonDressing",1457,G__ModulesDict_570_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_570_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LeptonDressing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_570_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_570_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LeptonDressing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_570_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LeptonDressing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_570_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_570_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_570_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LeptonDressing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_570_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LeptonDressing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_570_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LeptonDressing::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LeptonDressing", 1457, G__ModulesDict_570_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_LeptonDressing), -1, 0, 1, 1, 1, 0, "u 'LeptonDressing' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LeptonDressing", 1583, G__ModulesDict_570_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPileUpMerger(void) {
   /* PileUpMerger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger));
   G__memfunc_setup("PileUpMerger",1201,G__ModulesDict_573_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_573_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PileUpMerger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_573_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_573_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PileUpMerger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_573_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PileUpMerger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_573_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_573_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_573_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpMerger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_573_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpMerger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_573_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpMerger::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PileUpMerger", 1201, G__ModulesDict_573_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_PileUpMerger), -1, 0, 1, 1, 1, 0, "u 'PileUpMerger' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PileUpMerger", 1327, G__ModulesDict_573_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncJetPileUpSubtractor(void) {
   /* JetPileUpSubtractor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor));
   G__memfunc_setup("JetPileUpSubtractor",1947,G__ModulesDict_592_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_592_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&JetPileUpSubtractor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_592_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_592_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&JetPileUpSubtractor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_592_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&JetPileUpSubtractor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_592_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_592_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_592_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetPileUpSubtractor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_592_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&JetPileUpSubtractor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_592_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&JetPileUpSubtractor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("JetPileUpSubtractor", 1947, G__ModulesDict_592_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_JetPileUpSubtractor), -1, 0, 1, 1, 1, 0, "u 'JetPileUpSubtractor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~JetPileUpSubtractor", 2073, G__ModulesDict_592_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrackPileUpSubtractor(void) {
   /* TrackPileUpSubtractor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor));
   G__memfunc_setup("TrackPileUpSubtractor",2157,G__ModulesDict_593_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_593_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&TrackPileUpSubtractor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_593_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_593_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&TrackPileUpSubtractor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_593_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&TrackPileUpSubtractor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_593_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_593_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_593_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPileUpSubtractor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_593_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&TrackPileUpSubtractor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_593_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&TrackPileUpSubtractor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("TrackPileUpSubtractor", 2157, G__ModulesDict_593_0_17, (int) ('i'), 
G__get_linked_tagnum(&G__ModulesDictLN_TrackPileUpSubtractor), -1, 0, 1, 1, 1, 0, "u 'TrackPileUpSubtractor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackPileUpSubtractor", 2283, G__ModulesDict_593_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPileUpJetID(void) {
   /* PileUpJetID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID));
   G__memfunc_setup("PileUpJetID",1023,G__ModulesDict_594_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_594_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PileUpJetID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_594_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_594_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PileUpJetID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_594_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PileUpJetID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_594_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_594_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_594_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpJetID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_594_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PileUpJetID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_594_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PileUpJetID::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PileUpJetID", 1023, G__ModulesDict_594_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_PileUpJetID), -1, 0, 1, 1, 1, 0, "u 'PileUpJetID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PileUpJetID", 1149, G__ModulesDict_594_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncConstituentFilter(void) {
   /* ConstituentFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter));
   G__memfunc_setup("ConstituentFilter",1798,G__ModulesDict_595_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_595_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ConstituentFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_595_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_595_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ConstituentFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_595_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ConstituentFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_595_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_595_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_595_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ConstituentFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_595_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ConstituentFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_595_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ConstituentFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ConstituentFilter", 1798, G__ModulesDict_595_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 0, 1, 1, 1, 0, "u 'ConstituentFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ConstituentFilter", 1924, G__ModulesDict_595_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ModulesDict_595_0_19, (int) ('u'), G__get_linked_tagnum(&G__ModulesDictLN_ConstituentFilter), -1, 1, 1, 1, 1, 0, "u 'ConstituentFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncStatusPidFilter(void) {
   /* StatusPidFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter));
   G__memfunc_setup("StatusPidFilter",1543,G__ModulesDict_596_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_596_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&StatusPidFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_596_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_596_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&StatusPidFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_596_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&StatusPidFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_596_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_596_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_596_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StatusPidFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_596_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&StatusPidFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_596_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&StatusPidFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("StatusPidFilter", 1543, G__ModulesDict_596_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_StatusPidFilter), -1, 0, 1, 1, 1, 0, "u 'StatusPidFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StatusPidFilter", 1669, G__ModulesDict_596_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncPdgCodeFilter(void) {
   /* PdgCodeFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter));
   G__memfunc_setup("PdgCodeFilter",1276,G__ModulesDict_597_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_597_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&PdgCodeFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_597_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PdgCodeFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_597_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&PdgCodeFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_597_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&PdgCodeFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_597_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_597_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PdgCodeFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_597_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PdgCodeFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_597_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&PdgCodeFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_597_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&PdgCodeFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("PdgCodeFilter", 1276, G__ModulesDict_597_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_PdgCodeFilter), -1, 0, 1, 1, 1, 0, "u 'PdgCodeFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PdgCodeFilter", 1402, G__ModulesDict_597_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCloner(void) {
   /* Cloner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Cloner));
   G__memfunc_setup("Cloner",611,G__ModulesDict_601_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Cloner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_601_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Cloner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_601_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_601_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Cloner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_601_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Cloner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_601_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_601_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_601_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cloner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_601_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Cloner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_601_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Cloner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Cloner", 611, G__ModulesDict_601_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Cloner), -1, 0, 1, 1, 1, 0, "u 'Cloner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Cloner", 737, G__ModulesDict_601_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncWeighter(void) {
   /* Weighter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Weighter));
   G__memfunc_setup("Weighter",831,G__ModulesDict_602_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Weighter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_602_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Weighter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_602_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_602_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Weighter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_602_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Weighter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_602_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_602_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_602_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weighter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_602_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Weighter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_602_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Weighter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Weighter", 831, G__ModulesDict_602_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Weighter), -1, 0, 1, 1, 1, 0, "u 'Weighter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Weighter", 957, G__ModulesDict_602_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHector(void) {
   /* Hector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_Hector));
   G__memfunc_setup("Hector",613,G__ModulesDict_604_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_Hector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_604_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Hector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_604_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_604_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Hector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_604_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Hector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_604_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_604_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_604_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_604_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Hector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_604_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Hector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Hector", 613, G__ModulesDict_604_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_Hector), -1, 0, 1, 1, 1, 0, "u 'Hector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Hector", 739, G__ModulesDict_604_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncExampleModule(void) {
   /* ExampleModule */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule));
   G__memfunc_setup("ExampleModule",1330,G__ModulesDict_605_0_1, 105, G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Process",735,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Finish",609,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ModulesDict_605_0_5, 85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ExampleModule::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ModulesDict_605_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ModulesDict_605_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ExampleModule::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ModulesDict_605_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ExampleModule::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ModulesDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ModulesDict_605_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ModulesDict_605_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ModulesDict_605_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExampleModule::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ModulesDict_605_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ExampleModule::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ModulesDict_605_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ExampleModule::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("ExampleModule", 1330, G__ModulesDict_605_0_17, (int) ('i'), G__get_linked_tagnum(&G__ModulesDictLN_ExampleModule), -1, 0, 1, 1, 1, 0, "u 'ExampleModule' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ExampleModule", 1456, G__ModulesDict_605_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncModulesDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalModulesDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcModulesDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ModulesDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR = { "vector<long long,allocator<long long> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ModulesDictLN_TTask = { "TTask" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTask = { "ExRootTask" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTreeBranch = { "ExRootTreeBranch" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootTreeWriter = { "ExRootTreeWriter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesFactory = { "DelphesFactory" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesModule = { "DelphesModule" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Delphes = { "Delphes" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesFormula = { "DelphesFormula" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_AngularSmearing = { "AngularSmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ParticlePropagator = { "ParticlePropagator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Efficiency = { "Efficiency" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_IdentificationMap = { "IdentificationMap" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_pairlEintcODelphesFormulamUgR = { "pair<int,DelphesFormula*>" , 115 , -1 };
G__linked_taginfo G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR = { "multimap<int,pair<int,DelphesFormula*>,less<int>,allocator<pair<const int,pair<int,DelphesFormula*> > > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_EnergySmearing = { "EnergySmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_MomentumSmearing = { "MomentumSmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ImpactParameterSmearing = { "ImpactParameterSmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TimeSmearing = { "TimeSmearing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR = { "set<double,less<double>,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Candidate = { "Candidate" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_SimpleCalorimeter = { "SimpleCalorimeter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR = { "map<long long,double,less<long long>,allocator<pair<const long long,double> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR = { "map<double,set<double,less<double>,allocator<double> >,less<double>,allocator<pair<const double,set<double,less<double>,allocator<double> > > > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR = { "vector<vector<double,allocator<double> >*,allocator<vector<double,allocator<double> >*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<double,allocator<double> >*,allocator<vector<double,allocator<double> >*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Calorimeter = { "Calorimeter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR = { "map<long long,pair<double,double>,less<long long>,allocator<pair<const long long,pair<double,double> > > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExRootFilter = { "ExRootFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_IsolationClassifier = { "IsolationClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Isolation = { "Isolation" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_EnergyScale = { "EnergyScale" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_UniqueObjectFinder = { "UniqueObjectFinder" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR = { "map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator = { "map<TIterator*,TObjArray*,less<TIterator*>,allocator<pair<TIterator* const,TObjArray*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TrackCountingBTagging = { "TrackCountingBTagging" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_BTaggingPartonClassifier = { "BTaggingPartonClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_BTagging = { "BTagging" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TauTaggingPartonClassifier = { "TauTaggingPartonClassifier" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TauTagging = { "TauTagging" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TRefArray = { "TRefArray" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TreeWriter = { "TreeWriter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Merger = { "Merger" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR = { "vector<TIterator*,allocator<TIterator*> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TIterator*,allocator<TIterator*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_LeptonDressing = { "LeptonDressing" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesPileUpReader = { "DelphesPileUpReader" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_DelphesTF2 = { "DelphesTF2" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_PileUpMerger = { "PileUpMerger" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR = { "deque<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_JetPileUpSubtractor = { "JetPileUpSubtractor" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_TrackPileUpSubtractor = { "TrackPileUpSubtractor" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_PileUpJetID = { "PileUpJetID" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ConstituentFilter = { "ConstituentFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_StatusPidFilter = { "StatusPidFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_PdgCodeFilter = { "PdgCodeFilter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Cloner = { "Cloner" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Weighter = { "Weighter" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_H_BeamLine = { "H_BeamLine" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_Hector = { "Hector" , 99 , -1 };
G__linked_taginfo G__ModulesDictLN_ExampleModule = { "ExampleModule" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableModulesDict() {
  G__ModulesDictLN_TClass.tagnum = -1 ;
  G__ModulesDictLN_TBuffer.tagnum = -1 ;
  G__ModulesDictLN_TMemberInspector.tagnum = -1 ;
  G__ModulesDictLN_TObject.tagnum = -1 ;
  G__ModulesDictLN_TNamed.tagnum = -1 ;
  G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_TObjArray.tagnum = -1 ;
  G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_TIterator.tagnum = -1 ;
  G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ModulesDictLN_TTask.tagnum = -1 ;
  G__ModulesDictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_ExRootTask.tagnum = -1 ;
  G__ModulesDictLN_ExRootTreeBranch.tagnum = -1 ;
  G__ModulesDictLN_ExRootTreeWriter.tagnum = -1 ;
  G__ModulesDictLN_DelphesFactory.tagnum = -1 ;
  G__ModulesDictLN_DelphesModule.tagnum = -1 ;
  G__ModulesDictLN_Delphes.tagnum = -1 ;
  G__ModulesDictLN_DelphesFormula.tagnum = -1 ;
  G__ModulesDictLN_AngularSmearing.tagnum = -1 ;
  G__ModulesDictLN_ParticlePropagator.tagnum = -1 ;
  G__ModulesDictLN_Efficiency.tagnum = -1 ;
  G__ModulesDictLN_IdentificationMap.tagnum = -1 ;
  G__ModulesDictLN_pairlEintcODelphesFormulamUgR.tagnum = -1 ;
  G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_EnergySmearing.tagnum = -1 ;
  G__ModulesDictLN_MomentumSmearing.tagnum = -1 ;
  G__ModulesDictLN_ImpactParameterSmearing.tagnum = -1 ;
  G__ModulesDictLN_TimeSmearing.tagnum = -1 ;
  G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_Candidate.tagnum = -1 ;
  G__ModulesDictLN_SimpleCalorimeter.tagnum = -1 ;
  G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_Calorimeter.tagnum = -1 ;
  G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_ExRootFilter.tagnum = -1 ;
  G__ModulesDictLN_IsolationClassifier.tagnum = -1 ;
  G__ModulesDictLN_Isolation.tagnum = -1 ;
  G__ModulesDictLN_EnergyScale.tagnum = -1 ;
  G__ModulesDictLN_UniqueObjectFinder.tagnum = -1 ;
  G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__ModulesDictLN_TrackCountingBTagging.tagnum = -1 ;
  G__ModulesDictLN_BTaggingPartonClassifier.tagnum = -1 ;
  G__ModulesDictLN_BTagging.tagnum = -1 ;
  G__ModulesDictLN_TauTaggingPartonClassifier.tagnum = -1 ;
  G__ModulesDictLN_TauTagging.tagnum = -1 ;
  G__ModulesDictLN_TRefArray.tagnum = -1 ;
  G__ModulesDictLN_TreeWriter.tagnum = -1 ;
  G__ModulesDictLN_Merger.tagnum = -1 ;
  G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_LeptonDressing.tagnum = -1 ;
  G__ModulesDictLN_DelphesPileUpReader.tagnum = -1 ;
  G__ModulesDictLN_DelphesTF2.tagnum = -1 ;
  G__ModulesDictLN_PileUpMerger.tagnum = -1 ;
  G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__ModulesDictLN_JetPileUpSubtractor.tagnum = -1 ;
  G__ModulesDictLN_TrackPileUpSubtractor.tagnum = -1 ;
  G__ModulesDictLN_PileUpJetID.tagnum = -1 ;
  G__ModulesDictLN_ConstituentFilter.tagnum = -1 ;
  G__ModulesDictLN_StatusPidFilter.tagnum = -1 ;
  G__ModulesDictLN_PdgCodeFilter.tagnum = -1 ;
  G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ModulesDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ModulesDictLN_Cloner.tagnum = -1 ;
  G__ModulesDictLN_Weighter.tagnum = -1 ;
  G__ModulesDictLN_H_BeamLine.tagnum = -1 ;
  G__ModulesDictLN_Hector.tagnum = -1 ;
  G__ModulesDictLN_ExampleModule.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableModulesDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlElongsPlongcOallocatorlElongsPlonggRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TTask);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTask);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTreeBranch);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootTreeWriter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesFactory);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Delphes),sizeof(Delphes),-1,324864,(char*)NULL,G__setup_memvarDelphes,G__setup_memfuncDelphes);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesFormula);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_AngularSmearing),sizeof(AngularSmearing),-1,324864,(char*)NULL,G__setup_memvarAngularSmearing,G__setup_memfuncAngularSmearing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ParticlePropagator),sizeof(ParticlePropagator),-1,324864,(char*)NULL,G__setup_memvarParticlePropagator,G__setup_memfuncParticlePropagator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Efficiency),sizeof(Efficiency),-1,324864,(char*)NULL,G__setup_memvarEfficiency,G__setup_memfuncEfficiency);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_IdentificationMap),sizeof(IdentificationMap),-1,324864,(char*)NULL,G__setup_memvarIdentificationMap,G__setup_memfuncIdentificationMap);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_pairlEintcODelphesFormulamUgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_multimaplEintcOpairlEintcODelphesFormulamUgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOpairlEintcODelphesFormulamUgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_EnergySmearing),sizeof(EnergySmearing),-1,324864,(char*)NULL,G__setup_memvarEnergySmearing,G__setup_memfuncEnergySmearing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_MomentumSmearing),sizeof(MomentumSmearing),-1,324864,(char*)NULL,G__setup_memvarMomentumSmearing,G__setup_memfuncMomentumSmearing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ImpactParameterSmearing),sizeof(ImpactParameterSmearing),-1,324864,(char*)NULL,G__setup_memvarImpactParameterSmearing,G__setup_memfuncImpactParameterSmearing);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TimeSmearing),sizeof(TimeSmearing),-1,324864,(char*)NULL,G__setup_memvarTimeSmearing,G__setup_memfuncTimeSmearing);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_setlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_Candidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_SimpleCalorimeter),sizeof(SimpleCalorimeter),-1,324864,(char*)NULL,G__setup_memvarSimpleCalorimeter,G__setup_memfuncSimpleCalorimeter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplElongsPlongcOdoublecOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplEdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRcOlesslEdoublegRcOallocatorlEpairlEconstsPdoublecOsetlEdoublecOlesslEdoublegRcOallocatorlEdoublegRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUcOallocatorlEvectorlEdoublecOallocatorlEdoublegRsPgRmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Calorimeter),sizeof(Calorimeter),-1,324864,(char*)NULL,G__setup_memvarCalorimeter,G__setup_memfuncCalorimeter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplElongsPlongcOpairlEdoublecOdoublegRcOlesslElongsPlonggRcOallocatorlEpairlEconstsPlongsPlongcOpairlEdoublecOdoublegRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExRootFilter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_IsolationClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Isolation),sizeof(Isolation),-1,324864,(char*)NULL,G__setup_memvarIsolation,G__setup_memfuncIsolation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_EnergyScale),sizeof(EnergyScale),-1,324864,(char*)NULL,G__setup_memvarEnergyScale,G__setup_memfuncEnergyScale);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_UniqueObjectFinder),sizeof(UniqueObjectFinder),-1,324864,(char*)NULL,G__setup_memvarUniqueObjectFinder,G__setup_memfuncUniqueObjectFinder);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_maplETIteratormUcOTObjArraymUcOlesslETIteratormUgRcOallocatorlEpairlETIteratormUsPconstcOTObjArraymUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TrackCountingBTagging),sizeof(TrackCountingBTagging),-1,324864,(char*)NULL,G__setup_memvarTrackCountingBTagging,G__setup_memfuncTrackCountingBTagging);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_BTaggingPartonClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_BTagging),sizeof(BTagging),-1,324864,(char*)NULL,G__setup_memvarBTagging,G__setup_memfuncBTagging);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TauTaggingPartonClassifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TauTagging),sizeof(TauTagging),-1,324864,(char*)NULL,G__setup_memvarTauTagging,G__setup_memfuncTauTagging);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_TRefArray);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TreeWriter),sizeof(TreeWriter),-1,324864,(char*)NULL,G__setup_memvarTreeWriter,G__setup_memfuncTreeWriter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Merger),sizeof(Merger),-1,324864,(char*)NULL,G__setup_memvarMerger,G__setup_memfuncMerger);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlETIteratormUcOallocatorlETIteratormUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlETIteratormUcOallocatorlETIteratormUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_LeptonDressing),sizeof(LeptonDressing),-1,324864,(char*)NULL,G__setup_memvarLeptonDressing,G__setup_memfuncLeptonDressing);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesPileUpReader);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_DelphesTF2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_PileUpMerger),sizeof(PileUpMerger),-1,324864,(char*)NULL,G__setup_memvarPileUpMerger,G__setup_memfuncPileUpMerger);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_dequelEdoublecOallocatorlEdoublegRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_JetPileUpSubtractor),sizeof(JetPileUpSubtractor),-1,324864,(char*)NULL,G__setup_memvarJetPileUpSubtractor,G__setup_memfuncJetPileUpSubtractor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_TrackPileUpSubtractor),sizeof(TrackPileUpSubtractor),-1,324864,(char*)NULL,G__setup_memvarTrackPileUpSubtractor,G__setup_memfuncTrackPileUpSubtractor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_PileUpJetID),sizeof(PileUpJetID),-1,324864,(char*)NULL,G__setup_memvarPileUpJetID,G__setup_memfuncPileUpJetID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ConstituentFilter),sizeof(ConstituentFilter),-1,324864,(char*)NULL,G__setup_memvarConstituentFilter,G__setup_memfuncConstituentFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_StatusPidFilter),sizeof(StatusPidFilter),-1,324864,(char*)NULL,G__setup_memvarStatusPidFilter,G__setup_memfuncStatusPidFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_PdgCodeFilter),sizeof(PdgCodeFilter),-1,324864,(char*)NULL,G__setup_memvarPdgCodeFilter,G__setup_memfuncPdgCodeFilter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Cloner),sizeof(Cloner),-1,324864,(char*)NULL,G__setup_memvarCloner,G__setup_memfuncCloner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Weighter),sizeof(Weighter),-1,324864,(char*)NULL,G__setup_memvarWeighter,G__setup_memfuncWeighter);
   G__get_linked_tagnum_fwd(&G__ModulesDictLN_H_BeamLine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_Hector),sizeof(Hector),-1,324864,(char*)NULL,G__setup_memvarHector,G__setup_memfuncHector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ModulesDictLN_ExampleModule),sizeof(ExampleModule),-1,324864,(char*)NULL,G__setup_memvarExampleModule,G__setup_memfuncExampleModule);
}
extern "C" void G__cpp_setupModulesDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupModulesDict()");
  G__set_cpp_environmentModulesDict();
  G__cpp_setup_tagtableModulesDict();

  G__cpp_setup_inheritanceModulesDict();

  G__cpp_setup_typetableModulesDict();

  G__cpp_setup_memvarModulesDict();

  G__cpp_setup_memfuncModulesDict();
  G__cpp_setup_globalModulesDict();
  G__cpp_setup_funcModulesDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncModulesDict();
  return;
}
class G__cpp_setup_initModulesDict {
  public:
    G__cpp_setup_initModulesDict() { G__add_setup_func("ModulesDict",(G__incsetup)(&G__cpp_setupModulesDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initModulesDict() { G__remove_setup_func("ModulesDict"); }
};
G__cpp_setup_initModulesDict G__cpp_setup_initializerModulesDict;

